// Code generated from goscript.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // goscript

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 87, 1000,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 3, 2, 3, 2, 3, 2, 6, 2, 84, 10, 2, 13, 2, 14, 2, 85,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 94, 10, 3, 12, 3, 14, 3, 97,
	11, 3, 3, 3, 5, 3, 100, 10, 3, 5, 3, 102, 10, 3, 3, 3, 3, 3, 5, 3, 106,
	10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 115, 10, 3, 12,
	3, 14, 3, 118, 11, 3, 3, 3, 5, 3, 121, 10, 3, 5, 3, 123, 10, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 7, 3, 130, 10, 3, 12, 3, 14, 3, 133, 11, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 144, 10, 3, 12, 3,
	14, 3, 147, 11, 3, 3, 3, 5, 3, 150, 10, 3, 5, 3, 152, 10, 3, 3, 3, 3, 3,
	5, 3, 156, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 165,
	10, 3, 12, 3, 14, 3, 168, 11, 3, 3, 3, 5, 3, 171, 10, 3, 5, 3, 173, 10,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 180, 10, 3, 12, 3, 14, 3, 183, 11,
	3, 3, 3, 3, 3, 3, 3, 5, 3, 188, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7,
	4, 195, 10, 4, 12, 4, 14, 4, 198, 11, 4, 3, 4, 5, 4, 201, 10, 4, 5, 4,
	203, 10, 4, 3, 4, 3, 4, 5, 4, 207, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 7, 4, 215, 10, 4, 12, 4, 14, 4, 218, 11, 4, 3, 4, 5, 4, 221, 10,
	4, 5, 4, 223, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 230, 10, 4, 12,
	4, 14, 4, 233, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7,
	4, 243, 10, 4, 12, 4, 14, 4, 246, 11, 4, 3, 4, 5, 4, 249, 10, 4, 5, 4,
	251, 10, 4, 3, 4, 3, 4, 5, 4, 255, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 7, 4, 263, 10, 4, 12, 4, 14, 4, 266, 11, 4, 3, 4, 5, 4, 269, 10,
	4, 5, 4, 271, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 278, 10, 4, 12,
	4, 14, 4, 281, 11, 4, 3, 4, 3, 4, 3, 4, 5, 4, 286, 10, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 11,
	3, 11, 5, 11, 303, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 5, 11, 323, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 330,
	10, 12, 12, 12, 14, 12, 333, 11, 12, 3, 12, 5, 12, 336, 10, 12, 5, 12,
	338, 10, 12, 3, 12, 3, 12, 5, 12, 342, 10, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 7, 12, 349, 10, 12, 12, 12, 14, 12, 352, 11, 12, 3, 12, 5, 12,
	355, 10, 12, 5, 12, 357, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7,
	12, 364, 10, 12, 12, 12, 14, 12, 367, 11, 12, 3, 12, 3, 12, 5, 12, 371,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 7, 13, 395, 10, 13, 12, 13, 14, 13, 398, 11, 13, 5, 13,
	400, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7,
	13, 410, 10, 13, 12, 13, 14, 13, 413, 11, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	5, 13, 419, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7,
	14, 428, 10, 14, 12, 14, 14, 14, 431, 11, 14, 3, 14, 3, 14, 5, 14, 435,
	10, 14, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 5, 16, 442, 10, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 462, 10, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 7, 17, 469, 10, 17, 12, 17, 14, 17, 472, 11, 17,
	3, 17, 5, 17, 475, 10, 17, 5, 17, 477, 10, 17, 3, 17, 3, 17, 5, 17, 481,
	10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 488, 10, 17, 12, 17,
	14, 17, 491, 11, 17, 3, 17, 5, 17, 494, 10, 17, 5, 17, 496, 10, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 503, 10, 17, 12, 17, 14, 17, 506,
	11, 17, 3, 17, 3, 17, 5, 17, 510, 10, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3,
	20, 3, 20, 3, 20, 3, 20, 5, 20, 520, 10, 20, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 530, 10, 21, 5, 21, 532, 10, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 6, 21,
	544, 10, 21, 13, 21, 14, 21, 545, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 7, 21, 588, 10, 21, 12, 21, 14, 21, 591, 11, 21, 3,
	21, 3, 21, 5, 21, 595, 10, 21, 3, 22, 3, 22, 3, 23, 3, 23, 7, 23, 601,
	10, 23, 12, 23, 14, 23, 604, 11, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24,
	5, 24, 611, 10, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 619,
	10, 26, 12, 26, 14, 26, 622, 11, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 7, 26, 630, 10, 26, 12, 26, 14, 26, 633, 11, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 7, 26, 639, 10, 26, 12, 26, 14, 26, 642, 11, 26, 5, 26, 644,
	10, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 5, 28, 651, 10, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 671, 10, 28, 12, 28, 14,
	28, 674, 11, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	7, 28, 684, 10, 28, 12, 28, 14, 28, 687, 11, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 697, 10, 28, 12, 28, 14, 28, 700,
	11, 28, 5, 28, 702, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 7, 28, 711, 10, 28, 12, 28, 14, 28, 714, 11, 28, 3, 29, 3, 29, 3, 30,
	3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 736, 10, 31, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 769,
	10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 789,
	10, 32, 12, 32, 14, 32, 792, 11, 32, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34,
	882, 10, 34, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 890, 10,
	36, 12, 36, 14, 36, 893, 11, 36, 5, 36, 895, 10, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 909,
	10, 36, 12, 36, 14, 36, 912, 11, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 925, 10, 36, 12, 36, 14,
	36, 928, 11, 36, 3, 36, 3, 36, 3, 36, 5, 36, 933, 10, 36, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 5, 37, 940, 10, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 953, 10, 38, 12, 38,
	14, 38, 956, 11, 38, 3, 38, 3, 38, 5, 38, 960, 10, 38, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 992, 10, 39, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 2, 4, 54, 62, 41, 2, 4, 6, 8,
	10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44,
	46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 2,
	10, 3, 2, 61, 62, 4, 2, 60, 60, 72, 72, 3, 2, 73, 74, 3, 2, 75, 79, 3,
	2, 56, 58, 3, 2, 59, 60, 3, 2, 63, 69, 4, 2, 26, 35, 37, 37, 2, 1126, 2,
	83, 3, 2, 2, 2, 4, 187, 3, 2, 2, 2, 6, 285, 3, 2, 2, 2, 8, 287, 3, 2, 2,
	2, 10, 289, 3, 2, 2, 2, 12, 291, 3, 2, 2, 2, 14, 293, 3, 2, 2, 2, 16, 295,
	3, 2, 2, 2, 18, 297, 3, 2, 2, 2, 20, 322, 3, 2, 2, 2, 22, 370, 3, 2, 2,
	2, 24, 418, 3, 2, 2, 2, 26, 434, 3, 2, 2, 2, 28, 436, 3, 2, 2, 2, 30, 461,
	3, 2, 2, 2, 32, 509, 3, 2, 2, 2, 34, 511, 3, 2, 2, 2, 36, 513, 3, 2, 2,
	2, 38, 519, 3, 2, 2, 2, 40, 594, 3, 2, 2, 2, 42, 596, 3, 2, 2, 2, 44, 598,
	3, 2, 2, 2, 46, 610, 3, 2, 2, 2, 48, 612, 3, 2, 2, 2, 50, 643, 3, 2, 2,
	2, 52, 645, 3, 2, 2, 2, 54, 650, 3, 2, 2, 2, 56, 715, 3, 2, 2, 2, 58, 717,
	3, 2, 2, 2, 60, 735, 3, 2, 2, 2, 62, 768, 3, 2, 2, 2, 64, 793, 3, 2, 2,
	2, 66, 881, 3, 2, 2, 2, 68, 883, 3, 2, 2, 2, 70, 932, 3, 2, 2, 2, 72, 939,
	3, 2, 2, 2, 74, 959, 3, 2, 2, 2, 76, 991, 3, 2, 2, 2, 78, 993, 3, 2, 2,
	2, 80, 84, 5, 4, 3, 2, 81, 84, 5, 24, 13, 2, 82, 84, 5, 38, 20, 2, 83,
	80, 3, 2, 2, 2, 83, 81, 3, 2, 2, 2, 83, 82, 3, 2, 2, 2, 84, 85, 3, 2, 2,
	2, 85, 83, 3, 2, 2, 2, 85, 86, 3, 2, 2, 2, 86, 3, 3, 2, 2, 2, 87, 88, 7,
	51, 2, 2, 88, 89, 7, 83, 2, 2, 89, 101, 7, 3, 2, 2, 90, 95, 5, 10, 6, 2,
	91, 92, 7, 4, 2, 2, 92, 94, 5, 10, 6, 2, 93, 91, 3, 2, 2, 2, 94, 97, 3,
	2, 2, 2, 95, 93, 3, 2, 2, 2, 95, 96, 3, 2, 2, 2, 96, 99, 3, 2, 2, 2, 97,
	95, 3, 2, 2, 2, 98, 100, 7, 85, 2, 2, 99, 98, 3, 2, 2, 2, 99, 100, 3, 2,
	2, 2, 100, 102, 3, 2, 2, 2, 101, 90, 3, 2, 2, 2, 101, 102, 3, 2, 2, 2,
	102, 103, 3, 2, 2, 2, 103, 105, 7, 5, 2, 2, 104, 106, 5, 16, 9, 2, 105,
	104, 3, 2, 2, 2, 105, 106, 3, 2, 2, 2, 106, 107, 3, 2, 2, 2, 107, 188,
	5, 8, 5, 2, 108, 109, 7, 51, 2, 2, 109, 110, 7, 83, 2, 2, 110, 122, 7,
	3, 2, 2, 111, 116, 5, 10, 6, 2, 112, 113, 7, 4, 2, 2, 113, 115, 5, 10,
	6, 2, 114, 112, 3, 2, 2, 2, 115, 118, 3, 2, 2, 2, 116, 114, 3, 2, 2, 2,
	116, 117, 3, 2, 2, 2, 117, 120, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119,
	121, 7, 85, 2, 2, 120, 119, 3, 2, 2, 2, 120, 121, 3, 2, 2, 2, 121, 123,
	3, 2, 2, 2, 122, 111, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2, 123, 124, 3, 2,
	2, 2, 124, 125, 7, 5, 2, 2, 125, 126, 7, 3, 2, 2, 126, 131, 5, 16, 9, 2,
	127, 128, 7, 4, 2, 2, 128, 130, 5, 16, 9, 2, 129, 127, 3, 2, 2, 2, 130,
	133, 3, 2, 2, 2, 131, 129, 3, 2, 2, 2, 131, 132, 3, 2, 2, 2, 132, 134,
	3, 2, 2, 2, 133, 131, 3, 2, 2, 2, 134, 135, 7, 5, 2, 2, 135, 136, 5, 8,
	5, 2, 136, 188, 3, 2, 2, 2, 137, 138, 7, 51, 2, 2, 138, 139, 7, 83, 2,
	2, 139, 151, 7, 3, 2, 2, 140, 145, 5, 10, 6, 2, 141, 142, 7, 4, 2, 2, 142,
	144, 5, 10, 6, 2, 143, 141, 3, 2, 2, 2, 144, 147, 3, 2, 2, 2, 145, 143,
	3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 146, 149, 3, 2, 2, 2, 147, 145, 3, 2,
	2, 2, 148, 150, 7, 85, 2, 2, 149, 148, 3, 2, 2, 2, 149, 150, 3, 2, 2, 2,
	150, 152, 3, 2, 2, 2, 151, 140, 3, 2, 2, 2, 151, 152, 3, 2, 2, 2, 152,
	153, 3, 2, 2, 2, 153, 155, 7, 5, 2, 2, 154, 156, 5, 12, 7, 2, 155, 154,
	3, 2, 2, 2, 155, 156, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 188, 5, 8,
	5, 2, 158, 159, 7, 51, 2, 2, 159, 160, 7, 83, 2, 2, 160, 172, 7, 3, 2,
	2, 161, 166, 5, 10, 6, 2, 162, 163, 7, 4, 2, 2, 163, 165, 5, 10, 6, 2,
	164, 162, 3, 2, 2, 2, 165, 168, 3, 2, 2, 2, 166, 164, 3, 2, 2, 2, 166,
	167, 3, 2, 2, 2, 167, 170, 3, 2, 2, 2, 168, 166, 3, 2, 2, 2, 169, 171,
	7, 85, 2, 2, 170, 169, 3, 2, 2, 2, 170, 171, 3, 2, 2, 2, 171, 173, 3, 2,
	2, 2, 172, 161, 3, 2, 2, 2, 172, 173, 3, 2, 2, 2, 173, 174, 3, 2, 2, 2,
	174, 175, 7, 5, 2, 2, 175, 176, 7, 3, 2, 2, 176, 181, 5, 12, 7, 2, 177,
	178, 7, 4, 2, 2, 178, 180, 5, 12, 7, 2, 179, 177, 3, 2, 2, 2, 180, 183,
	3, 2, 2, 2, 181, 179, 3, 2, 2, 2, 181, 182, 3, 2, 2, 2, 182, 184, 3, 2,
	2, 2, 183, 181, 3, 2, 2, 2, 184, 185, 7, 5, 2, 2, 185, 186, 5, 8, 5, 2,
	186, 188, 3, 2, 2, 2, 187, 87, 3, 2, 2, 2, 187, 108, 3, 2, 2, 2, 187, 137,
	3, 2, 2, 2, 187, 158, 3, 2, 2, 2, 188, 5, 3, 2, 2, 2, 189, 190, 7, 51,
	2, 2, 190, 202, 7, 3, 2, 2, 191, 196, 5, 10, 6, 2, 192, 193, 7, 4, 2, 2,
	193, 195, 5, 10, 6, 2, 194, 192, 3, 2, 2, 2, 195, 198, 3, 2, 2, 2, 196,
	194, 3, 2, 2, 2, 196, 197, 3, 2, 2, 2, 197, 200, 3, 2, 2, 2, 198, 196,
	3, 2, 2, 2, 199, 201, 7, 85, 2, 2, 200, 199, 3, 2, 2, 2, 200, 201, 3, 2,
	2, 2, 201, 203, 3, 2, 2, 2, 202, 191, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2,
	203, 204, 3, 2, 2, 2, 204, 206, 7, 5, 2, 2, 205, 207, 5, 16, 9, 2, 206,
	205, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 208, 3, 2, 2, 2, 208, 286,
	5, 8, 5, 2, 209, 210, 7, 51, 2, 2, 210, 222, 7, 3, 2, 2, 211, 216, 5, 10,
	6, 2, 212, 213, 7, 4, 2, 2, 213, 215, 5, 10, 6, 2, 214, 212, 3, 2, 2, 2,
	215, 218, 3, 2, 2, 2, 216, 214, 3, 2, 2, 2, 216, 217, 3, 2, 2, 2, 217,
	220, 3, 2, 2, 2, 218, 216, 3, 2, 2, 2, 219, 221, 7, 85, 2, 2, 220, 219,
	3, 2, 2, 2, 220, 221, 3, 2, 2, 2, 221, 223, 3, 2, 2, 2, 222, 211, 3, 2,
	2, 2, 222, 223, 3, 2, 2, 2, 223, 224, 3, 2, 2, 2, 224, 225, 7, 5, 2, 2,
	225, 226, 7, 3, 2, 2, 226, 231, 5, 16, 9, 2, 227, 228, 7, 4, 2, 2, 228,
	230, 5, 16, 9, 2, 229, 227, 3, 2, 2, 2, 230, 233, 3, 2, 2, 2, 231, 229,
	3, 2, 2, 2, 231, 232, 3, 2, 2, 2, 232, 234, 3, 2, 2, 2, 233, 231, 3, 2,
	2, 2, 234, 235, 7, 5, 2, 2, 235, 236, 5, 8, 5, 2, 236, 286, 3, 2, 2, 2,
	237, 238, 7, 51, 2, 2, 238, 250, 7, 3, 2, 2, 239, 244, 5, 10, 6, 2, 240,
	241, 7, 4, 2, 2, 241, 243, 5, 10, 6, 2, 242, 240, 3, 2, 2, 2, 243, 246,
	3, 2, 2, 2, 244, 242, 3, 2, 2, 2, 244, 245, 3, 2, 2, 2, 245, 248, 3, 2,
	2, 2, 246, 244, 3, 2, 2, 2, 247, 249, 7, 85, 2, 2, 248, 247, 3, 2, 2, 2,
	248, 249, 3, 2, 2, 2, 249, 251, 3, 2, 2, 2, 250, 239, 3, 2, 2, 2, 250,
	251, 3, 2, 2, 2, 251, 252, 3, 2, 2, 2, 252, 254, 7, 5, 2, 2, 253, 255,
	5, 12, 7, 2, 254, 253, 3, 2, 2, 2, 254, 255, 3, 2, 2, 2, 255, 256, 3, 2,
	2, 2, 256, 286, 5, 8, 5, 2, 257, 258, 7, 51, 2, 2, 258, 270, 7, 3, 2, 2,
	259, 264, 5, 10, 6, 2, 260, 261, 7, 4, 2, 2, 261, 263, 5, 10, 6, 2, 262,
	260, 3, 2, 2, 2, 263, 266, 3, 2, 2, 2, 264, 262, 3, 2, 2, 2, 264, 265,
	3, 2, 2, 2, 265, 268, 3, 2, 2, 2, 266, 264, 3, 2, 2, 2, 267, 269, 7, 85,
	2, 2, 268, 267, 3, 2, 2, 2, 268, 269, 3, 2, 2, 2, 269, 271, 3, 2, 2, 2,
	270, 259, 3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 272, 3, 2, 2, 2, 272,
	273, 7, 5, 2, 2, 273, 274, 7, 3, 2, 2, 274, 279, 5, 12, 7, 2, 275, 276,
	7, 4, 2, 2, 276, 278, 5, 12, 7, 2, 277, 275, 3, 2, 2, 2, 278, 281, 3, 2,
	2, 2, 279, 277, 3, 2, 2, 2, 279, 280, 3, 2, 2, 2, 280, 282, 3, 2, 2, 2,
	281, 279, 3, 2, 2, 2, 282, 283, 7, 5, 2, 2, 283, 284, 5, 8, 5, 2, 284,
	286, 3, 2, 2, 2, 285, 189, 3, 2, 2, 2, 285, 209, 3, 2, 2, 2, 285, 237,
	3, 2, 2, 2, 285, 257, 3, 2, 2, 2, 286, 7, 3, 2, 2, 2, 287, 288, 5, 44,
	23, 2, 288, 9, 3, 2, 2, 2, 289, 290, 5, 18, 10, 2, 290, 11, 3, 2, 2, 2,
	291, 292, 5, 18, 10, 2, 292, 13, 3, 2, 2, 2, 293, 294, 5, 20, 11, 2, 294,
	15, 3, 2, 2, 2, 295, 296, 5, 20, 11, 2, 296, 17, 3, 2, 2, 2, 297, 298,
	7, 83, 2, 2, 298, 299, 5, 20, 11, 2, 299, 19, 3, 2, 2, 2, 300, 303, 7,
	83, 2, 2, 301, 303, 5, 64, 33, 2, 302, 300, 3, 2, 2, 2, 302, 301, 3, 2,
	2, 2, 303, 323, 3, 2, 2, 2, 304, 323, 5, 22, 12, 2, 305, 306, 7, 22, 2,
	2, 306, 307, 7, 68, 2, 2, 307, 308, 5, 64, 33, 2, 308, 309, 7, 4, 2, 2,
	309, 310, 5, 20, 11, 2, 310, 311, 7, 65, 2, 2, 311, 323, 3, 2, 2, 2, 312,
	313, 7, 23, 2, 2, 313, 314, 7, 68, 2, 2, 314, 315, 5, 20, 11, 2, 315, 316,
	7, 65, 2, 2, 316, 323, 3, 2, 2, 2, 317, 318, 7, 36, 2, 2, 318, 319, 7,
	68, 2, 2, 319, 320, 5, 20, 11, 2, 320, 321, 7, 65, 2, 2, 321, 323, 3, 2,
	2, 2, 322, 302, 3, 2, 2, 2, 322, 304, 3, 2, 2, 2, 322, 305, 3, 2, 2, 2,
	322, 312, 3, 2, 2, 2, 322, 317, 3, 2, 2, 2, 323, 21, 3, 2, 2, 2, 324, 325,
	7, 51, 2, 2, 325, 337, 7, 3, 2, 2, 326, 331, 5, 14, 8, 2, 327, 328, 7,
	4, 2, 2, 328, 330, 5, 14, 8, 2, 329, 327, 3, 2, 2, 2, 330, 333, 3, 2, 2,
	2, 331, 329, 3, 2, 2, 2, 331, 332, 3, 2, 2, 2, 332, 335, 3, 2, 2, 2, 333,
	331, 3, 2, 2, 2, 334, 336, 7, 85, 2, 2, 335, 334, 3, 2, 2, 2, 335, 336,
	3, 2, 2, 2, 336, 338, 3, 2, 2, 2, 337, 326, 3, 2, 2, 2, 337, 338, 3, 2,
	2, 2, 338, 339, 3, 2, 2, 2, 339, 341, 7, 5, 2, 2, 340, 342, 5, 16, 9, 2,
	341, 340, 3, 2, 2, 2, 341, 342, 3, 2, 2, 2, 342, 371, 3, 2, 2, 2, 343,
	344, 7, 51, 2, 2, 344, 356, 7, 3, 2, 2, 345, 350, 5, 14, 8, 2, 346, 347,
	7, 4, 2, 2, 347, 349, 5, 14, 8, 2, 348, 346, 3, 2, 2, 2, 349, 352, 3, 2,
	2, 2, 350, 348, 3, 2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 354, 3, 2, 2, 2,
	352, 350, 3, 2, 2, 2, 353, 355, 7, 85, 2, 2, 354, 353, 3, 2, 2, 2, 354,
	355, 3, 2, 2, 2, 355, 357, 3, 2, 2, 2, 356, 345, 3, 2, 2, 2, 356, 357,
	3, 2, 2, 2, 357, 358, 3, 2, 2, 2, 358, 359, 7, 5, 2, 2, 359, 360, 7, 3,
	2, 2, 360, 365, 5, 16, 9, 2, 361, 362, 7, 4, 2, 2, 362, 364, 5, 16, 9,
	2, 363, 361, 3, 2, 2, 2, 364, 367, 3, 2, 2, 2, 365, 363, 3, 2, 2, 2, 365,
	366, 3, 2, 2, 2, 366, 368, 3, 2, 2, 2, 367, 365, 3, 2, 2, 2, 368, 369,
	7, 5, 2, 2, 369, 371, 3, 2, 2, 2, 370, 324, 3, 2, 2, 2, 370, 343, 3, 2,
	2, 2, 371, 23, 3, 2, 2, 2, 372, 373, 7, 52, 2, 2, 373, 374, 7, 83, 2, 2,
	374, 375, 7, 22, 2, 2, 375, 376, 7, 68, 2, 2, 376, 377, 5, 64, 33, 2, 377,
	378, 7, 4, 2, 2, 378, 379, 5, 30, 16, 2, 379, 380, 7, 65, 2, 2, 380, 419,
	3, 2, 2, 2, 381, 382, 7, 52, 2, 2, 382, 383, 7, 83, 2, 2, 383, 384, 7,
	23, 2, 2, 384, 385, 7, 68, 2, 2, 385, 386, 5, 30, 16, 2, 386, 387, 7, 65,
	2, 2, 387, 419, 3, 2, 2, 2, 388, 389, 7, 52, 2, 2, 389, 390, 7, 83, 2,
	2, 390, 391, 7, 24, 2, 2, 391, 399, 7, 6, 2, 2, 392, 396, 5, 26, 14, 2,
	393, 395, 5, 26, 14, 2, 394, 393, 3, 2, 2, 2, 395, 398, 3, 2, 2, 2, 396,
	394, 3, 2, 2, 2, 396, 397, 3, 2, 2, 2, 397, 400, 3, 2, 2, 2, 398, 396,
	3, 2, 2, 2, 399, 392, 3, 2, 2, 2, 399, 400, 3, 2, 2, 2, 400, 401, 3, 2,
	2, 2, 401, 419, 7, 7, 2, 2, 402, 403, 7, 52, 2, 2, 403, 404, 7, 83, 2,
	2, 404, 405, 7, 25, 2, 2, 405, 411, 7, 6, 2, 2, 406, 407, 7, 83, 2, 2,
	407, 408, 7, 8, 2, 2, 408, 410, 7, 80, 2, 2, 409, 406, 3, 2, 2, 2, 410,
	413, 3, 2, 2, 2, 411, 409, 3, 2, 2, 2, 411, 412, 3, 2, 2, 2, 412, 414,
	3, 2, 2, 2, 413, 411, 3, 2, 2, 2, 414, 419, 7, 7, 2, 2, 415, 416, 7, 52,
	2, 2, 416, 417, 7, 83, 2, 2, 417, 419, 5, 32, 17, 2, 418, 372, 3, 2, 2,
	2, 418, 381, 3, 2, 2, 2, 418, 388, 3, 2, 2, 2, 418, 402, 3, 2, 2, 2, 418,
	415, 3, 2, 2, 2, 419, 25, 3, 2, 2, 2, 420, 421, 7, 83, 2, 2, 421, 435,
	5, 30, 16, 2, 422, 423, 7, 50, 2, 2, 423, 424, 7, 83, 2, 2, 424, 425, 7,
	6, 2, 2, 425, 429, 5, 28, 15, 2, 426, 428, 5, 28, 15, 2, 427, 426, 3, 2,
	2, 2, 428, 431, 3, 2, 2, 2, 429, 427, 3, 2, 2, 2, 429, 430, 3, 2, 2, 2,
	430, 432, 3, 2, 2, 2, 431, 429, 3, 2, 2, 2, 432, 433, 7, 7, 2, 2, 433,
	435, 3, 2, 2, 2, 434, 420, 3, 2, 2, 2, 434, 422, 3, 2, 2, 2, 435, 27, 3,
	2, 2, 2, 436, 437, 7, 83, 2, 2, 437, 438, 5, 30, 16, 2, 438, 29, 3, 2,
	2, 2, 439, 442, 7, 83, 2, 2, 440, 442, 5, 64, 33, 2, 441, 439, 3, 2, 2,
	2, 441, 440, 3, 2, 2, 2, 442, 462, 3, 2, 2, 2, 443, 462, 5, 32, 17, 2,
	444, 445, 7, 22, 2, 2, 445, 446, 7, 68, 2, 2, 446, 447, 5, 64, 33, 2, 447,
	448, 7, 4, 2, 2, 448, 449, 5, 30, 16, 2, 449, 450, 7, 65, 2, 2, 450, 462,
	3, 2, 2, 2, 451, 452, 7, 23, 2, 2, 452, 453, 7, 68, 2, 2, 453, 454, 5,
	30, 16, 2, 454, 455, 7, 65, 2, 2, 455, 462, 3, 2, 2, 2, 456, 457, 7, 36,
	2, 2, 457, 458, 7, 68, 2, 2, 458, 459, 5, 30, 16, 2, 459, 460, 7, 65, 2,
	2, 460, 462, 3, 2, 2, 2, 461, 441, 3, 2, 2, 2, 461, 443, 3, 2, 2, 2, 461,
	444, 3, 2, 2, 2, 461, 451, 3, 2, 2, 2, 461, 456, 3, 2, 2, 2, 462, 31, 3,
	2, 2, 2, 463, 464, 7, 51, 2, 2, 464, 476, 7, 3, 2, 2, 465, 470, 5, 34,
	18, 2, 466, 467, 7, 4, 2, 2, 467, 469, 5, 34, 18, 2, 468, 466, 3, 2, 2,
	2, 469, 472, 3, 2, 2, 2, 470, 468, 3, 2, 2, 2, 470, 471, 3, 2, 2, 2, 471,
	474, 3, 2, 2, 2, 472, 470, 3, 2, 2, 2, 473, 475, 7, 85, 2, 2, 474, 473,
	3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 477, 3, 2, 2, 2, 476, 465, 3, 2,
	2, 2, 476, 477, 3, 2, 2, 2, 477, 478, 3, 2, 2, 2, 478, 480, 7, 5, 2, 2,
	479, 481, 5, 36, 19, 2, 480, 479, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481,
	510, 3, 2, 2, 2, 482, 483, 7, 51, 2, 2, 483, 495, 7, 3, 2, 2, 484, 489,
	5, 34, 18, 2, 485, 486, 7, 4, 2, 2, 486, 488, 5, 34, 18, 2, 487, 485, 3,
	2, 2, 2, 488, 491, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 489, 490, 3, 2, 2,
	2, 490, 493, 3, 2, 2, 2, 491, 489, 3, 2, 2, 2, 492, 494, 7, 85, 2, 2, 493,
	492, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494, 496, 3, 2, 2, 2, 495, 484,
	3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 498, 7, 5,
	2, 2, 498, 499, 7, 3, 2, 2, 499, 504, 5, 36, 19, 2, 500, 501, 7, 4, 2,
	2, 501, 503, 5, 36, 19, 2, 502, 500, 3, 2, 2, 2, 503, 506, 3, 2, 2, 2,
	504, 502, 3, 2, 2, 2, 504, 505, 3, 2, 2, 2, 505, 507, 3, 2, 2, 2, 506,
	504, 3, 2, 2, 2, 507, 508, 7, 5, 2, 2, 508, 510, 3, 2, 2, 2, 509, 463,
	3, 2, 2, 2, 509, 482, 3, 2, 2, 2, 510, 33, 3, 2, 2, 2, 511, 512, 5, 30,
	16, 2, 512, 35, 3, 2, 2, 2, 513, 514, 5, 30, 16, 2, 514, 37, 3, 2, 2, 2,
	515, 520, 5, 40, 21, 2, 516, 517, 5, 46, 24, 2, 517, 518, 7, 9, 2, 2, 518,
	520, 3, 2, 2, 2, 519, 515, 3, 2, 2, 2, 519, 516, 3, 2, 2, 2, 520, 39, 3,
	2, 2, 2, 521, 522, 7, 42, 2, 2, 522, 523, 7, 3, 2, 2, 523, 524, 5, 62,
	32, 2, 524, 525, 7, 5, 2, 2, 525, 531, 5, 44, 23, 2, 526, 529, 7, 43, 2,
	2, 527, 530, 5, 44, 23, 2, 528, 530, 5, 40, 21, 2, 529, 527, 3, 2, 2, 2,
	529, 528, 3, 2, 2, 2, 530, 532, 3, 2, 2, 2, 531, 526, 3, 2, 2, 2, 531,
	532, 3, 2, 2, 2, 532, 595, 3, 2, 2, 2, 533, 534, 7, 44, 2, 2, 534, 535,
	7, 3, 2, 2, 535, 536, 5, 62, 32, 2, 536, 537, 7, 5, 2, 2, 537, 543, 7,
	6, 2, 2, 538, 539, 7, 45, 2, 2, 539, 540, 5, 72, 37, 2, 540, 541, 7, 8,
	2, 2, 541, 542, 5, 44, 23, 2, 542, 544, 3, 2, 2, 2, 543, 538, 3, 2, 2,
	2, 544, 545, 3, 2, 2, 2, 545, 543, 3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546,
	547, 3, 2, 2, 2, 547, 548, 7, 7, 2, 2, 548, 595, 3, 2, 2, 2, 549, 550,
	7, 39, 2, 2, 550, 551, 7, 3, 2, 2, 551, 552, 7, 83, 2, 2, 552, 553, 7,
	10, 2, 2, 553, 554, 5, 42, 22, 2, 554, 555, 7, 5, 2, 2, 555, 556, 5, 44,
	23, 2, 556, 595, 3, 2, 2, 2, 557, 558, 7, 39, 2, 2, 558, 559, 7, 3, 2,
	2, 559, 560, 7, 83, 2, 2, 560, 561, 7, 4, 2, 2, 561, 562, 7, 83, 2, 2,
	562, 563, 7, 10, 2, 2, 563, 564, 5, 42, 22, 2, 564, 565, 7, 5, 2, 2, 565,
	566, 5, 44, 23, 2, 566, 595, 3, 2, 2, 2, 567, 568, 7, 39, 2, 2, 568, 569,
	7, 3, 2, 2, 569, 570, 5, 46, 24, 2, 570, 571, 7, 9, 2, 2, 571, 572, 5,
	62, 32, 2, 572, 573, 7, 9, 2, 2, 573, 574, 5, 48, 25, 2, 574, 575, 7, 5,
	2, 2, 575, 576, 5, 44, 23, 2, 576, 595, 3, 2, 2, 2, 577, 578, 7, 40, 2,
	2, 578, 595, 7, 9, 2, 2, 579, 580, 7, 41, 2, 2, 580, 595, 7, 9, 2, 2, 581,
	582, 7, 46, 2, 2, 582, 595, 7, 9, 2, 2, 583, 584, 7, 46, 2, 2, 584, 589,
	5, 62, 32, 2, 585, 586, 7, 4, 2, 2, 586, 588, 5, 62, 32, 2, 587, 585, 3,
	2, 2, 2, 588, 591, 3, 2, 2, 2, 589, 587, 3, 2, 2, 2, 589, 590, 3, 2, 2,
	2, 590, 592, 3, 2, 2, 2, 591, 589, 3, 2, 2, 2, 592, 593, 7, 9, 2, 2, 593,
	595, 3, 2, 2, 2, 594, 521, 3, 2, 2, 2, 594, 533, 3, 2, 2, 2, 594, 549,
	3, 2, 2, 2, 594, 557, 3, 2, 2, 2, 594, 567, 3, 2, 2, 2, 594, 577, 3, 2,
	2, 2, 594, 579, 3, 2, 2, 2, 594, 581, 3, 2, 2, 2, 594, 583, 3, 2, 2, 2,
	595, 41, 3, 2, 2, 2, 596, 597, 5, 62, 32, 2, 597, 43, 3, 2, 2, 2, 598,
	602, 7, 6, 2, 2, 599, 601, 5, 38, 20, 2, 600, 599, 3, 2, 2, 2, 601, 604,
	3, 2, 2, 2, 602, 600, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 605, 3, 2,
	2, 2, 604, 602, 3, 2, 2, 2, 605, 606, 7, 7, 2, 2, 606, 45, 3, 2, 2, 2,
	607, 611, 5, 48, 25, 2, 608, 611, 5, 76, 39, 2, 609, 611, 5, 78, 40, 2,
	610, 607, 3, 2, 2, 2, 610, 608, 3, 2, 2, 2, 610, 609, 3, 2, 2, 2, 611,
	47, 3, 2, 2, 2, 612, 613, 5, 50, 26, 2, 613, 49, 3, 2, 2, 2, 614, 644,
	5, 62, 32, 2, 615, 620, 5, 52, 27, 2, 616, 617, 7, 4, 2, 2, 617, 619, 5,
	52, 27, 2, 618, 616, 3, 2, 2, 2, 619, 622, 3, 2, 2, 2, 620, 618, 3, 2,
	2, 2, 620, 621, 3, 2, 2, 2, 621, 623, 3, 2, 2, 2, 622, 620, 3, 2, 2, 2,
	623, 624, 7, 75, 2, 2, 624, 625, 5, 54, 28, 2, 625, 644, 3, 2, 2, 2, 626,
	631, 5, 52, 27, 2, 627, 628, 7, 4, 2, 2, 628, 630, 5, 52, 27, 2, 629, 627,
	3, 2, 2, 2, 630, 633, 3, 2, 2, 2, 631, 629, 3, 2, 2, 2, 631, 632, 3, 2,
	2, 2, 632, 634, 3, 2, 2, 2, 633, 631, 3, 2, 2, 2, 634, 635, 7, 75, 2, 2,
	635, 640, 5, 62, 32, 2, 636, 637, 7, 4, 2, 2, 637, 639, 5, 62, 32, 2, 638,
	636, 3, 2, 2, 2, 639, 642, 3, 2, 2, 2, 640, 638, 3, 2, 2, 2, 640, 641,
	3, 2, 2, 2, 641, 644, 3, 2, 2, 2, 642, 640, 3, 2, 2, 2, 643, 614, 3, 2,
	2, 2, 643, 615, 3, 2, 2, 2, 643, 626, 3, 2, 2, 2, 644, 51, 3, 2, 2, 2,
	645, 646, 5, 54, 28, 2, 646, 53, 3, 2, 2, 2, 647, 648, 8, 28, 1, 2, 648,
	651, 7, 83, 2, 2, 649, 651, 7, 15, 2, 2, 650, 647, 3, 2, 2, 2, 650, 649,
	3, 2, 2, 2, 651, 712, 3, 2, 2, 2, 652, 653, 12, 11, 2, 2, 653, 654, 7,
	84, 2, 2, 654, 711, 7, 83, 2, 2, 655, 656, 12, 10, 2, 2, 656, 657, 7, 11,
	2, 2, 657, 658, 5, 58, 30, 2, 658, 659, 7, 12, 2, 2, 659, 711, 3, 2, 2,
	2, 660, 661, 12, 9, 2, 2, 661, 662, 7, 13, 2, 2, 662, 663, 5, 62, 32, 2,
	663, 664, 7, 14, 2, 2, 664, 711, 3, 2, 2, 2, 665, 666, 12, 8, 2, 2, 666,
	667, 7, 13, 2, 2, 667, 672, 5, 60, 31, 2, 668, 669, 7, 4, 2, 2, 669, 671,
	5, 60, 31, 2, 670, 668, 3, 2, 2, 2, 671, 674, 3, 2, 2, 2, 672, 670, 3,
	2, 2, 2, 672, 673, 3, 2, 2, 2, 673, 675, 3, 2, 2, 2, 674, 672, 3, 2, 2,
	2, 675, 676, 7, 14, 2, 2, 676, 711, 3, 2, 2, 2, 677, 678, 12, 7, 2, 2,
	678, 679, 7, 13, 2, 2, 679, 680, 7, 13, 2, 2, 680, 685, 5, 62, 32, 2, 681,
	682, 7, 4, 2, 2, 682, 684, 5, 62, 32, 2, 683, 681, 3, 2, 2, 2, 684, 687,
	3, 2, 2, 2, 685, 683, 3, 2, 2, 2, 685, 686, 3, 2, 2, 2, 686, 688, 3, 2,
	2, 2, 687, 685, 3, 2, 2, 2, 688, 689, 7, 14, 2, 2, 689, 690, 7, 14, 2,
	2, 690, 711, 3, 2, 2, 2, 691, 692, 12, 6, 2, 2, 692, 701, 7, 3, 2, 2, 693,
	698, 5, 62, 32, 2, 694, 695, 7, 4, 2, 2, 695, 697, 5, 62, 32, 2, 696, 694,
	3, 2, 2, 2, 697, 700, 3, 2, 2, 2, 698, 696, 3, 2, 2, 2, 698, 699, 3, 2,
	2, 2, 699, 702, 3, 2, 2, 2, 700, 698, 3, 2, 2, 2, 701, 693, 3, 2, 2, 2,
	701, 702, 3, 2, 2, 2, 702, 703, 3, 2, 2, 2, 703, 711, 7, 5, 2, 2, 704,
	705, 12, 5, 2, 2, 705, 706, 7, 84, 2, 2, 706, 707, 7, 3, 2, 2, 707, 708,
	5, 56, 29, 2, 708, 709, 7, 5, 2, 2, 709, 711, 3, 2, 2, 2, 710, 652, 3,
	2, 2, 2, 710, 655, 3, 2, 2, 2, 710, 660, 3, 2, 2, 2, 710, 665, 3, 2, 2,
	2, 710, 677, 3, 2, 2, 2, 710, 691, 3, 2, 2, 2, 710, 704, 3, 2, 2, 2, 711,
	714, 3, 2, 2, 2, 712, 710, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 55, 3,
	2, 2, 2, 714, 712, 3, 2, 2, 2, 715, 716, 5, 20, 11, 2, 716, 57, 3, 2, 2,
	2, 717, 718, 5, 62, 32, 2, 718, 59, 3, 2, 2, 2, 719, 720, 5, 62, 32, 2,
	720, 721, 7, 8, 2, 2, 721, 722, 5, 62, 32, 2, 722, 723, 7, 8, 2, 2, 723,
	724, 5, 62, 32, 2, 724, 736, 3, 2, 2, 2, 725, 726, 5, 62, 32, 2, 726, 727,
	7, 8, 2, 2, 727, 728, 5, 62, 32, 2, 728, 736, 3, 2, 2, 2, 729, 730, 5,
	62, 32, 2, 730, 731, 7, 8, 2, 2, 731, 736, 3, 2, 2, 2, 732, 736, 5, 62,
	32, 2, 733, 734, 7, 8, 2, 2, 734, 736, 5, 62, 32, 2, 735, 719, 3, 2, 2,
	2, 735, 725, 3, 2, 2, 2, 735, 729, 3, 2, 2, 2, 735, 732, 3, 2, 2, 2, 735,
	733, 3, 2, 2, 2, 736, 61, 3, 2, 2, 2, 737, 738, 8, 32, 1, 2, 738, 739,
	7, 3, 2, 2, 739, 740, 5, 62, 32, 2, 740, 741, 7, 5, 2, 2, 741, 769, 3,
	2, 2, 2, 742, 769, 5, 72, 37, 2, 743, 769, 5, 54, 28, 2, 744, 769, 5, 6,
	4, 2, 745, 769, 5, 66, 34, 2, 746, 747, 9, 2, 2, 2, 747, 769, 5, 54, 28,
	2, 748, 749, 9, 3, 2, 2, 749, 769, 5, 62, 32, 15, 750, 751, 5, 54, 28,
	2, 751, 752, 9, 2, 2, 2, 752, 769, 3, 2, 2, 2, 753, 754, 5, 54, 28, 2,
	754, 755, 9, 4, 2, 2, 755, 756, 5, 54, 28, 2, 756, 769, 3, 2, 2, 2, 757,
	758, 9, 4, 2, 2, 758, 769, 5, 54, 28, 2, 759, 760, 5, 52, 27, 2, 760, 761,
	9, 5, 2, 2, 761, 762, 5, 62, 32, 5, 762, 769, 3, 2, 2, 2, 763, 764, 5,
	52, 27, 2, 764, 765, 7, 75, 2, 2, 765, 766, 5, 68, 35, 2, 766, 769, 3,
	2, 2, 2, 767, 769, 5, 74, 38, 2, 768, 737, 3, 2, 2, 2, 768, 742, 3, 2,
	2, 2, 768, 743, 3, 2, 2, 2, 768, 744, 3, 2, 2, 2, 768, 745, 3, 2, 2, 2,
	768, 746, 3, 2, 2, 2, 768, 748, 3, 2, 2, 2, 768, 750, 3, 2, 2, 2, 768,
	753, 3, 2, 2, 2, 768, 757, 3, 2, 2, 2, 768, 759, 3, 2, 2, 2, 768, 763,
	3, 2, 2, 2, 768, 767, 3, 2, 2, 2, 769, 790, 3, 2, 2, 2, 770, 771, 12, 13,
	2, 2, 771, 772, 7, 55, 2, 2, 772, 789, 5, 62, 32, 13, 773, 774, 12, 12,
	2, 2, 774, 775, 9, 6, 2, 2, 775, 789, 5, 62, 32, 13, 776, 777, 12, 11,
	2, 2, 777, 778, 9, 7, 2, 2, 778, 789, 5, 62, 32, 12, 779, 780, 12, 10,
	2, 2, 780, 781, 9, 8, 2, 2, 781, 789, 5, 62, 32, 11, 782, 783, 12, 9, 2,
	2, 783, 784, 7, 70, 2, 2, 784, 789, 5, 62, 32, 10, 785, 786, 12, 8, 2,
	2, 786, 787, 7, 71, 2, 2, 787, 789, 5, 62, 32, 9, 788, 770, 3, 2, 2, 2,
	788, 773, 3, 2, 2, 2, 788, 776, 3, 2, 2, 2, 788, 779, 3, 2, 2, 2, 788,
	782, 3, 2, 2, 2, 788, 785, 3, 2, 2, 2, 789, 792, 3, 2, 2, 2, 790, 788,
	3, 2, 2, 2, 790, 791, 3, 2, 2, 2, 791, 63, 3, 2, 2, 2, 792, 790, 3, 2,
	2, 2, 793, 794, 9, 9, 2, 2, 794, 65, 3, 2, 2, 2, 795, 796, 7, 16, 2, 2,
	796, 797, 7, 3, 2, 2, 797, 798, 5, 54, 28, 2, 798, 799, 7, 4, 2, 2, 799,
	800, 5, 62, 32, 2, 800, 801, 7, 5, 2, 2, 801, 882, 3, 2, 2, 2, 802, 803,
	7, 17, 2, 2, 803, 804, 7, 3, 2, 2, 804, 805, 5, 54, 28, 2, 805, 806, 7,
	4, 2, 2, 806, 807, 5, 62, 32, 2, 807, 808, 7, 5, 2, 2, 808, 882, 3, 2,
	2, 2, 809, 810, 7, 18, 2, 2, 810, 811, 7, 3, 2, 2, 811, 812, 5, 54, 28,
	2, 812, 813, 7, 4, 2, 2, 813, 814, 5, 62, 32, 2, 814, 815, 7, 5, 2, 2,
	815, 882, 3, 2, 2, 2, 816, 817, 7, 19, 2, 2, 817, 818, 7, 3, 2, 2, 818,
	819, 5, 54, 28, 2, 819, 820, 7, 5, 2, 2, 820, 882, 3, 2, 2, 2, 821, 822,
	7, 20, 2, 2, 822, 823, 7, 3, 2, 2, 823, 824, 5, 54, 28, 2, 824, 825, 7,
	5, 2, 2, 825, 882, 3, 2, 2, 2, 826, 827, 7, 21, 2, 2, 827, 828, 7, 3, 2,
	2, 828, 829, 5, 54, 28, 2, 829, 830, 7, 5, 2, 2, 830, 882, 3, 2, 2, 2,
	831, 832, 7, 26, 2, 2, 832, 833, 7, 3, 2, 2, 833, 834, 5, 62, 32, 2, 834,
	835, 7, 5, 2, 2, 835, 882, 3, 2, 2, 2, 836, 837, 7, 27, 2, 2, 837, 838,
	7, 3, 2, 2, 838, 839, 5, 62, 32, 2, 839, 840, 7, 5, 2, 2, 840, 882, 3,
	2, 2, 2, 841, 842, 7, 28, 2, 2, 842, 843, 7, 3, 2, 2, 843, 844, 5, 62,
	32, 2, 844, 845, 7, 5, 2, 2, 845, 882, 3, 2, 2, 2, 846, 847, 7, 29, 2,
	2, 847, 848, 7, 3, 2, 2, 848, 849, 5, 62, 32, 2, 849, 850, 7, 5, 2, 2,
	850, 882, 3, 2, 2, 2, 851, 852, 7, 30, 2, 2, 852, 853, 7, 3, 2, 2, 853,
	854, 5, 62, 32, 2, 854, 855, 7, 5, 2, 2, 855, 882, 3, 2, 2, 2, 856, 857,
	7, 31, 2, 2, 857, 858, 7, 3, 2, 2, 858, 859, 5, 62, 32, 2, 859, 860, 7,
	5, 2, 2, 860, 882, 3, 2, 2, 2, 861, 862, 7, 32, 2, 2, 862, 863, 7, 3, 2,
	2, 863, 864, 5, 62, 32, 2, 864, 865, 7, 5, 2, 2, 865, 882, 3, 2, 2, 2,
	866, 867, 7, 33, 2, 2, 867, 868, 7, 3, 2, 2, 868, 869, 5, 62, 32, 2, 869,
	870, 7, 5, 2, 2, 870, 882, 3, 2, 2, 2, 871, 872, 7, 34, 2, 2, 872, 873,
	7, 3, 2, 2, 873, 874, 5, 62, 32, 2, 874, 875, 7, 5, 2, 2, 875, 882, 3,
	2, 2, 2, 876, 877, 7, 35, 2, 2, 877, 878, 7, 3, 2, 2, 878, 879, 5, 62,
	32, 2, 879, 880, 7, 5, 2, 2, 880, 882, 3, 2, 2, 2, 881, 795, 3, 2, 2, 2,
	881, 802, 3, 2, 2, 2, 881, 809, 3, 2, 2, 2, 881, 816, 3, 2, 2, 2, 881,
	821, 3, 2, 2, 2, 881, 826, 3, 2, 2, 2, 881, 831, 3, 2, 2, 2, 881, 836,
	3, 2, 2, 2, 881, 841, 3, 2, 2, 2, 881, 846, 3, 2, 2, 2, 881, 851, 3, 2,
	2, 2, 881, 856, 3, 2, 2, 2, 881, 861, 3, 2, 2, 2, 881, 866, 3, 2, 2, 2,
	881, 871, 3, 2, 2, 2, 881, 876, 3, 2, 2, 2, 882, 67, 3, 2, 2, 2, 883, 884,
	5, 70, 36, 2, 884, 69, 3, 2, 2, 2, 885, 894, 7, 13, 2, 2, 886, 891, 5,
	70, 36, 2, 887, 888, 7, 4, 2, 2, 888, 890, 5, 70, 36, 2, 889, 887, 3, 2,
	2, 2, 890, 893, 3, 2, 2, 2, 891, 889, 3, 2, 2, 2, 891, 892, 3, 2, 2, 2,
	892, 895, 3, 2, 2, 2, 893, 891, 3, 2, 2, 2, 894, 886, 3, 2, 2, 2, 894,
	895, 3, 2, 2, 2, 895, 896, 3, 2, 2, 2, 896, 933, 7, 14, 2, 2, 897, 898,
	7, 6, 2, 2, 898, 899, 7, 83, 2, 2, 899, 900, 7, 3, 2, 2, 900, 901, 5, 70,
	36, 2, 901, 910, 7, 5, 2, 2, 902, 903, 7, 4, 2, 2, 903, 904, 7, 83, 2,
	2, 904, 905, 7, 3, 2, 2, 905, 906, 5, 70, 36, 2, 906, 907, 7, 5, 2, 2,
	907, 909, 3, 2, 2, 2, 908, 902, 3, 2, 2, 2, 909, 912, 3, 2, 2, 2, 910,
	908, 3, 2, 2, 2, 910, 911, 3, 2, 2, 2, 911, 913, 3, 2, 2, 2, 912, 910,
	3, 2, 2, 2, 913, 914, 7, 7, 2, 2, 914, 933, 3, 2, 2, 2, 915, 916, 7, 6,
	2, 2, 916, 917, 5, 70, 36, 2, 917, 918, 7, 8, 2, 2, 918, 926, 5, 70, 36,
	2, 919, 920, 7, 4, 2, 2, 920, 921, 5, 70, 36, 2, 921, 922, 7, 8, 2, 2,
	922, 923, 5, 70, 36, 2, 923, 925, 3, 2, 2, 2, 924, 919, 3, 2, 2, 2, 925,
	928, 3, 2, 2, 2, 926, 924, 3, 2, 2, 2, 926, 927, 3, 2, 2, 2, 927, 929,
	3, 2, 2, 2, 928, 926, 3, 2, 2, 2, 929, 930, 7, 7, 2, 2, 930, 933, 3, 2,
	2, 2, 931, 933, 5, 62, 32, 2, 932, 885, 3, 2, 2, 2, 932, 897, 3, 2, 2,
	2, 932, 915, 3, 2, 2, 2, 932, 931, 3, 2, 2, 2, 933, 71, 3, 2, 2, 2, 934,
	940, 7, 80, 2, 2, 935, 940, 7, 81, 2, 2, 936, 940, 7, 53, 2, 2, 937, 940,
	7, 54, 2, 2, 938, 940, 7, 82, 2, 2, 939, 934, 3, 2, 2, 2, 939, 935, 3,
	2, 2, 2, 939, 936, 3, 2, 2, 2, 939, 937, 3, 2, 2, 2, 939, 938, 3, 2, 2,
	2, 940, 73, 3, 2, 2, 2, 941, 942, 7, 38, 2, 2, 942, 943, 5, 20, 11, 2,
	943, 944, 7, 3, 2, 2, 944, 945, 7, 5, 2, 2, 945, 960, 3, 2, 2, 2, 946,
	947, 7, 38, 2, 2, 947, 948, 5, 20, 11, 2, 948, 949, 7, 3, 2, 2, 949, 954,
	5, 62, 32, 2, 950, 951, 7, 4, 2, 2, 951, 953, 5, 62, 32, 2, 952, 950, 3,
	2, 2, 2, 953, 956, 3, 2, 2, 2, 954, 952, 3, 2, 2, 2, 954, 955, 3, 2, 2,
	2, 955, 957, 3, 2, 2, 2, 956, 954, 3, 2, 2, 2, 957, 958, 7, 5, 2, 2, 958,
	960, 3, 2, 2, 2, 959, 941, 3, 2, 2, 2, 959, 946, 3, 2, 2, 2, 960, 75, 3,
	2, 2, 2, 961, 962, 7, 47, 2, 2, 962, 963, 7, 83, 2, 2, 963, 992, 5, 20,
	11, 2, 964, 965, 7, 47, 2, 2, 965, 966, 7, 83, 2, 2, 966, 967, 5, 20, 11,
	2, 967, 968, 7, 75, 2, 2, 968, 969, 5, 62, 32, 2, 969, 992, 3, 2, 2, 2,
	970, 971, 7, 47, 2, 2, 971, 972, 7, 83, 2, 2, 972, 973, 5, 20, 11, 2, 973,
	974, 7, 75, 2, 2, 974, 975, 5, 68, 35, 2, 975, 992, 3, 2, 2, 2, 976, 977,
	7, 48, 2, 2, 977, 978, 7, 83, 2, 2, 978, 992, 5, 20, 11, 2, 979, 980, 7,
	48, 2, 2, 980, 981, 7, 83, 2, 2, 981, 982, 5, 20, 11, 2, 982, 983, 7, 75,
	2, 2, 983, 984, 5, 62, 32, 2, 984, 992, 3, 2, 2, 2, 985, 986, 7, 48, 2,
	2, 986, 987, 7, 83, 2, 2, 987, 988, 5, 20, 11, 2, 988, 989, 7, 75, 2, 2,
	989, 990, 5, 68, 35, 2, 990, 992, 3, 2, 2, 2, 991, 961, 3, 2, 2, 2, 991,
	964, 3, 2, 2, 2, 991, 970, 3, 2, 2, 2, 991, 976, 3, 2, 2, 2, 991, 979,
	3, 2, 2, 2, 991, 985, 3, 2, 2, 2, 992, 77, 3, 2, 2, 2, 993, 994, 7, 49,
	2, 2, 994, 995, 7, 83, 2, 2, 995, 996, 5, 64, 33, 2, 996, 997, 7, 75, 2,
	2, 997, 998, 5, 72, 37, 2, 998, 79, 3, 2, 2, 2, 99, 83, 85, 95, 99, 101,
	105, 116, 120, 122, 131, 145, 149, 151, 155, 166, 170, 172, 181, 187, 196,
	200, 202, 206, 216, 220, 222, 231, 244, 248, 250, 254, 264, 268, 270, 279,
	285, 302, 322, 331, 335, 337, 341, 350, 354, 356, 365, 370, 396, 399, 411,
	418, 429, 434, 441, 461, 470, 474, 476, 480, 489, 493, 495, 504, 509, 519,
	529, 531, 545, 589, 594, 602, 610, 620, 631, 640, 643, 650, 672, 685, 698,
	701, 710, 712, 735, 768, 788, 790, 881, 891, 894, 910, 926, 932, 939, 954,
	959, 991,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'('", "','", "')'", "'{'", "'}'", "':'", "';'", "'in'", "'[?('", "')]'",
	"'['", "']'", "'@'", "'pushBack'", "'pushFront'", "'delete'", "'enumString'",
	"'len'", "'typeof'", "'map'", "'slice'", "'message'", "'enum'", "'uint32'",
	"'uint64'", "'int32'", "'int64'", "'float32'", "'float64'", "'string'",
	"'bytes'", "'bool'", "'uint8'", "'chan'", "'object'", "'new'", "'for'",
	"'break'", "'continue'", "'if'", "'else'", "'switch'", "'case'", "'return'",
	"'var'", "'local'", "'const'", "'oneof'", "'func'", "'type'", "", "'nil'",
	"'**'", "'*'", "'/'", "'%'", "'+'", "'-'", "'++'", "'--'", "'=='", "'!='",
	"'>'", "'>='", "'<='", "'<'", "'=~'", "'&&'", "'||'", "'!'", "'<-'", "'<<-'",
	"'='", "'+='", "'-='", "'*='", "'/='", "", "", "", "", "'.'", "'...'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "PUSHBACK", "PUSHFRONT",
	"DELETE", "ENUMSTRING", "LEN", "TYPEOF", "MAP", "SLICE", "MESSAGE", "ENUM",
	"UINT32", "UINT64", "INT32", "INT64", "FLOAT32", "FLOAT64", "STRING", "BYTES",
	"BOOL", "UINT8", "CHAN", "OBJECT", "NEW", "FOR", "BREAK", "CONTINUE", "IF",
	"ELSE", "SWITCH", "CASE", "RETURN", "VAR", "LOCAL", "CONST", "ONEOF", "FUNCTION",
	"TYPEDEF", "BOOLLITERAL", "NULL", "POW", "MUL", "DIV", "MOD", "ADD", "SUB",
	"UNARYADD", "UNARYSUB", "EQ", "INEQ", "GT", "GE", "LE", "LT", "REGEX",
	"AND", "OR", "NOT", "CHANOP", "CHANOPNONBLOCK", "ASSIGN", "ADDEQUAL", "SUBEQUAL",
	"MULEQUAL", "DIVEQUAL", "INT", "FLOAT", "STRINGLITERAL", "NAME", "DOT",
	"TAILARRAY", "WHITESPACE", "COMMENT",
}

var ruleNames = []string{
	"program", "functiondef", "lambda", "closure", "inparam", "outparam", "intypename",
	"returntypename", "param", "typename", "functionTypeName", "typedef", "messagefield",
	"oneoffield", "typenameindef", "functionTypeNameindef", "intypenameindef",
	"returntypenameindef", "execution", "control", "collection", "block", "line",
	"restoreStack", "keepStack", "lhs", "variable", "asserted", "filter", "indexs",
	"expr", "basicTypeName", "builtin", "initializationListBegin", "initializationList",
	"constant", "constructor", "vardef", "constdef",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type goscriptParser struct {
	*antlr.BaseParser
}

func NewgoscriptParser(input antlr.TokenStream) *goscriptParser {
	this := new(goscriptParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "goscript.g4"

	return this
}

// goscriptParser tokens.
const (
	goscriptParserEOF            = antlr.TokenEOF
	goscriptParserT__0           = 1
	goscriptParserT__1           = 2
	goscriptParserT__2           = 3
	goscriptParserT__3           = 4
	goscriptParserT__4           = 5
	goscriptParserT__5           = 6
	goscriptParserT__6           = 7
	goscriptParserT__7           = 8
	goscriptParserT__8           = 9
	goscriptParserT__9           = 10
	goscriptParserT__10          = 11
	goscriptParserT__11          = 12
	goscriptParserT__12          = 13
	goscriptParserPUSHBACK       = 14
	goscriptParserPUSHFRONT      = 15
	goscriptParserDELETE         = 16
	goscriptParserENUMSTRING     = 17
	goscriptParserLEN            = 18
	goscriptParserTYPEOF         = 19
	goscriptParserMAP            = 20
	goscriptParserSLICE          = 21
	goscriptParserMESSAGE        = 22
	goscriptParserENUM           = 23
	goscriptParserUINT32         = 24
	goscriptParserUINT64         = 25
	goscriptParserINT32          = 26
	goscriptParserINT64          = 27
	goscriptParserFLOAT32        = 28
	goscriptParserFLOAT64        = 29
	goscriptParserSTRING         = 30
	goscriptParserBYTES          = 31
	goscriptParserBOOL           = 32
	goscriptParserUINT8          = 33
	goscriptParserCHAN           = 34
	goscriptParserOBJECT         = 35
	goscriptParserNEW            = 36
	goscriptParserFOR            = 37
	goscriptParserBREAK          = 38
	goscriptParserCONTINUE       = 39
	goscriptParserIF             = 40
	goscriptParserELSE           = 41
	goscriptParserSWITCH         = 42
	goscriptParserCASE           = 43
	goscriptParserRETURN         = 44
	goscriptParserVAR            = 45
	goscriptParserLOCAL          = 46
	goscriptParserCONST          = 47
	goscriptParserONEOF          = 48
	goscriptParserFUNCTION       = 49
	goscriptParserTYPEDEF        = 50
	goscriptParserBOOLLITERAL    = 51
	goscriptParserNULL           = 52
	goscriptParserPOW            = 53
	goscriptParserMUL            = 54
	goscriptParserDIV            = 55
	goscriptParserMOD            = 56
	goscriptParserADD            = 57
	goscriptParserSUB            = 58
	goscriptParserUNARYADD       = 59
	goscriptParserUNARYSUB       = 60
	goscriptParserEQ             = 61
	goscriptParserINEQ           = 62
	goscriptParserGT             = 63
	goscriptParserGE             = 64
	goscriptParserLE             = 65
	goscriptParserLT             = 66
	goscriptParserREGEX          = 67
	goscriptParserAND            = 68
	goscriptParserOR             = 69
	goscriptParserNOT            = 70
	goscriptParserCHANOP         = 71
	goscriptParserCHANOPNONBLOCK = 72
	goscriptParserASSIGN         = 73
	goscriptParserADDEQUAL       = 74
	goscriptParserSUBEQUAL       = 75
	goscriptParserMULEQUAL       = 76
	goscriptParserDIVEQUAL       = 77
	goscriptParserINT            = 78
	goscriptParserFLOAT          = 79
	goscriptParserSTRINGLITERAL  = 80
	goscriptParserNAME           = 81
	goscriptParserDOT            = 82
	goscriptParserTAILARRAY      = 83
	goscriptParserWHITESPACE     = 84
	goscriptParserCOMMENT        = 85
)

// goscriptParser rules.
const (
	goscriptParserRULE_program                 = 0
	goscriptParserRULE_functiondef             = 1
	goscriptParserRULE_lambda                  = 2
	goscriptParserRULE_closure                 = 3
	goscriptParserRULE_inparam                 = 4
	goscriptParserRULE_outparam                = 5
	goscriptParserRULE_intypename              = 6
	goscriptParserRULE_returntypename          = 7
	goscriptParserRULE_param                   = 8
	goscriptParserRULE_typename                = 9
	goscriptParserRULE_functionTypeName        = 10
	goscriptParserRULE_typedef                 = 11
	goscriptParserRULE_messagefield            = 12
	goscriptParserRULE_oneoffield              = 13
	goscriptParserRULE_typenameindef           = 14
	goscriptParserRULE_functionTypeNameindef   = 15
	goscriptParserRULE_intypenameindef         = 16
	goscriptParserRULE_returntypenameindef     = 17
	goscriptParserRULE_execution               = 18
	goscriptParserRULE_control                 = 19
	goscriptParserRULE_collection              = 20
	goscriptParserRULE_block                   = 21
	goscriptParserRULE_line                    = 22
	goscriptParserRULE_restoreStack            = 23
	goscriptParserRULE_keepStack               = 24
	goscriptParserRULE_lhs                     = 25
	goscriptParserRULE_variable                = 26
	goscriptParserRULE_asserted                = 27
	goscriptParserRULE_filter                  = 28
	goscriptParserRULE_indexs                  = 29
	goscriptParserRULE_expr                    = 30
	goscriptParserRULE_basicTypeName           = 31
	goscriptParserRULE_builtin                 = 32
	goscriptParserRULE_initializationListBegin = 33
	goscriptParserRULE_initializationList      = 34
	goscriptParserRULE_constant                = 35
	goscriptParserRULE_constructor             = 36
	goscriptParserRULE_vardef                  = 37
	goscriptParserRULE_constdef                = 38
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllFunctiondef() []IFunctiondefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem())
	var tst = make([]IFunctiondefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctiondefContext)
		}
	}

	return tst
}

func (s *ProgramContext) Functiondef(i int) IFunctiondefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefContext)
}

func (s *ProgramContext) AllTypedef() []ITypedefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypedefContext)(nil)).Elem())
	var tst = make([]ITypedefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypedefContext)
		}
	}

	return tst
}

func (s *ProgramContext) Typedef(i int) ITypedefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypedefContext)
}

func (s *ProgramContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *ProgramContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (p *goscriptParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, goscriptParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(81)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__12)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserTYPEDEF-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(goscriptParserNOT-70))|(1<<(goscriptParserCHANOP-70))|(1<<(goscriptParserCHANOPNONBLOCK-70))|(1<<(goscriptParserINT-70))|(1<<(goscriptParserFLOAT-70))|(1<<(goscriptParserSTRINGLITERAL-70))|(1<<(goscriptParserNAME-70)))) != 0) {
		p.SetState(81)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(78)
				p.Functiondef()
			}

		case 2:
			{
				p.SetState(79)
				p.Typedef()
			}

		case 3:
			{
				p.SetState(80)
				p.Execution()
			}

		}

		p.SetState(83)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctiondefContext is an interface to support dynamic dispatch.
type IFunctiondefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiondefContext differentiates from other interfaces.
	IsFunctiondefContext()
}

type FunctiondefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiondefContext() *FunctiondefContext {
	var p = new(FunctiondefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functiondef
	return p
}

func (*FunctiondefContext) IsFunctiondefContext() {}

func NewFunctiondefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiondefContext {
	var p = new(FunctiondefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functiondef

	return p
}

func (s *FunctiondefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiondefContext) CopyFrom(ctx *FunctiondefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctiondefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiondefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionDefContext struct {
	*FunctiondefContext
}

func NewFunctionDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionDefContext {
	var p = new(FunctionDefContext)

	p.FunctiondefContext = NewEmptyFunctiondefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctiondefContext))

	return p
}

func (s *FunctionDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionDefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *FunctionDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *FunctionDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *FunctionDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *FunctionDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionDef(s)
	}
}

func (s *FunctionDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionDef(s)
	}
}

func (p *goscriptParser) Functiondef() (localctx IFunctiondefContext) {
	localctx = NewFunctiondefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, goscriptParserRULE_functiondef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(185)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(85)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(86)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(87)
			p.Match(goscriptParserT__0)
		}
		p.SetState(99)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(88)
				p.Inparam()
			}
			p.SetState(93)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(89)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(90)
					p.Inparam()
				}

				p.SetState(95)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(97)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(96)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(101)
			p.Match(goscriptParserT__2)
		}
		p.SetState(103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(102)
				p.Returntypename()
			}

		}
		{
			p.SetState(105)
			p.Closure()
		}

	case 2:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(106)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(107)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(108)
			p.Match(goscriptParserT__0)
		}
		p.SetState(120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(109)
				p.Inparam()
			}
			p.SetState(114)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(110)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(111)
					p.Inparam()
				}

				p.SetState(116)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(118)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(117)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(122)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(123)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(124)
			p.Returntypename()
		}
		p.SetState(129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(125)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(126)
				p.Returntypename()
			}

			p.SetState(131)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(132)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(133)
			p.Closure()
		}

	case 3:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(135)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(136)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(137)
			p.Match(goscriptParserT__0)
		}
		p.SetState(149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(138)
				p.Inparam()
			}
			p.SetState(143)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(139)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(140)
					p.Inparam()
				}

				p.SetState(145)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(147)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(146)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(151)
			p.Match(goscriptParserT__2)
		}
		p.SetState(153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(152)
				p.Outparam()
			}

		}
		{
			p.SetState(155)
			p.Closure()
		}

	case 4:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(156)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(157)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(158)
			p.Match(goscriptParserT__0)
		}
		p.SetState(170)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(159)
				p.Inparam()
			}
			p.SetState(164)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(160)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(161)
					p.Inparam()
				}

				p.SetState(166)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(168)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(167)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(172)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(173)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(174)
			p.Outparam()
		}
		p.SetState(179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(175)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(176)
				p.Outparam()
			}

			p.SetState(181)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(182)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(183)
			p.Closure()
		}

	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) CopyFrom(ctx *LambdaContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LambdaDefContext struct {
	*LambdaContext
}

func NewLambdaDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaDefContext {
	var p = new(LambdaDefContext)

	p.LambdaContext = NewEmptyLambdaContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LambdaContext))

	return p
}

func (s *LambdaDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *LambdaDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *LambdaDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *LambdaDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *LambdaDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *LambdaDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *LambdaDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLambdaDef(s)
	}
}

func (s *LambdaDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLambdaDef(s)
	}
}

func (p *goscriptParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, goscriptParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(283)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(187)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(188)
			p.Match(goscriptParserT__0)
		}
		p.SetState(200)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(189)
				p.Inparam()
			}
			p.SetState(194)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(190)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(191)
					p.Inparam()
				}

				p.SetState(196)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(198)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(197)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(202)
			p.Match(goscriptParserT__2)
		}
		p.SetState(204)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(203)
				p.Returntypename()
			}

		}
		{
			p.SetState(206)
			p.Closure()
		}

	case 2:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(207)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(208)
			p.Match(goscriptParserT__0)
		}
		p.SetState(220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(209)
				p.Inparam()
			}
			p.SetState(214)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(210)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(211)
					p.Inparam()
				}

				p.SetState(216)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(218)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(217)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(222)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(223)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(224)
			p.Returntypename()
		}
		p.SetState(229)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(225)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(226)
				p.Returntypename()
			}

			p.SetState(231)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(232)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(233)
			p.Closure()
		}

	case 3:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(235)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(236)
			p.Match(goscriptParserT__0)
		}
		p.SetState(248)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(237)
				p.Inparam()
			}
			p.SetState(242)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(238)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(239)
					p.Inparam()
				}

				p.SetState(244)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(246)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(245)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(250)
			p.Match(goscriptParserT__2)
		}
		p.SetState(252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(251)
				p.Outparam()
			}

		}
		{
			p.SetState(254)
			p.Closure()
		}

	case 4:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(255)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(256)
			p.Match(goscriptParserT__0)
		}
		p.SetState(268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(257)
				p.Inparam()
			}
			p.SetState(262)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(258)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(259)
					p.Inparam()
				}

				p.SetState(264)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(266)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(265)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(270)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(271)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(272)
			p.Outparam()
		}
		p.SetState(277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(273)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(274)
				p.Outparam()
			}

			p.SetState(279)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(280)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(281)
			p.Closure()
		}

	}

	return localctx
}

// IClosureContext is an interface to support dynamic dispatch.
type IClosureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureContext differentiates from other interfaces.
	IsClosureContext()
}

type ClosureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureContext() *ClosureContext {
	var p = new(ClosureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_closure
	return p
}

func (*ClosureContext) IsClosureContext() {}

func NewClosureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureContext {
	var p = new(ClosureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_closure

	return p
}

func (s *ClosureContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ClosureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterClosure(s)
	}
}

func (s *ClosureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitClosure(s)
	}
}

func (p *goscriptParser) Closure() (localctx IClosureContext) {
	localctx = NewClosureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, goscriptParserRULE_closure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(285)
		p.Block()
	}

	return localctx
}

// IInparamContext is an interface to support dynamic dispatch.
type IInparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInparamContext differentiates from other interfaces.
	IsInparamContext()
}

type InparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInparamContext() *InparamContext {
	var p = new(InparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_inparam
	return p
}

func (*InparamContext) IsInparamContext() {}

func NewInparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InparamContext {
	var p = new(InparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_inparam

	return p
}

func (s *InparamContext) GetParser() antlr.Parser { return s.parser }

func (s *InparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *InparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInparam(s)
	}
}

func (s *InparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInparam(s)
	}
}

func (p *goscriptParser) Inparam() (localctx IInparamContext) {
	localctx = NewInparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, goscriptParserRULE_inparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(287)
		p.Param()
	}

	return localctx
}

// IOutparamContext is an interface to support dynamic dispatch.
type IOutparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutparamContext differentiates from other interfaces.
	IsOutparamContext()
}

type OutparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutparamContext() *OutparamContext {
	var p = new(OutparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_outparam
	return p
}

func (*OutparamContext) IsOutparamContext() {}

func NewOutparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OutparamContext {
	var p = new(OutparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_outparam

	return p
}

func (s *OutparamContext) GetParser() antlr.Parser { return s.parser }

func (s *OutparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *OutparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OutparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOutparam(s)
	}
}

func (s *OutparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOutparam(s)
	}
}

func (p *goscriptParser) Outparam() (localctx IOutparamContext) {
	localctx = NewOutparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, goscriptParserRULE_outparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(289)
		p.Param()
	}

	return localctx
}

// IIntypenameContext is an interface to support dynamic dispatch.
type IIntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameContext differentiates from other interfaces.
	IsIntypenameContext()
}

type IntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameContext() *IntypenameContext {
	var p = new(IntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypename
	return p
}

func (*IntypenameContext) IsIntypenameContext() {}

func NewIntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameContext {
	var p = new(IntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypename

	return p
}

func (s *IntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *IntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypename(s)
	}
}

func (s *IntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypename(s)
	}
}

func (p *goscriptParser) Intypename() (localctx IIntypenameContext) {
	localctx = NewIntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, goscriptParserRULE_intypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(291)
		p.Typename()
	}

	return localctx
}

// IReturntypenameContext is an interface to support dynamic dispatch.
type IReturntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameContext differentiates from other interfaces.
	IsReturntypenameContext()
}

type ReturntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameContext() *ReturntypenameContext {
	var p = new(ReturntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypename
	return p
}

func (*ReturntypenameContext) IsReturntypenameContext() {}

func NewReturntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameContext {
	var p = new(ReturntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypename

	return p
}

func (s *ReturntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ReturntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypename(s)
	}
}

func (s *ReturntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypename(s)
	}
}

func (p *goscriptParser) Returntypename() (localctx IReturntypenameContext) {
	localctx = NewReturntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, goscriptParserRULE_returntypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(293)
		p.Typename()
	}

	return localctx
}

// IParamContext is an interface to support dynamic dispatch.
type IParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParamContext differentiates from other interfaces.
	IsParamContext()
}

type ParamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamContext() *ParamContext {
	var p = new(ParamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_param
	return p
}

func (*ParamContext) IsParamContext() {}

func NewParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamContext {
	var p = new(ParamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_param

	return p
}

func (s *ParamContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *ParamContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterParam(s)
	}
}

func (s *ParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitParam(s)
	}
}

func (p *goscriptParser) Param() (localctx IParamContext) {
	localctx = NewParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, goscriptParserRULE_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(295)
		p.Match(goscriptParserNAME)
	}
	{
		p.SetState(296)
		p.Typename()
	}

	return localctx
}

// ITypenameContext is an interface to support dynamic dispatch.
type ITypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameContext differentiates from other interfaces.
	IsTypenameContext()
}

type TypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameContext() *TypenameContext {
	var p = new(TypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typename
	return p
}

func (*TypenameContext) IsTypenameContext() {}

func NewTypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameContext {
	var p = new(TypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typename

	return p
}

func (s *TypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameContext) CopyFrom(ctx *TypenameContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MapTypeNameContext struct {
	*TypenameContext
}

func NewMapTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameContext {
	var p = new(MapTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *MapTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *MapTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *MapTypeNameContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *MapTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeName(s)
	}
}

func (s *MapTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeName(s)
	}
}

type FunctionTypeContext struct {
	*TypenameContext
}

func NewFunctionTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

type SimpleTypeNameContext struct {
	*TypenameContext
}

func NewSimpleTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SimpleTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *SimpleTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeName(s)
	}
}

func (s *SimpleTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeName(s)
	}
}

type ChanTypeNameContext struct {
	*TypenameContext
}

func NewChanTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChanTypeNameContext {
	var p = new(ChanTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *ChanTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *ChanTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ChanTypeNameContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *ChanTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeName(s)
	}
}

func (s *ChanTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeName(s)
	}
}

type SliceTypeNameContext struct {
	*TypenameContext
}

func NewSliceTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameContext {
	var p = new(SliceTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SliceTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameContext) SLICE() antlr.TerminalNode {
	return s.GetToken(goscriptParserSLICE, 0)
}

func (s *SliceTypeNameContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *SliceTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *SliceTypeNameContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *SliceTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeName(s)
	}
}

func (s *SliceTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeName(s)
	}
}

func (p *goscriptParser) Typename() (localctx ITypenameContext) {
	localctx = NewTypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, goscriptParserRULE_typename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(320)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserOBJECT, goscriptParserNAME:
		localctx = NewSimpleTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(300)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserNAME:
			{
				p.SetState(298)
				p.Match(goscriptParserNAME)
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserOBJECT:
			{
				p.SetState(299)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case goscriptParserFUNCTION:
		localctx = NewFunctionTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(302)
			p.FunctionTypeName()
		}

	case goscriptParserMAP:
		localctx = NewMapTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(303)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(304)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(305)
			p.BasicTypeName()
		}
		{
			p.SetState(306)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(307)
			p.Typename()
		}
		{
			p.SetState(308)
			p.Match(goscriptParserGT)
		}

	case goscriptParserSLICE:
		localctx = NewSliceTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(310)
			p.Match(goscriptParserSLICE)
		}
		{
			p.SetState(311)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(312)
			p.Typename()
		}
		{
			p.SetState(313)
			p.Match(goscriptParserGT)
		}

	case goscriptParserCHAN:
		localctx = NewChanTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(315)
			p.Match(goscriptParserCHAN)
		}
		{
			p.SetState(316)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(317)
			p.Typename()
		}
		{
			p.SetState(318)
			p.Match(goscriptParserGT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameContext) AllIntypename() []IIntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameContext)(nil)).Elem())
	var tst = make([]IIntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Intypename(i int) IIntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameContext)
}

func (s *FunctionTypeNameContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionTypeNameContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *goscriptParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, goscriptParserRULE_functionTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(368)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(322)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(323)
			p.Match(goscriptParserT__0)
		}
		p.SetState(335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(324)
				p.Intypename()
			}
			p.SetState(329)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(325)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(326)
					p.Intypename()
				}

				p.SetState(331)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(333)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(332)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(337)
			p.Match(goscriptParserT__2)
		}
		p.SetState(339)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(338)
				p.Returntypename()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(341)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(342)
			p.Match(goscriptParserT__0)
		}
		p.SetState(354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(343)
				p.Intypename()
			}
			p.SetState(348)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(344)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(345)
					p.Intypename()
				}

				p.SetState(350)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(352)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(351)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(356)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(357)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(358)
			p.Returntypename()
		}
		p.SetState(363)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(359)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(360)
				p.Returntypename()
			}

			p.SetState(365)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(366)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// ITypedefContext is an interface to support dynamic dispatch.
type ITypedefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefContext differentiates from other interfaces.
	IsTypedefContext()
}

type TypedefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefContext() *TypedefContext {
	var p = new(TypedefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typedef
	return p
}

func (*TypedefContext) IsTypedefContext() {}

func NewTypedefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefContext {
	var p = new(TypedefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typedef

	return p
}

func (s *TypedefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefContext) CopyFrom(ctx *TypedefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypedefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeDefFunctionContext struct {
	*TypedefContext
}

func NewTypeDefFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefFunctionContext {
	var p = new(TypeDefFunctionContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefFunctionContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefFunctionContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *TypeDefFunctionContext) FunctionTypeNameindef() IFunctionTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameindefContext)
}

func (s *TypeDefFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefFunction(s)
	}
}

func (s *TypeDefFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefFunction(s)
	}
}

type TypeDefMapContext struct {
	*TypedefContext
}

func NewTypeDefMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefMapContext {
	var p = new(TypeDefMapContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefMapContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefMapContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *TypeDefMapContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *TypeDefMapContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *TypeDefMapContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *TypeDefMapContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *TypeDefMapContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *TypeDefMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefMap(s)
	}
}

func (s *TypeDefMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefMap(s)
	}
}

type TypeDefMessageContext struct {
	*TypedefContext
}

func NewTypeDefMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefMessageContext {
	var p = new(TypeDefMessageContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefMessageContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefMessageContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *TypeDefMessageContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(goscriptParserMESSAGE, 0)
}

func (s *TypeDefMessageContext) AllMessagefield() []IMessagefieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem())
	var tst = make([]IMessagefieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMessagefieldContext)
		}
	}

	return tst
}

func (s *TypeDefMessageContext) Messagefield(i int) IMessagefieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMessagefieldContext)
}

func (s *TypeDefMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefMessage(s)
	}
}

func (s *TypeDefMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefMessage(s)
	}
}

type TypeDefEnumContext struct {
	*TypedefContext
}

func NewTypeDefEnumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefEnumContext {
	var p = new(TypeDefEnumContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefEnumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefEnumContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefEnumContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *TypeDefEnumContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *TypeDefEnumContext) ENUM() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUM, 0)
}

func (s *TypeDefEnumContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserINT)
}

func (s *TypeDefEnumContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, i)
}

func (s *TypeDefEnumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefEnum(s)
	}
}

func (s *TypeDefEnumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefEnum(s)
	}
}

type TypeDefSliceContext struct {
	*TypedefContext
}

func NewTypeDefSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefSliceContext {
	var p = new(TypeDefSliceContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefSliceContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefSliceContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *TypeDefSliceContext) SLICE() antlr.TerminalNode {
	return s.GetToken(goscriptParserSLICE, 0)
}

func (s *TypeDefSliceContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *TypeDefSliceContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *TypeDefSliceContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *TypeDefSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefSlice(s)
	}
}

func (s *TypeDefSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefSlice(s)
	}
}

func (p *goscriptParser) Typedef() (localctx ITypedefContext) {
	localctx = NewTypedefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, goscriptParserRULE_typedef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTypeDefMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(370)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(371)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(372)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(373)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(374)
			p.BasicTypeName()
		}
		{
			p.SetState(375)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(376)
			p.Typenameindef()
		}
		{
			p.SetState(377)
			p.Match(goscriptParserGT)
		}

	case 2:
		localctx = NewTypeDefSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(379)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(380)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(381)
			p.Match(goscriptParserSLICE)
		}
		{
			p.SetState(382)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(383)
			p.Typenameindef()
		}
		{
			p.SetState(384)
			p.Match(goscriptParserGT)
		}

	case 3:
		localctx = NewTypeDefMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(386)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(387)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(388)
			p.Match(goscriptParserMESSAGE)
		}
		{
			p.SetState(389)
			p.Match(goscriptParserT__3)
		}
		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserONEOF || _la == goscriptParserNAME {
			{
				p.SetState(390)
				p.Messagefield()
			}
			p.SetState(394)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserONEOF || _la == goscriptParserNAME {
				{
					p.SetState(391)
					p.Messagefield()
				}

				p.SetState(396)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(399)
			p.Match(goscriptParserT__4)
		}

	case 4:
		localctx = NewTypeDefEnumContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(400)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(401)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(402)
			p.Match(goscriptParserENUM)
		}
		{
			p.SetState(403)
			p.Match(goscriptParserT__3)
		}
		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserNAME {
			{
				p.SetState(404)
				p.Match(goscriptParserNAME)
			}
			{
				p.SetState(405)
				p.Match(goscriptParserT__5)
			}
			{
				p.SetState(406)
				p.Match(goscriptParserINT)
			}

			p.SetState(411)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(412)
			p.Match(goscriptParserT__4)
		}

	case 5:
		localctx = NewTypeDefFunctionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(413)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(414)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(415)
			p.FunctionTypeNameindef()
		}

	}

	return localctx
}

// IMessagefieldContext is an interface to support dynamic dispatch.
type IMessagefieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMessagefieldContext differentiates from other interfaces.
	IsMessagefieldContext()
}

type MessagefieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMessagefieldContext() *MessagefieldContext {
	var p = new(MessagefieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_messagefield
	return p
}

func (*MessagefieldContext) IsMessagefieldContext() {}

func NewMessagefieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MessagefieldContext {
	var p = new(MessagefieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_messagefield

	return p
}

func (s *MessagefieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MessagefieldContext) CopyFrom(ctx *MessagefieldContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *MessagefieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MessagefieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FieldDefContext struct {
	*MessagefieldContext
}

func NewFieldDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FieldDefContext {
	var p = new(FieldDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *FieldDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *FieldDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *FieldDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFieldDef(s)
	}
}

func (s *FieldDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFieldDef(s)
	}
}

type OneofDefContext struct {
	*MessagefieldContext
}

func NewOneofDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OneofDefContext {
	var p = new(OneofDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *OneofDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneofDefContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *OneofDefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *OneofDefContext) AllOneoffield() []IOneoffieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem())
	var tst = make([]IOneoffieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOneoffieldContext)
		}
	}

	return tst
}

func (s *OneofDefContext) Oneoffield(i int) IOneoffieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOneoffieldContext)
}

func (s *OneofDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneofDef(s)
	}
}

func (s *OneofDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneofDef(s)
	}
}

func (p *goscriptParser) Messagefield() (localctx IMessagefieldContext) {
	localctx = NewMessagefieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, goscriptParserRULE_messagefield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(432)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserNAME:
		localctx = NewFieldDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(418)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(419)
			p.Typenameindef()
		}

	case goscriptParserONEOF:
		localctx = NewOneofDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(420)
			p.Match(goscriptParserONEOF)
		}
		{
			p.SetState(421)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(422)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(423)
			p.Oneoffield()
		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserNAME {
			{
				p.SetState(424)
				p.Oneoffield()
			}

			p.SetState(429)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(430)
			p.Match(goscriptParserT__4)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOneoffieldContext is an interface to support dynamic dispatch.
type IOneoffieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOneoffieldContext differentiates from other interfaces.
	IsOneoffieldContext()
}

type OneoffieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOneoffieldContext() *OneoffieldContext {
	var p = new(OneoffieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_oneoffield
	return p
}

func (*OneoffieldContext) IsOneoffieldContext() {}

func NewOneoffieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OneoffieldContext {
	var p = new(OneoffieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_oneoffield

	return p
}

func (s *OneoffieldContext) GetParser() antlr.Parser { return s.parser }

func (s *OneoffieldContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *OneoffieldContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *OneoffieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneoffieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OneoffieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneoffield(s)
	}
}

func (s *OneoffieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneoffield(s)
	}
}

func (p *goscriptParser) Oneoffield() (localctx IOneoffieldContext) {
	localctx = NewOneoffieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, goscriptParserRULE_oneoffield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)
		p.Match(goscriptParserNAME)
	}
	{
		p.SetState(435)
		p.Typenameindef()
	}

	return localctx
}

// ITypenameindefContext is an interface to support dynamic dispatch.
type ITypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameindefContext differentiates from other interfaces.
	IsTypenameindefContext()
}

type TypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameindefContext() *TypenameindefContext {
	var p = new(TypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typenameindef
	return p
}

func (*TypenameindefContext) IsTypenameindefContext() {}

func NewTypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameindefContext {
	var p = new(TypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typenameindef

	return p
}

func (s *TypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameindefContext) CopyFrom(ctx *TypenameindefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ChanTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewChanTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChanTypeNameInDefContext {
	var p = new(ChanTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *ChanTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameInDefContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameInDefContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *ChanTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ChanTypeNameInDefContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *ChanTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeNameInDef(s)
	}
}

func (s *ChanTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeNameInDef(s)
	}
}

type SimpleTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewSimpleTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameInDefContext {
	var p = new(SimpleTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *SimpleTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameInDefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *SimpleTypeNameInDefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeNameInDef(s)
	}
}

func (s *SimpleTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeNameInDef(s)
	}
}

type MapTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewMapTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameInDefContext {
	var p = new(MapTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *MapTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameInDefContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameInDefContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *MapTypeNameInDefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *MapTypeNameInDefContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *MapTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeNameInDef(s)
	}
}

func (s *MapTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeNameInDef(s)
	}
}

type FunctionTypeInDefContext struct {
	*TypenameindefContext
}

func NewFunctionTypeInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeInDefContext {
	var p = new(FunctionTypeInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *FunctionTypeInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeInDefContext) FunctionTypeNameindef() IFunctionTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameindefContext)
}

func (s *FunctionTypeInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeInDef(s)
	}
}

func (s *FunctionTypeInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeInDef(s)
	}
}

type SliceTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewSliceTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameInDefContext {
	var p = new(SliceTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *SliceTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameInDefContext) SLICE() antlr.TerminalNode {
	return s.GetToken(goscriptParserSLICE, 0)
}

func (s *SliceTypeNameInDefContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *SliceTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *SliceTypeNameInDefContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *SliceTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeNameInDef(s)
	}
}

func (s *SliceTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeNameInDef(s)
	}
}

func (p *goscriptParser) Typenameindef() (localctx ITypenameindefContext) {
	localctx = NewTypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, goscriptParserRULE_typenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(459)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserOBJECT, goscriptParserNAME:
		localctx = NewSimpleTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(439)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserNAME:
			{
				p.SetState(437)
				p.Match(goscriptParserNAME)
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserOBJECT:
			{
				p.SetState(438)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case goscriptParserFUNCTION:
		localctx = NewFunctionTypeInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(441)
			p.FunctionTypeNameindef()
		}

	case goscriptParserMAP:
		localctx = NewMapTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(442)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(443)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(444)
			p.BasicTypeName()
		}
		{
			p.SetState(445)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(446)
			p.Typenameindef()
		}
		{
			p.SetState(447)
			p.Match(goscriptParserGT)
		}

	case goscriptParserSLICE:
		localctx = NewSliceTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(449)
			p.Match(goscriptParserSLICE)
		}
		{
			p.SetState(450)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(451)
			p.Typenameindef()
		}
		{
			p.SetState(452)
			p.Match(goscriptParserGT)
		}

	case goscriptParserCHAN:
		localctx = NewChanTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(454)
			p.Match(goscriptParserCHAN)
		}
		{
			p.SetState(455)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(456)
			p.Typenameindef()
		}
		{
			p.SetState(457)
			p.Match(goscriptParserGT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionTypeNameindefContext is an interface to support dynamic dispatch.
type IFunctionTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameindefContext differentiates from other interfaces.
	IsFunctionTypeNameindefContext()
}

type FunctionTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameindefContext() *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef
	return p
}

func (*FunctionTypeNameindefContext) IsFunctionTypeNameindefContext() {}

func NewFunctionTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef

	return p
}

func (s *FunctionTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameindefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameindefContext) AllIntypenameindef() []IIntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem())
	var tst = make([]IIntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Intypenameindef(i int) IIntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) AllReturntypenameindef() []IReturntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem())
	var tst = make([]IReturntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Returntypenameindef(i int) IReturntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeNameindef(s)
	}
}

func (s *FunctionTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeNameindef(s)
	}
}

func (p *goscriptParser) FunctionTypeNameindef() (localctx IFunctionTypeNameindefContext) {
	localctx = NewFunctionTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, goscriptParserRULE_functionTypeNameindef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(507)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(461)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(462)
			p.Match(goscriptParserT__0)
		}
		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(463)
				p.Intypenameindef()
			}
			p.SetState(468)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(464)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(465)
					p.Intypenameindef()
				}

				p.SetState(470)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(472)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(471)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(476)
			p.Match(goscriptParserT__2)
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(477)
				p.Returntypenameindef()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(480)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(481)
			p.Match(goscriptParserT__0)
		}
		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(goscriptParserMAP-20))|(1<<(goscriptParserSLICE-20))|(1<<(goscriptParserUINT32-20))|(1<<(goscriptParserUINT64-20))|(1<<(goscriptParserINT32-20))|(1<<(goscriptParserINT64-20))|(1<<(goscriptParserFLOAT32-20))|(1<<(goscriptParserFLOAT64-20))|(1<<(goscriptParserSTRING-20))|(1<<(goscriptParserBYTES-20))|(1<<(goscriptParserBOOL-20))|(1<<(goscriptParserUINT8-20))|(1<<(goscriptParserCHAN-20))|(1<<(goscriptParserOBJECT-20))|(1<<(goscriptParserFUNCTION-20)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(482)
				p.Intypenameindef()
			}
			p.SetState(487)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(483)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(484)
					p.Intypenameindef()
				}

				p.SetState(489)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(491)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(490)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(495)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(496)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(497)
			p.Returntypenameindef()
		}
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(498)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(499)
				p.Returntypenameindef()
			}

			p.SetState(504)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(505)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// IIntypenameindefContext is an interface to support dynamic dispatch.
type IIntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameindefContext differentiates from other interfaces.
	IsIntypenameindefContext()
}

type IntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameindefContext() *IntypenameindefContext {
	var p = new(IntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypenameindef
	return p
}

func (*IntypenameindefContext) IsIntypenameindefContext() {}

func NewIntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameindefContext {
	var p = new(IntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypenameindef

	return p
}

func (s *IntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *IntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypenameindef(s)
	}
}

func (s *IntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypenameindef(s)
	}
}

func (p *goscriptParser) Intypenameindef() (localctx IIntypenameindefContext) {
	localctx = NewIntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, goscriptParserRULE_intypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(509)
		p.Typenameindef()
	}

	return localctx
}

// IReturntypenameindefContext is an interface to support dynamic dispatch.
type IReturntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameindefContext differentiates from other interfaces.
	IsReturntypenameindefContext()
}

type ReturntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameindefContext() *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypenameindef
	return p
}

func (*ReturntypenameindefContext) IsReturntypenameindefContext() {}

func NewReturntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypenameindef

	return p
}

func (s *ReturntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ReturntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypenameindef(s)
	}
}

func (s *ReturntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypenameindef(s)
	}
}

func (p *goscriptParser) Returntypenameindef() (localctx IReturntypenameindefContext) {
	localctx = NewReturntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, goscriptParserRULE_returntypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(511)
		p.Typenameindef()
	}

	return localctx
}

// IExecutionContext is an interface to support dynamic dispatch.
type IExecutionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecutionContext differentiates from other interfaces.
	IsExecutionContext()
}

type ExecutionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecutionContext() *ExecutionContext {
	var p = new(ExecutionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_execution
	return p
}

func (*ExecutionContext) IsExecutionContext() {}

func NewExecutionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecutionContext {
	var p = new(ExecutionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_execution

	return p
}

func (s *ExecutionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecutionContext) CopyFrom(ctx *ExecutionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExecutionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecutionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LineProgramContext struct {
	*ExecutionContext
}

func NewLineProgramContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LineProgramContext {
	var p = new(LineProgramContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *LineProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineProgramContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *LineProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLineProgram(s)
	}
}

func (s *LineProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLineProgram(s)
	}
}

type CtrlContext struct {
	*ExecutionContext
}

func NewCtrlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CtrlContext {
	var p = new(CtrlContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *CtrlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtrlContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *CtrlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCtrl(s)
	}
}

func (s *CtrlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCtrl(s)
	}
}

func (p *goscriptParser) Execution() (localctx IExecutionContext) {
	localctx = NewExecutionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, goscriptParserRULE_execution)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(517)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
		localctx = NewCtrlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(513)
			p.Control()
		}

	case goscriptParserT__0, goscriptParserT__12, goscriptParserPUSHBACK, goscriptParserPUSHFRONT, goscriptParserDELETE, goscriptParserENUMSTRING, goscriptParserLEN, goscriptParserTYPEOF, goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserNEW, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserFUNCTION, goscriptParserBOOLLITERAL, goscriptParserNULL, goscriptParserSUB, goscriptParserUNARYADD, goscriptParserUNARYSUB, goscriptParserNOT, goscriptParserCHANOP, goscriptParserCHANOPNONBLOCK, goscriptParserINT, goscriptParserFLOAT, goscriptParserSTRINGLITERAL, goscriptParserNAME:
		localctx = NewLineProgramContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(514)
			p.Line()
		}
		{
			p.SetState(515)
			p.Match(goscriptParserT__6)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControlContext is an interface to support dynamic dispatch.
type IControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlContext differentiates from other interfaces.
	IsControlContext()
}

type ControlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlContext() *ControlContext {
	var p = new(ControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_control
	return p
}

func (*ControlContext) IsControlContext() {}

func NewControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlContext {
	var p = new(ControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_control

	return p
}

func (s *ControlContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlContext) CopyFrom(ctx *ControlContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReturnVoidContext struct {
	*ControlContext
}

func NewReturnVoidContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnVoidContext {
	var p = new(ReturnVoidContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnVoidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnVoidContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnVoidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVoid(s)
	}
}

func (s *ReturnVoidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVoid(s)
	}
}

type ForInSliceContext struct {
	*ControlContext
}

func NewForInSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInSliceContext {
	var p = new(ForInSliceContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInSliceContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInSliceContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *ForInSliceContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInSliceContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInSlice(s)
	}
}

func (s *ForInSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInSlice(s)
	}
}

type SwitchContext struct {
	*ControlContext
}

func NewSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SwitchContext {
	var p = new(SwitchContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *SwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *SwitchContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SwitchContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserCASE)
}

func (s *SwitchContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, i)
}

func (s *SwitchContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *SwitchContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *SwitchContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *SwitchContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSwitch(s)
	}
}

func (s *SwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSwitch(s)
	}
}

type ReturnValContext struct {
	*ControlContext
}

func NewReturnValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnValContext {
	var p = new(ReturnValContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnValContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnValContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ReturnValContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVal(s)
	}
}

func (s *ReturnValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVal(s)
	}
}

type ForInMapContext struct {
	*ControlContext
}

func NewForInMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInMapContext {
	var p = new(ForInMapContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInMapContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInMapContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *ForInMapContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *ForInMapContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInMapContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInMap(s)
	}
}

func (s *ForInMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInMap(s)
	}
}

type ForContext struct {
	*ControlContext
}

func NewForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForContext {
	var p = new(ForContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *ForContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *ForContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFor(s)
	}
}

func (s *ForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFor(s)
	}
}

type BreakContext struct {
	*ControlContext
}

func NewBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BreakContext {
	var p = new(BreakContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *BreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *BreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBreak(s)
	}
}

func (s *BreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBreak(s)
	}
}

type ContinueContext struct {
	*ControlContext
}

func NewContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ContinueContext {
	var p = new(ContinueContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *ContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterContinue(s)
	}
}

func (s *ContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitContinue(s)
	}
}

type IfContext struct {
	*ControlContext
}

func NewIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfContext {
	var p = new(IfContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *IfContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *IfContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *IfContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIf(s)
	}
}

func (s *IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIf(s)
	}
}

func (p *goscriptParser) Control() (localctx IControlContext) {
	localctx = NewControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, goscriptParserRULE_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(519)
			p.Match(goscriptParserIF)
		}
		{
			p.SetState(520)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(521)
			p.expr(0)
		}
		{
			p.SetState(522)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(523)
			p.Block()
		}
		p.SetState(529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserELSE {
			{
				p.SetState(524)
				p.Match(goscriptParserELSE)
			}
			p.SetState(527)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case goscriptParserT__3:
				{
					p.SetState(525)
					p.Block()
				}

			case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
				{
					p.SetState(526)
					p.Control()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	case 2:
		localctx = NewSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(531)
			p.Match(goscriptParserSWITCH)
		}
		{
			p.SetState(532)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(533)
			p.expr(0)
		}
		{
			p.SetState(534)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(535)
			p.Match(goscriptParserT__3)
		}
		p.SetState(541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserCASE {
			{
				p.SetState(536)
				p.Match(goscriptParserCASE)
			}
			{
				p.SetState(537)
				p.Constant()
			}
			{
				p.SetState(538)
				p.Match(goscriptParserT__5)
			}
			{
				p.SetState(539)
				p.Block()
			}

			p.SetState(543)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(545)
			p.Match(goscriptParserT__4)
		}

	case 3:
		localctx = NewForInSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(547)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(548)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(549)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(550)
			p.Match(goscriptParserT__7)
		}
		{
			p.SetState(551)
			p.Collection()
		}
		{
			p.SetState(552)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(553)
			p.Block()
		}

	case 4:
		localctx = NewForInMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(555)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(556)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(557)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(558)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(559)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(560)
			p.Match(goscriptParserT__7)
		}
		{
			p.SetState(561)
			p.Collection()
		}
		{
			p.SetState(562)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(563)
			p.Block()
		}

	case 5:
		localctx = NewForContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(565)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(566)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(567)
			p.Line()
		}
		{
			p.SetState(568)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(569)
			p.expr(0)
		}
		{
			p.SetState(570)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(571)
			p.RestoreStack()
		}
		{
			p.SetState(572)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(573)
			p.Block()
		}

	case 6:
		localctx = NewBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(575)
			p.Match(goscriptParserBREAK)
		}
		{
			p.SetState(576)
			p.Match(goscriptParserT__6)
		}

	case 7:
		localctx = NewContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(577)
			p.Match(goscriptParserCONTINUE)
		}
		{
			p.SetState(578)
			p.Match(goscriptParserT__6)
		}

	case 8:
		localctx = NewReturnVoidContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(579)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(580)
			p.Match(goscriptParserT__6)
		}

	case 9:
		localctx = NewReturnValContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(581)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(582)
			p.expr(0)
		}
		p.SetState(587)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(583)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(584)
				p.expr(0)
			}

			p.SetState(589)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(590)
			p.Match(goscriptParserT__6)
		}

	}

	return localctx
}

// ICollectionContext is an interface to support dynamic dispatch.
type ICollectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionContext differentiates from other interfaces.
	IsCollectionContext()
}

type CollectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionContext() *CollectionContext {
	var p = new(CollectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_collection
	return p
}

func (*CollectionContext) IsCollectionContext() {}

func NewCollectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionContext {
	var p = new(CollectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_collection

	return p
}

func (s *CollectionContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CollectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCollection(s)
	}
}

func (s *CollectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCollection(s)
	}
}

func (p *goscriptParser) Collection() (localctx ICollectionContext) {
	localctx = NewCollectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, goscriptParserRULE_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.expr(0)
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *BlockContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *goscriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, goscriptParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(goscriptParserT__3)
	}
	p.SetState(600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__12)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(goscriptParserNOT-70))|(1<<(goscriptParserCHANOP-70))|(1<<(goscriptParserCHANOPNONBLOCK-70))|(1<<(goscriptParserINT-70))|(1<<(goscriptParserFLOAT-70))|(1<<(goscriptParserSTRINGLITERAL-70))|(1<<(goscriptParserNAME-70)))) != 0) {
		{
			p.SetState(597)
			p.Execution()
		}

		p.SetState(602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(603)
		p.Match(goscriptParserT__4)
	}

	return localctx
}

// ILineContext is an interface to support dynamic dispatch.
type ILineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineContext differentiates from other interfaces.
	IsLineContext()
}

type LineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineContext() *LineContext {
	var p = new(LineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_line
	return p
}

func (*LineContext) IsLineContext() {}

func NewLineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineContext {
	var p = new(LineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_line

	return p
}

func (s *LineContext) GetParser() antlr.Parser { return s.parser }

func (s *LineContext) CopyFrom(ctx *LineContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VarDefContext struct {
	*LineContext
}

func NewVarDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarDefContext {
	var p = new(VarDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *VarDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarDefContext) Vardef() IVardefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVardefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVardefContext)
}

func (s *VarDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVarDef(s)
	}
}

func (s *VarDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVarDef(s)
	}
}

type ConstDefContext struct {
	*LineContext
}

func NewConstDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstDefContext {
	var p = new(ConstDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *ConstDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDefContext) Constdef() IConstdefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstdefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstdefContext)
}

func (s *ConstDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstDef(s)
	}
}

func (s *ConstDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstDef(s)
	}
}

type RestoreStackSpContext struct {
	*LineContext
}

func NewRestoreStackSpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RestoreStackSpContext {
	var p = new(RestoreStackSpContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *RestoreStackSpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackSpContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *RestoreStackSpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStackSp(s)
	}
}

func (s *RestoreStackSpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStackSp(s)
	}
}

func (p *goscriptParser) Line() (localctx ILineContext) {
	localctx = NewLineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, goscriptParserRULE_line)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(608)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserT__0, goscriptParserT__12, goscriptParserPUSHBACK, goscriptParserPUSHFRONT, goscriptParserDELETE, goscriptParserENUMSTRING, goscriptParserLEN, goscriptParserTYPEOF, goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserNEW, goscriptParserFUNCTION, goscriptParserBOOLLITERAL, goscriptParserNULL, goscriptParserSUB, goscriptParserUNARYADD, goscriptParserUNARYSUB, goscriptParserNOT, goscriptParserCHANOP, goscriptParserCHANOPNONBLOCK, goscriptParserINT, goscriptParserFLOAT, goscriptParserSTRINGLITERAL, goscriptParserNAME:
		localctx = NewRestoreStackSpContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(605)
			p.RestoreStack()
		}

	case goscriptParserVAR, goscriptParserLOCAL:
		localctx = NewVarDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(606)
			p.Vardef()
		}

	case goscriptParserCONST:
		localctx = NewConstDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(607)
			p.Constdef()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRestoreStackContext is an interface to support dynamic dispatch.
type IRestoreStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestoreStackContext differentiates from other interfaces.
	IsRestoreStackContext()
}

type RestoreStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestoreStackContext() *RestoreStackContext {
	var p = new(RestoreStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_restoreStack
	return p
}

func (*RestoreStackContext) IsRestoreStackContext() {}

func NewRestoreStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestoreStackContext {
	var p = new(RestoreStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_restoreStack

	return p
}

func (s *RestoreStackContext) GetParser() antlr.Parser { return s.parser }

func (s *RestoreStackContext) KeepStack() IKeepStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeepStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeepStackContext)
}

func (s *RestoreStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestoreStackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStack(s)
	}
}

func (s *RestoreStackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStack(s)
	}
}

func (p *goscriptParser) RestoreStack() (localctx IRestoreStackContext) {
	localctx = NewRestoreStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, goscriptParserRULE_restoreStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(610)
		p.KeepStack()
	}

	return localctx
}

// IKeepStackContext is an interface to support dynamic dispatch.
type IKeepStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeepStackContext differentiates from other interfaces.
	IsKeepStackContext()
}

type KeepStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeepStackContext() *KeepStackContext {
	var p = new(KeepStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_keepStack
	return p
}

func (*KeepStackContext) IsKeepStackContext() {}

func NewKeepStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeepStackContext {
	var p = new(KeepStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_keepStack

	return p
}

func (s *KeepStackContext) GetParser() antlr.Parser { return s.parser }

func (s *KeepStackContext) CopyFrom(ctx *KeepStackContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *KeepStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeepStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprEntryContext struct {
	*KeepStackContext
}

func NewExprEntryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprEntryContext {
	var p = new(ExprEntryContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *ExprEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprEntryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterExprEntry(s)
	}
}

func (s *ExprEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitExprEntry(s)
	}
}

type FunctionAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewFunctionAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionAssignContext {
	var p = new(FunctionAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *FunctionAssignContext) GetOp() antlr.Token { return s.op }

func (s *FunctionAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *FunctionAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionAssignContext) AllLhs() []ILhsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILhsContext)(nil)).Elem())
	var tst = make([]ILhsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILhsContext)
		}
	}

	return tst
}

func (s *FunctionAssignContext) Lhs(i int) ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *FunctionAssignContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *FunctionAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *FunctionAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionAssign(s)
	}
}

func (s *FunctionAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionAssign(s)
	}
}

type MultiAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewMultiAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultiAssignContext {
	var p = new(MultiAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *MultiAssignContext) GetOp() antlr.Token { return s.op }

func (s *MultiAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *MultiAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiAssignContext) AllLhs() []ILhsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILhsContext)(nil)).Elem())
	var tst = make([]ILhsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILhsContext)
		}
	}

	return tst
}

func (s *MultiAssignContext) Lhs(i int) ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *MultiAssignContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MultiAssignContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MultiAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *MultiAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMultiAssign(s)
	}
}

func (s *MultiAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMultiAssign(s)
	}
}

func (p *goscriptParser) KeepStack() (localctx IKeepStackContext) {
	localctx = NewKeepStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, goscriptParserRULE_keepStack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprEntryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(612)
			p.expr(0)
		}

	case 2:
		localctx = NewFunctionAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(613)
			p.Lhs()
		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(614)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(615)
				p.Lhs()
			}

			p.SetState(620)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(621)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*FunctionAssignContext).op = _m
		}
		{
			p.SetState(622)
			p.variable(0)
		}

	case 3:
		localctx = NewMultiAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(624)
			p.Lhs()
		}
		p.SetState(629)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(625)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(626)
				p.Lhs()
			}

			p.SetState(631)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(632)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*MultiAssignContext).op = _m
		}
		{
			p.SetState(633)
			p.expr(0)
		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(634)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(635)
				p.expr(0)
			}

			p.SetState(640)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILhsContext is an interface to support dynamic dispatch.
type ILhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLhsContext differentiates from other interfaces.
	IsLhsContext()
}

type LhsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLhsContext() *LhsContext {
	var p = new(LhsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lhs
	return p
}

func (*LhsContext) IsLhsContext() {}

func NewLhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LhsContext {
	var p = new(LhsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lhs

	return p
}

func (s *LhsContext) GetParser() antlr.Parser { return s.parser }

func (s *LhsContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *LhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLhs(s)
	}
}

func (s *LhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLhs(s)
	}
}

func (p *goscriptParser) Lhs() (localctx ILhsContext) {
	localctx = NewLhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, goscriptParserRULE_lhs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.variable(0)
	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) CopyFrom(ctx *VariableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SliceFilterContext struct {
	*VariableContext
}

func NewSliceFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceFilterContext {
	var p = new(SliceFilterContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SliceFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFilterContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SliceFilterContext) Filter() IFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterContext)
}

func (s *SliceFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceFilter(s)
	}
}

func (s *SliceFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceFilter(s)
	}
}

type DirectCallContext struct {
	*VariableContext
}

func NewDirectCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DirectCallContext {
	var p = new(DirectCallContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *DirectCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectCallContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *DirectCallContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DirectCallContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DirectCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterDirectCall(s)
	}
}

func (s *DirectCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitDirectCall(s)
	}
}

type VariableNameContext struct {
	*VariableContext
}

func NewVariableNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableNameContext {
	var p = new(VariableNameContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *VariableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *VariableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVariableName(s)
	}
}

func (s *VariableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVariableName(s)
	}
}

type SelectContext struct {
	*VariableContext
}

func NewSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectContext {
	var p = new(SelectContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SelectContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *SelectContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSelect(s)
	}
}

type IndexContext struct {
	*VariableContext
}

func NewIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexContext {
	var p = new(IndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *IndexContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndex(s)
	}
}

type MapMultiIndexContext struct {
	*VariableContext
}

func NewMapMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapMultiIndexContext {
	var p = new(MapMultiIndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *MapMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapMultiIndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *MapMultiIndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MapMultiIndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MapMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapMultiIndex(s)
	}
}

func (s *MapMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapMultiIndex(s)
	}
}

type SliceMultiIndexContext struct {
	*VariableContext
}

func NewSliceMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceMultiIndexContext {
	var p = new(SliceMultiIndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SliceMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceMultiIndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SliceMultiIndexContext) AllIndexs() []IIndexsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexsContext)(nil)).Elem())
	var tst = make([]IIndexsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexsContext)
		}
	}

	return tst
}

func (s *SliceMultiIndexContext) Indexs(i int) IIndexsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexsContext)
}

func (s *SliceMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceMultiIndex(s)
	}
}

func (s *SliceMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceMultiIndex(s)
	}
}

type TypeAssertContext struct {
	*VariableContext
}

func NewTypeAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeAssertContext {
	var p = new(TypeAssertContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *TypeAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAssertContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *TypeAssertContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *TypeAssertContext) Asserted() IAssertedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssertedContext)
}

func (s *TypeAssertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeAssert(s)
	}
}

func (s *TypeAssertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeAssert(s)
	}
}

func (p *goscriptParser) Variable() (localctx IVariableContext) {
	return p.variable(0)
}

func (p *goscriptParser) variable(_p int) (localctx IVariableContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 52
	p.EnterRecursionRule(localctx, 52, goscriptParserRULE_variable, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(648)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserNAME:
		localctx = NewVariableNameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(646)
			p.Match(goscriptParserNAME)
		}

	case goscriptParserT__12:
		localctx = NewVariableNameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(647)
			p.Match(goscriptParserT__12)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(708)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSelectContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(650)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(651)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(652)
					p.Match(goscriptParserNAME)
				}

			case 2:
				localctx = NewSliceFilterContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(653)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(654)
					p.Match(goscriptParserT__8)
				}
				{
					p.SetState(655)
					p.Filter()
				}
				{
					p.SetState(656)
					p.Match(goscriptParserT__9)
				}

			case 3:
				localctx = NewIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(658)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(659)
					p.Match(goscriptParserT__10)
				}
				{
					p.SetState(660)
					p.expr(0)
				}
				{
					p.SetState(661)
					p.Match(goscriptParserT__11)
				}

			case 4:
				localctx = NewSliceMultiIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(663)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(664)
					p.Match(goscriptParserT__10)
				}
				{
					p.SetState(665)
					p.Indexs()
				}
				p.SetState(670)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__1 {
					{
						p.SetState(666)
						p.Match(goscriptParserT__1)
					}
					{
						p.SetState(667)
						p.Indexs()
					}

					p.SetState(672)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(673)
					p.Match(goscriptParserT__11)
				}

			case 5:
				localctx = NewMapMultiIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(675)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(676)
					p.Match(goscriptParserT__10)
				}
				{
					p.SetState(677)
					p.Match(goscriptParserT__10)
				}
				{
					p.SetState(678)
					p.expr(0)
				}
				p.SetState(683)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__1 {
					{
						p.SetState(679)
						p.Match(goscriptParserT__1)
					}
					{
						p.SetState(680)
						p.expr(0)
					}

					p.SetState(685)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(686)
					p.Match(goscriptParserT__11)
				}
				{
					p.SetState(687)
					p.Match(goscriptParserT__11)
				}

			case 6:
				localctx = NewDirectCallContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(689)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(690)
					p.Match(goscriptParserT__0)
				}
				p.SetState(699)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__12)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(goscriptParserNOT-70))|(1<<(goscriptParserCHANOP-70))|(1<<(goscriptParserCHANOPNONBLOCK-70))|(1<<(goscriptParserINT-70))|(1<<(goscriptParserFLOAT-70))|(1<<(goscriptParserSTRINGLITERAL-70))|(1<<(goscriptParserNAME-70)))) != 0) {
					{
						p.SetState(691)
						p.expr(0)
					}
					p.SetState(696)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == goscriptParserT__1 {
						{
							p.SetState(692)
							p.Match(goscriptParserT__1)
						}
						{
							p.SetState(693)
							p.expr(0)
						}

						p.SetState(698)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(701)
					p.Match(goscriptParserT__2)
				}

			case 7:
				localctx = NewTypeAssertContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(702)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(703)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(704)
					p.Match(goscriptParserT__0)
				}
				{
					p.SetState(705)
					p.Asserted()
				}
				{
					p.SetState(706)
					p.Match(goscriptParserT__2)
				}

			}

		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
	}

	return localctx
}

// IAssertedContext is an interface to support dynamic dispatch.
type IAssertedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertedContext differentiates from other interfaces.
	IsAssertedContext()
}

type AssertedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertedContext() *AssertedContext {
	var p = new(AssertedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_asserted
	return p
}

func (*AssertedContext) IsAssertedContext() {}

func NewAssertedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssertedContext {
	var p = new(AssertedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_asserted

	return p
}

func (s *AssertedContext) GetParser() antlr.Parser { return s.parser }

func (s *AssertedContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *AssertedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssertedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssertedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAsserted(s)
	}
}

func (s *AssertedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAsserted(s)
	}
}

func (p *goscriptParser) Asserted() (localctx IAssertedContext) {
	localctx = NewAssertedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, goscriptParserRULE_asserted)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(713)
		p.Typename()
	}

	return localctx
}

// IFilterContext is an interface to support dynamic dispatch.
type IFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterContext differentiates from other interfaces.
	IsFilterContext()
}

type FilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterContext() *FilterContext {
	var p = new(FilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_filter
	return p
}

func (*FilterContext) IsFilterContext() {}

func NewFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterContext {
	var p = new(FilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_filter

	return p
}

func (s *FilterContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFilter(s)
	}
}

func (s *FilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFilter(s)
	}
}

func (p *goscriptParser) Filter() (localctx IFilterContext) {
	localctx = NewFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, goscriptParserRULE_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.expr(0)
	}

	return localctx
}

// IIndexsContext is an interface to support dynamic dispatch.
type IIndexsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexsContext differentiates from other interfaces.
	IsIndexsContext()
}

type IndexsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexsContext() *IndexsContext {
	var p = new(IndexsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_indexs
	return p
}

func (*IndexsContext) IsIndexsContext() {}

func NewIndexsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexsContext {
	var p = new(IndexsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_indexs

	return p
}

func (s *IndexsContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexsContext) CopyFrom(ctx *IndexsContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IndexType1Context struct {
	*IndexsContext
}

func NewIndexType1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType1Context {
	var p = new(IndexType1Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType1Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType1Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType1(s)
	}
}

func (s *IndexType1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType1(s)
	}
}

type IndexType3Context struct {
	*IndexsContext
}

func NewIndexType3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType3Context {
	var p = new(IndexType3Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType3Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType3(s)
	}
}

func (s *IndexType3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType3(s)
	}
}

type IndexType2Context struct {
	*IndexsContext
}

func NewIndexType2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType2Context {
	var p = new(IndexType2Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType2Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType2Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType2(s)
	}
}

func (s *IndexType2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType2(s)
	}
}

type IndexType5Context struct {
	*IndexsContext
}

func NewIndexType5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType5Context {
	var p = new(IndexType5Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType5Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType5(s)
	}
}

func (s *IndexType5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType5(s)
	}
}

type IndexType4Context struct {
	*IndexsContext
}

func NewIndexType4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType4Context {
	var p = new(IndexType4Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType4Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType4(s)
	}
}

func (s *IndexType4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType4(s)
	}
}

func (p *goscriptParser) Indexs() (localctx IIndexsContext) {
	localctx = NewIndexsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, goscriptParserRULE_indexs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIndexType1Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(717)
			p.expr(0)
		}
		{
			p.SetState(718)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(719)
			p.expr(0)
		}
		{
			p.SetState(720)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(721)
			p.expr(0)
		}

	case 2:
		localctx = NewIndexType2Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(723)
			p.expr(0)
		}
		{
			p.SetState(724)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(725)
			p.expr(0)
		}

	case 3:
		localctx = NewIndexType3Context(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(727)
			p.expr(0)
		}
		{
			p.SetState(728)
			p.Match(goscriptParserT__5)
		}

	case 4:
		localctx = NewIndexType4Context(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(730)
			p.expr(0)
		}

	case 5:
		localctx = NewIndexType5Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(731)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(732)
			p.expr(0)
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyFrom(ctx *ExprContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RecvContext struct {
	*ExprContext
}

func NewRecvContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RecvContext {
	var p = new(RecvContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RecvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecvContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *RecvContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *RecvContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *RecvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRecv(s)
	}
}

func (s *RecvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRecv(s)
	}
}

type PassContext struct {
	*ExprContext
}

func NewPassContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PassContext {
	var p = new(PassContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *PassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PassContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PassContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PassContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *PassContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *PassContext) Builtin() IBuiltinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBuiltinContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBuiltinContext)
}

func (s *PassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterPass(s)
	}
}

func (s *PassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitPass(s)
	}
}

type ConstructContext struct {
	*ExprContext
}

func NewConstructContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstructContext {
	var p = new(ConstructContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *ConstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructContext) Constructor() IConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorContext)
}

func (s *ConstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstruct(s)
	}
}

func (s *ConstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstruct(s)
	}
}

type BinaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryContext {
	var p = new(BinaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *BinaryContext) GetOp() antlr.Token { return s.op }

func (s *BinaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryContext) Lhs() ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *BinaryContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *BinaryContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BinaryContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *BinaryContext) ADDEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserADDEQUAL, 0)
}

func (s *BinaryContext) SUBEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUBEQUAL, 0)
}

func (s *BinaryContext) MULEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMULEQUAL, 0)
}

func (s *BinaryContext) DIVEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIVEQUAL, 0)
}

func (s *BinaryContext) POW() antlr.TerminalNode {
	return s.GetToken(goscriptParserPOW, 0)
}

func (s *BinaryContext) MUL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMUL, 0)
}

func (s *BinaryContext) DIV() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIV, 0)
}

func (s *BinaryContext) MOD() antlr.TerminalNode {
	return s.GetToken(goscriptParserMOD, 0)
}

func (s *BinaryContext) ADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserADD, 0)
}

func (s *BinaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *BinaryContext) EQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserEQ, 0)
}

func (s *BinaryContext) INEQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserINEQ, 0)
}

func (s *BinaryContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *BinaryContext) GE() antlr.TerminalNode {
	return s.GetToken(goscriptParserGE, 0)
}

func (s *BinaryContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *BinaryContext) LE() antlr.TerminalNode {
	return s.GetToken(goscriptParserLE, 0)
}

func (s *BinaryContext) REGEX() antlr.TerminalNode {
	return s.GetToken(goscriptParserREGEX, 0)
}

func (s *BinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(goscriptParserAND, 0)
}

func (s *BinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(goscriptParserOR, 0)
}

func (s *BinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBinary(s)
	}
}

func (s *BinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBinary(s)
	}
}

type LeftUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewLeftUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LeftUnaryContext {
	var p = new(LeftUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *LeftUnaryContext) GetOp() antlr.Token { return s.op }

func (s *LeftUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *LeftUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftUnaryContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *LeftUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *LeftUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *LeftUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LeftUnaryContext) NOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserNOT, 0)
}

func (s *LeftUnaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *LeftUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLeftUnary(s)
	}
}

func (s *LeftUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLeftUnary(s)
	}
}

type RightUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewRightUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RightUnaryContext {
	var p = new(RightUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RightUnaryContext) GetOp() antlr.Token { return s.op }

func (s *RightUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *RightUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RightUnaryContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *RightUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *RightUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *RightUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRightUnary(s)
	}
}

func (s *RightUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRightUnary(s)
	}
}

type SendContext struct {
	*ExprContext
}

func NewSendContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SendContext {
	var p = new(SendContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SendContext) AllVariable() []IVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableContext)(nil)).Elem())
	var tst = make([]IVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableContext)
		}
	}

	return tst
}

func (s *SendContext) Variable(i int) IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SendContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *SendContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *SendContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSend(s)
	}
}

func (s *SendContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSend(s)
	}
}

type AssignInitializationlistContext struct {
	*ExprContext
	op antlr.Token
}

func NewAssignInitializationlistContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignInitializationlistContext {
	var p = new(AssignInitializationlistContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *AssignInitializationlistContext) GetOp() antlr.Token { return s.op }

func (s *AssignInitializationlistContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignInitializationlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignInitializationlistContext) Lhs() ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *AssignInitializationlistContext) InitializationListBegin() IInitializationListBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListBeginContext)
}

func (s *AssignInitializationlistContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *AssignInitializationlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAssignInitializationlist(s)
	}
}

func (s *AssignInitializationlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAssignInitializationlist(s)
	}
}

func (p *goscriptParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *goscriptParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, goscriptParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(736)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(737)
			p.expr(0)
		}
		{
			p.SetState(738)
			p.Match(goscriptParserT__2)
		}

	case 2:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(740)
			p.Constant()
		}

	case 3:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(741)
			p.variable(0)
		}

	case 4:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(742)
			p.Lambda()
		}

	case 5:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(743)
			p.Builtin()
		}

	case 6:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(744)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(745)
			p.variable(0)
		}

	case 7:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(746)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserSUB || _la == goscriptParserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(747)
			p.expr(13)
		}

	case 8:
		localctx = NewRightUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(748)
			p.variable(0)
		}
		{
			p.SetState(749)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RightUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RightUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 9:
		localctx = NewSendContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(751)
			p.variable(0)
		}
		{
			p.SetState(752)
			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(753)
			p.variable(0)
		}

	case 10:
		localctx = NewRecvContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(755)
			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(756)
			p.variable(0)
		}

	case 11:
		localctx = NewBinaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(757)
			p.Lhs()
		}
		{
			p.SetState(758)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*BinaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-73)&-(0x1f+1)) == 0 && ((1<<uint((_la-73)))&((1<<(goscriptParserASSIGN-73))|(1<<(goscriptParserADDEQUAL-73))|(1<<(goscriptParserSUBEQUAL-73))|(1<<(goscriptParserMULEQUAL-73))|(1<<(goscriptParserDIVEQUAL-73)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*BinaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(759)
			p.expr(3)
		}

	case 12:
		localctx = NewAssignInitializationlistContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(761)
			p.Lhs()
		}
		{
			p.SetState(762)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*AssignInitializationlistContext).op = _m
		}
		{
			p.SetState(763)
			p.InitializationListBegin()
		}

	case 13:
		localctx = NewConstructContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(765)
			p.Constructor()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(786)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(768)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(769)

					var _m = p.Match(goscriptParserPOW)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(770)
					p.expr(11)
				}

			case 2:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(771)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(772)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(goscriptParserMUL-54))|(1<<(goscriptParserDIV-54))|(1<<(goscriptParserMOD-54)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(773)
					p.expr(11)
				}

			case 3:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(774)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(775)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserADD || _la == goscriptParserSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(776)
					p.expr(10)
				}

			case 4:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(777)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(778)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(goscriptParserEQ-61))|(1<<(goscriptParserINEQ-61))|(1<<(goscriptParserGT-61))|(1<<(goscriptParserGE-61))|(1<<(goscriptParserLE-61))|(1<<(goscriptParserLT-61))|(1<<(goscriptParserREGEX-61)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(779)
					p.expr(9)
				}

			case 5:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(780)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(781)

					var _m = p.Match(goscriptParserAND)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(782)
					p.expr(8)
				}

			case 6:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(783)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(784)

					var _m = p.Match(goscriptParserOR)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(785)
					p.expr(7)
				}

			}

		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeNameContext is an interface to support dynamic dispatch.
type IBasicTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeNameContext differentiates from other interfaces.
	IsBasicTypeNameContext()
}

type BasicTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeNameContext() *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_basicTypeName
	return p
}

func (*BasicTypeNameContext) IsBasicTypeNameContext() {}

func NewBasicTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_basicTypeName

	return p
}

func (s *BasicTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeNameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BasicTypeNameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BasicTypeNameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BasicTypeNameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BasicTypeNameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BasicTypeNameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BasicTypeNameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BasicTypeNameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BasicTypeNameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BasicTypeNameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BasicTypeNameContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(goscriptParserOBJECT, 0)
}

func (s *BasicTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBasicTypeName(s)
	}
}

func (s *BasicTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBasicTypeName(s)
	}
}

func (p *goscriptParser) BasicTypeName() (localctx IBasicTypeNameContext) {
	localctx = NewBasicTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, goscriptParserRULE_basicTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(791)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-24)&-(0x1f+1)) == 0 && ((1<<uint((_la-24)))&((1<<(goscriptParserUINT32-24))|(1<<(goscriptParserUINT64-24))|(1<<(goscriptParserINT32-24))|(1<<(goscriptParserINT64-24))|(1<<(goscriptParserFLOAT32-24))|(1<<(goscriptParserFLOAT64-24))|(1<<(goscriptParserSTRING-24))|(1<<(goscriptParserBYTES-24))|(1<<(goscriptParserBOOL-24))|(1<<(goscriptParserUINT8-24))|(1<<(goscriptParserOBJECT-24)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBuiltinContext is an interface to support dynamic dispatch.
type IBuiltinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBuiltinContext differentiates from other interfaces.
	IsBuiltinContext()
}

type BuiltinContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuiltinContext() *BuiltinContext {
	var p = new(BuiltinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_builtin
	return p
}

func (*BuiltinContext) IsBuiltinContext() {}

func NewBuiltinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BuiltinContext {
	var p = new(BuiltinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_builtin

	return p
}

func (s *BuiltinContext) GetParser() antlr.Parser { return s.parser }

func (s *BuiltinContext) PUSHBACK() antlr.TerminalNode {
	return s.GetToken(goscriptParserPUSHBACK, 0)
}

func (s *BuiltinContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *BuiltinContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BuiltinContext) PUSHFRONT() antlr.TerminalNode {
	return s.GetToken(goscriptParserPUSHFRONT, 0)
}

func (s *BuiltinContext) DELETE() antlr.TerminalNode {
	return s.GetToken(goscriptParserDELETE, 0)
}

func (s *BuiltinContext) ENUMSTRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUMSTRING, 0)
}

func (s *BuiltinContext) LEN() antlr.TerminalNode {
	return s.GetToken(goscriptParserLEN, 0)
}

func (s *BuiltinContext) TYPEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEOF, 0)
}

func (s *BuiltinContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BuiltinContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BuiltinContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BuiltinContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BuiltinContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BuiltinContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BuiltinContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BuiltinContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BuiltinContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BuiltinContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BuiltinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BuiltinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BuiltinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBuiltin(s)
	}
}

func (s *BuiltinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBuiltin(s)
	}
}

func (p *goscriptParser) Builtin() (localctx IBuiltinContext) {
	localctx = NewBuiltinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, goscriptParserRULE_builtin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(879)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserPUSHBACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(793)
			p.Match(goscriptParserPUSHBACK)
		}
		{
			p.SetState(794)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(795)
			p.variable(0)
		}
		{
			p.SetState(796)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(797)
			p.expr(0)
		}
		{
			p.SetState(798)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserPUSHFRONT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(800)
			p.Match(goscriptParserPUSHFRONT)
		}
		{
			p.SetState(801)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(802)
			p.variable(0)
		}
		{
			p.SetState(803)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(804)
			p.expr(0)
		}
		{
			p.SetState(805)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserDELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(807)
			p.Match(goscriptParserDELETE)
		}
		{
			p.SetState(808)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(809)
			p.variable(0)
		}
		{
			p.SetState(810)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(811)
			p.expr(0)
		}
		{
			p.SetState(812)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserENUMSTRING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(814)
			p.Match(goscriptParserENUMSTRING)
		}
		{
			p.SetState(815)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(816)
			p.variable(0)
		}
		{
			p.SetState(817)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserLEN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(819)
			p.Match(goscriptParserLEN)
		}
		{
			p.SetState(820)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(821)
			p.variable(0)
		}
		{
			p.SetState(822)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserTYPEOF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(824)
			p.Match(goscriptParserTYPEOF)
		}
		{
			p.SetState(825)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(826)
			p.variable(0)
		}
		{
			p.SetState(827)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT32:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(829)
			p.Match(goscriptParserUINT32)
		}
		{
			p.SetState(830)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(831)
			p.expr(0)
		}
		{
			p.SetState(832)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(834)
			p.Match(goscriptParserUINT64)
		}
		{
			p.SetState(835)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(836)
			p.expr(0)
		}
		{
			p.SetState(837)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserINT32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(839)
			p.Match(goscriptParserINT32)
		}
		{
			p.SetState(840)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(841)
			p.expr(0)
		}
		{
			p.SetState(842)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserINT64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(844)
			p.Match(goscriptParserINT64)
		}
		{
			p.SetState(845)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(846)
			p.expr(0)
		}
		{
			p.SetState(847)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserFLOAT32:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(849)
			p.Match(goscriptParserFLOAT32)
		}
		{
			p.SetState(850)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(851)
			p.expr(0)
		}
		{
			p.SetState(852)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserFLOAT64:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(854)
			p.Match(goscriptParserFLOAT64)
		}
		{
			p.SetState(855)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(856)
			p.expr(0)
		}
		{
			p.SetState(857)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserSTRING:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(859)
			p.Match(goscriptParserSTRING)
		}
		{
			p.SetState(860)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(861)
			p.expr(0)
		}
		{
			p.SetState(862)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserBYTES:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(864)
			p.Match(goscriptParserBYTES)
		}
		{
			p.SetState(865)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(866)
			p.expr(0)
		}
		{
			p.SetState(867)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserBOOL:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(869)
			p.Match(goscriptParserBOOL)
		}
		{
			p.SetState(870)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(871)
			p.expr(0)
		}
		{
			p.SetState(872)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT8:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(874)
			p.Match(goscriptParserUINT8)
		}
		{
			p.SetState(875)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(876)
			p.expr(0)
		}
		{
			p.SetState(877)
			p.Match(goscriptParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializationListBeginContext is an interface to support dynamic dispatch.
type IInitializationListBeginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListBeginContext differentiates from other interfaces.
	IsInitializationListBeginContext()
}

type InitializationListBeginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListBeginContext() *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationListBegin
	return p
}

func (*InitializationListBeginContext) IsInitializationListBeginContext() {}

func NewInitializationListBeginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationListBegin

	return p
}

func (s *InitializationListBeginContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListBeginContext) InitializationList() IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitializationListBeginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListBeginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializationListBeginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitializationListBegin(s)
	}
}

func (s *InitializationListBeginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitializationListBegin(s)
	}
}

func (p *goscriptParser) InitializationListBegin() (localctx IInitializationListBeginContext) {
	localctx = NewInitializationListBeginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, goscriptParserRULE_initializationListBegin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(881)
		p.InitializationList()
	}

	return localctx
}

// IInitializationListContext is an interface to support dynamic dispatch.
type IInitializationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListContext differentiates from other interfaces.
	IsInitializationListContext()
}

type InitializationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListContext() *InitializationListContext {
	var p = new(InitializationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationList
	return p
}

func (*InitializationListContext) IsInitializationListContext() {}

func NewInitializationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListContext {
	var p = new(InitializationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationList

	return p
}

func (s *InitializationListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListContext) CopyFrom(ctx *InitializationListContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *InitializationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InitMessageContext struct {
	*InitializationListContext
}

func NewInitMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMessageContext {
	var p = new(InitMessageContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMessageContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *InitMessageContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *InitMessageContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMessageContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMessage(s)
	}
}

func (s *InitMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMessage(s)
	}
}

type InitConstantContext struct {
	*InitializationListContext
}

func NewInitConstantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitConstantContext {
	var p = new(InitConstantContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitConstantContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InitConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitConstant(s)
	}
}

func (s *InitConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitConstant(s)
	}
}

type InitMapContext struct {
	*InitializationListContext
}

func NewInitMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMapContext {
	var p = new(InitMapContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMapContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMapContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMap(s)
	}
}

func (s *InitMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMap(s)
	}
}

type InitSliceContext struct {
	*InitializationListContext
}

func NewInitSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitSliceContext {
	var p = new(InitSliceContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitSliceContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitSliceContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitSlice(s)
	}
}

func (s *InitSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitSlice(s)
	}
}

func (p *goscriptParser) InitializationList() (localctx IInitializationListContext) {
	localctx = NewInitializationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, goscriptParserRULE_initializationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		localctx = NewInitSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(883)
			p.Match(goscriptParserT__10)
		}
		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__3)|(1<<goscriptParserT__10)|(1<<goscriptParserT__12)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(goscriptParserNOT-70))|(1<<(goscriptParserCHANOP-70))|(1<<(goscriptParserCHANOPNONBLOCK-70))|(1<<(goscriptParserINT-70))|(1<<(goscriptParserFLOAT-70))|(1<<(goscriptParserSTRINGLITERAL-70))|(1<<(goscriptParserNAME-70)))) != 0) {
			{
				p.SetState(884)
				p.InitializationList()
			}
			p.SetState(889)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(885)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(886)
					p.InitializationList()
				}

				p.SetState(891)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(894)
			p.Match(goscriptParserT__11)
		}

	case 2:
		localctx = NewInitMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(895)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(896)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(897)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(898)
			p.InitializationList()
		}
		{
			p.SetState(899)
			p.Match(goscriptParserT__2)
		}
		p.SetState(908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(900)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(901)
				p.Match(goscriptParserNAME)
			}
			{
				p.SetState(902)
				p.Match(goscriptParserT__0)
			}
			{
				p.SetState(903)
				p.InitializationList()
			}
			{
				p.SetState(904)
				p.Match(goscriptParserT__2)
			}

			p.SetState(910)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(911)
			p.Match(goscriptParserT__4)
		}

	case 3:
		localctx = NewInitMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(913)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(914)
			p.InitializationList()
		}
		{
			p.SetState(915)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(916)
			p.InitializationList()
		}
		p.SetState(924)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(917)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(918)
				p.InitializationList()
			}
			{
				p.SetState(919)
				p.Match(goscriptParserT__5)
			}
			{
				p.SetState(920)
				p.InitializationList()
			}

			p.SetState(926)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(927)
			p.Match(goscriptParserT__4)
		}

	case 4:
		localctx = NewInitConstantContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(929)
			p.expr(0)
		}

	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) CopyFrom(ctx *ConstantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConstantNilContext struct {
	*ConstantContext
}

func NewConstantNilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantNilContext {
	var p = new(ConstantNilContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantNilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantNilContext) NULL() antlr.TerminalNode {
	return s.GetToken(goscriptParserNULL, 0)
}

func (s *ConstantNilContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantNil(s)
	}
}

func (s *ConstantNilContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantNil(s)
	}
}

type ConstantIntContext struct {
	*ConstantContext
}

func NewConstantIntContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantIntContext {
	var p = new(ConstantIntContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantIntContext) INT() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, 0)
}

func (s *ConstantIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantInt(s)
	}
}

func (s *ConstantIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantInt(s)
	}
}

type ConstantStringContext struct {
	*ConstantContext
}

func NewConstantStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantStringContext {
	var p = new(ConstantStringContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantStringContext) STRINGLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRINGLITERAL, 0)
}

func (s *ConstantStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantString(s)
	}
}

func (s *ConstantStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantString(s)
	}
}

type ConstantFloatContext struct {
	*ConstantContext
}

func NewConstantFloatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantFloatContext {
	var p = new(ConstantFloatContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantFloatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantFloatContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT, 0)
}

func (s *ConstantFloatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantFloat(s)
	}
}

func (s *ConstantFloatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantFloat(s)
	}
}

type ConstantBoolContext struct {
	*ConstantContext
}

func NewConstantBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantBoolContext {
	var p = new(ConstantBoolContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantBoolContext) BOOLLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOLLITERAL, 0)
}

func (s *ConstantBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantBool(s)
	}
}

func (s *ConstantBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantBool(s)
	}
}

func (p *goscriptParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, goscriptParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(937)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserINT:
		localctx = NewConstantIntContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(932)
			p.Match(goscriptParserINT)
		}

	case goscriptParserFLOAT:
		localctx = NewConstantFloatContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(933)
			p.Match(goscriptParserFLOAT)
		}

	case goscriptParserBOOLLITERAL:
		localctx = NewConstantBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(934)
			p.Match(goscriptParserBOOLLITERAL)
		}

	case goscriptParserNULL:
		localctx = NewConstantNilContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(935)
			p.Match(goscriptParserNULL)
		}

	case goscriptParserSTRINGLITERAL:
		localctx = NewConstantStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(936)
			p.Match(goscriptParserSTRINGLITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstructorContext is an interface to support dynamic dispatch.
type IConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorContext differentiates from other interfaces.
	IsConstructorContext()
}

type ConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorContext() *ConstructorContext {
	var p = new(ConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constructor
	return p
}

func (*ConstructorContext) IsConstructorContext() {}

func NewConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorContext {
	var p = new(ConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constructor

	return p
}

func (s *ConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorContext) NEW() antlr.TerminalNode {
	return s.GetToken(goscriptParserNEW, 0)
}

func (s *ConstructorContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ConstructorContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ConstructorContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstructor(s)
	}
}

func (s *ConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstructor(s)
	}
}

func (p *goscriptParser) Constructor() (localctx IConstructorContext) {
	localctx = NewConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, goscriptParserRULE_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(939)
			p.Match(goscriptParserNEW)
		}
		{
			p.SetState(940)
			p.Typename()
		}
		{
			p.SetState(941)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(942)
			p.Match(goscriptParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(944)
			p.Match(goscriptParserNEW)
		}
		{
			p.SetState(945)
			p.Typename()
		}
		{
			p.SetState(946)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(947)
			p.expr(0)
		}
		p.SetState(952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(948)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(949)
				p.expr(0)
			}

			p.SetState(954)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(955)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// IVardefContext is an interface to support dynamic dispatch.
type IVardefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVardefContext differentiates from other interfaces.
	IsVardefContext()
}

type VardefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVardefContext() *VardefContext {
	var p = new(VardefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_vardef
	return p
}

func (*VardefContext) IsVardefContext() {}

func NewVardefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VardefContext {
	var p = new(VardefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_vardef

	return p
}

func (s *VardefContext) GetParser() antlr.Parser { return s.parser }

func (s *VardefContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *VardefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *VardefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *VardefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *VardefContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VardefContext) InitializationListBegin() IInitializationListBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListBeginContext)
}

func (s *VardefContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *VardefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VardefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VardefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVardef(s)
	}
}

func (s *VardefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVardef(s)
	}
}

func (p *goscriptParser) Vardef() (localctx IVardefContext) {
	localctx = NewVardefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, goscriptParserRULE_vardef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(989)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(959)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(960)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(961)
			p.Typename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(962)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(963)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(964)
			p.Typename()
		}
		{
			p.SetState(965)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(966)
			p.expr(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(968)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(969)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(970)
			p.Typename()
		}
		{
			p.SetState(971)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(972)
			p.InitializationListBegin()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(974)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(975)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(976)
			p.Typename()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(977)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(978)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(979)
			p.Typename()
		}
		{
			p.SetState(980)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(981)
			p.expr(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(983)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(984)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(985)
			p.Typename()
		}
		{
			p.SetState(986)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(987)
			p.InitializationListBegin()
		}

	}

	return localctx
}

// IConstdefContext is an interface to support dynamic dispatch.
type IConstdefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstdefContext differentiates from other interfaces.
	IsConstdefContext()
}

type ConstdefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstdefContext() *ConstdefContext {
	var p = new(ConstdefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constdef
	return p
}

func (*ConstdefContext) IsConstdefContext() {}

func NewConstdefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstdefContext {
	var p = new(ConstdefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constdef

	return p
}

func (s *ConstdefContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstdefContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *ConstdefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *ConstdefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *ConstdefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *ConstdefContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstdefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstdef(s)
	}
}

func (s *ConstdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstdef(s)
	}
}

func (p *goscriptParser) Constdef() (localctx IConstdefContext) {
	localctx = NewConstdefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, goscriptParserRULE_constdef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(991)
		p.Match(goscriptParserCONST)
	}
	{
		p.SetState(992)
		p.Match(goscriptParserNAME)
	}
	{
		p.SetState(993)
		p.BasicTypeName()
	}
	{
		p.SetState(994)
		p.Match(goscriptParserASSIGN)
	}
	{
		p.SetState(995)
		p.Constant()
	}

	return localctx
}

func (p *goscriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 26:
		var t *VariableContext = nil
		if localctx != nil {
			t = localctx.(*VariableContext)
		}
		return p.Variable_Sempred(t, predIndex)

	case 30:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *goscriptParser) Variable_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *goscriptParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
