// Code generated from goscript.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // goscript

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 79, 918,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 3, 2, 6, 2, 72, 10, 2, 13, 2, 14, 2, 73, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 82, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 7, 4, 90, 10, 4, 12, 4, 14, 4, 93, 11, 4, 3, 4, 3, 4, 5, 4, 97,
	10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 106, 10, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 115, 10, 4, 12, 4, 14, 4, 118,
	11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 125, 10, 4, 12, 4, 14, 4, 128,
	11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	7, 4, 141, 10, 4, 12, 4, 14, 4, 144, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 155, 10, 4, 12, 4, 14, 4, 158, 11, 4,
	3, 4, 3, 4, 5, 4, 162, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	5, 4, 171, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 180,
	10, 4, 12, 4, 14, 4, 183, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 190,
	10, 4, 12, 4, 14, 4, 193, 11, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 206, 10, 4, 12, 4, 14, 4, 209, 11, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 214, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5,
	221, 10, 5, 12, 5, 14, 5, 224, 11, 5, 3, 5, 3, 5, 5, 5, 228, 10, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 236, 10, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 7, 5, 244, 10, 5, 12, 5, 14, 5, 247, 11, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 7, 5, 254, 10, 5, 12, 5, 14, 5, 257, 11, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 269, 10, 5, 12,
	5, 14, 5, 272, 11, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7,
	5, 282, 10, 5, 12, 5, 14, 5, 285, 11, 5, 3, 5, 3, 5, 5, 5, 289, 10, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 297, 10, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 7, 5, 305, 10, 5, 12, 5, 14, 5, 308, 11, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 7, 5, 315, 10, 5, 12, 5, 14, 5, 318, 11, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 330, 10, 5,
	12, 5, 14, 5, 333, 11, 5, 3, 5, 3, 5, 3, 5, 5, 5, 338, 10, 5, 3, 6, 3,
	6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7,
	12, 363, 10, 12, 12, 12, 14, 12, 366, 11, 12, 3, 12, 5, 12, 369, 10, 12,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 378, 10, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 389,
	10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 396, 10, 14, 12, 14,
	14, 14, 399, 11, 14, 3, 14, 3, 14, 5, 14, 403, 10, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 5, 14, 409, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14,
	416, 10, 14, 12, 14, 14, 14, 419, 11, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 7, 14, 426, 10, 14, 12, 14, 14, 14, 429, 11, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 440, 10, 14, 12, 14, 14,
	14, 443, 11, 14, 3, 14, 3, 14, 5, 14, 447, 10, 14, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 456, 10, 15, 12, 15, 14, 15, 459, 11,
	15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 467, 10, 16, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 477, 10, 17, 5,
	17, 479, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 6, 17, 491, 10, 17, 13, 17, 14, 17, 492, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 535, 10, 17, 12, 17, 14,
	17, 538, 11, 17, 3, 17, 3, 17, 5, 17, 542, 10, 17, 3, 18, 3, 18, 3, 19,
	3, 19, 7, 19, 548, 10, 19, 12, 19, 14, 19, 551, 11, 19, 3, 19, 3, 19, 3,
	20, 3, 20, 3, 20, 5, 20, 558, 10, 20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22,
	3, 22, 7, 22, 566, 10, 22, 12, 22, 14, 22, 569, 11, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 22, 7, 22, 577, 10, 22, 12, 22, 14, 22, 580, 11, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 7, 22, 586, 10, 22, 12, 22, 14, 22, 589, 11,
	22, 5, 22, 591, 10, 22, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 5, 24, 598,
	10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 618,
	10, 24, 12, 24, 14, 24, 621, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 7, 24, 631, 10, 24, 12, 24, 14, 24, 634, 11, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 644, 10, 24,
	12, 24, 14, 24, 647, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24,
	654, 10, 24, 12, 24, 14, 24, 657, 11, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 5, 26, 677, 10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5,
	27, 704, 10, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 7,
	27, 724, 10, 27, 12, 27, 14, 27, 727, 11, 27, 3, 28, 3, 28, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	5, 29, 817, 10, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 825,
	10, 31, 12, 31, 14, 31, 828, 11, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 843, 10,
	31, 12, 31, 14, 31, 846, 11, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 859, 10, 31, 12, 31, 14,
	31, 862, 11, 31, 3, 31, 3, 31, 3, 31, 5, 31, 867, 10, 31, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 5, 32, 874, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 887, 10, 33, 12, 33,
	14, 33, 890, 11, 33, 3, 33, 3, 33, 5, 33, 894, 10, 33, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 905, 10, 34, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 916, 10,
	35, 3, 35, 2, 4, 46, 52, 36, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
	26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
	62, 64, 66, 68, 2, 9, 3, 2, 56, 57, 4, 2, 55, 55, 67, 67, 3, 2, 68, 72,
	3, 2, 51, 53, 3, 2, 54, 55, 3, 2, 58, 64, 3, 2, 25, 34, 2, 1023, 2, 71,
	3, 2, 2, 2, 4, 81, 3, 2, 2, 2, 6, 213, 3, 2, 2, 2, 8, 337, 3, 2, 2, 2,
	10, 339, 3, 2, 2, 2, 12, 341, 3, 2, 2, 2, 14, 343, 3, 2, 2, 2, 16, 345,
	3, 2, 2, 2, 18, 347, 3, 2, 2, 2, 20, 349, 3, 2, 2, 2, 22, 368, 3, 2, 2,
	2, 24, 388, 3, 2, 2, 2, 26, 446, 3, 2, 2, 2, 28, 448, 3, 2, 2, 2, 30, 466,
	3, 2, 2, 2, 32, 541, 3, 2, 2, 2, 34, 543, 3, 2, 2, 2, 36, 545, 3, 2, 2,
	2, 38, 557, 3, 2, 2, 2, 40, 559, 3, 2, 2, 2, 42, 590, 3, 2, 2, 2, 44, 592,
	3, 2, 2, 2, 46, 597, 3, 2, 2, 2, 48, 658, 3, 2, 2, 2, 50, 676, 3, 2, 2,
	2, 52, 703, 3, 2, 2, 2, 54, 728, 3, 2, 2, 2, 56, 816, 3, 2, 2, 2, 58, 818,
	3, 2, 2, 2, 60, 866, 3, 2, 2, 2, 62, 873, 3, 2, 2, 2, 64, 893, 3, 2, 2,
	2, 66, 904, 3, 2, 2, 2, 68, 915, 3, 2, 2, 2, 70, 72, 5, 4, 3, 2, 71, 70,
	3, 2, 2, 2, 72, 73, 3, 2, 2, 2, 73, 71, 3, 2, 2, 2, 73, 74, 3, 2, 2, 2,
	74, 3, 3, 2, 2, 2, 75, 82, 5, 6, 4, 2, 76, 77, 5, 22, 12, 2, 77, 78, 7,
	3, 2, 2, 78, 82, 3, 2, 2, 2, 79, 82, 5, 28, 15, 2, 80, 82, 5, 30, 16, 2,
	81, 75, 3, 2, 2, 2, 81, 76, 3, 2, 2, 2, 81, 79, 3, 2, 2, 2, 81, 80, 3,
	2, 2, 2, 82, 5, 3, 2, 2, 2, 83, 84, 7, 46, 2, 2, 84, 85, 7, 76, 2, 2, 85,
	86, 7, 4, 2, 2, 86, 91, 5, 12, 7, 2, 87, 88, 7, 5, 2, 2, 88, 90, 5, 12,
	7, 2, 89, 87, 3, 2, 2, 2, 90, 93, 3, 2, 2, 2, 91, 89, 3, 2, 2, 2, 91, 92,
	3, 2, 2, 2, 92, 94, 3, 2, 2, 2, 93, 91, 3, 2, 2, 2, 94, 96, 7, 6, 2, 2,
	95, 97, 5, 18, 10, 2, 96, 95, 3, 2, 2, 2, 96, 97, 3, 2, 2, 2, 97, 98, 3,
	2, 2, 2, 98, 99, 5, 10, 6, 2, 99, 214, 3, 2, 2, 2, 100, 101, 7, 46, 2,
	2, 101, 102, 7, 76, 2, 2, 102, 103, 7, 4, 2, 2, 103, 105, 7, 6, 2, 2, 104,
	106, 5, 18, 10, 2, 105, 104, 3, 2, 2, 2, 105, 106, 3, 2, 2, 2, 106, 107,
	3, 2, 2, 2, 107, 214, 5, 36, 19, 2, 108, 109, 7, 46, 2, 2, 109, 110, 7,
	76, 2, 2, 110, 111, 7, 4, 2, 2, 111, 116, 5, 12, 7, 2, 112, 113, 7, 5,
	2, 2, 113, 115, 5, 12, 7, 2, 114, 112, 3, 2, 2, 2, 115, 118, 3, 2, 2, 2,
	116, 114, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 117, 119, 3, 2, 2, 2, 118,
	116, 3, 2, 2, 2, 119, 120, 7, 6, 2, 2, 120, 121, 7, 4, 2, 2, 121, 126,
	5, 18, 10, 2, 122, 123, 7, 5, 2, 2, 123, 125, 5, 18, 10, 2, 124, 122, 3,
	2, 2, 2, 125, 128, 3, 2, 2, 2, 126, 124, 3, 2, 2, 2, 126, 127, 3, 2, 2,
	2, 127, 129, 3, 2, 2, 2, 128, 126, 3, 2, 2, 2, 129, 130, 7, 6, 2, 2, 130,
	131, 5, 10, 6, 2, 131, 214, 3, 2, 2, 2, 132, 133, 7, 46, 2, 2, 133, 134,
	7, 76, 2, 2, 134, 135, 7, 4, 2, 2, 135, 136, 7, 6, 2, 2, 136, 137, 7, 4,
	2, 2, 137, 142, 5, 18, 10, 2, 138, 139, 7, 5, 2, 2, 139, 141, 5, 18, 10,
	2, 140, 138, 3, 2, 2, 2, 141, 144, 3, 2, 2, 2, 142, 140, 3, 2, 2, 2, 142,
	143, 3, 2, 2, 2, 143, 145, 3, 2, 2, 2, 144, 142, 3, 2, 2, 2, 145, 146,
	7, 6, 2, 2, 146, 147, 5, 10, 6, 2, 147, 214, 3, 2, 2, 2, 148, 149, 7, 46,
	2, 2, 149, 150, 7, 76, 2, 2, 150, 151, 7, 4, 2, 2, 151, 156, 5, 12, 7,
	2, 152, 153, 7, 5, 2, 2, 153, 155, 5, 12, 7, 2, 154, 152, 3, 2, 2, 2, 155,
	158, 3, 2, 2, 2, 156, 154, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 159,
	3, 2, 2, 2, 158, 156, 3, 2, 2, 2, 159, 161, 7, 6, 2, 2, 160, 162, 5, 14,
	8, 2, 161, 160, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 163, 3, 2, 2, 2,
	163, 164, 5, 10, 6, 2, 164, 214, 3, 2, 2, 2, 165, 166, 7, 46, 2, 2, 166,
	167, 7, 76, 2, 2, 167, 168, 7, 4, 2, 2, 168, 170, 7, 6, 2, 2, 169, 171,
	5, 24, 13, 2, 170, 169, 3, 2, 2, 2, 170, 171, 3, 2, 2, 2, 171, 172, 3,
	2, 2, 2, 172, 214, 5, 10, 6, 2, 173, 174, 7, 46, 2, 2, 174, 175, 7, 76,
	2, 2, 175, 176, 7, 4, 2, 2, 176, 181, 5, 12, 7, 2, 177, 178, 7, 5, 2, 2,
	178, 180, 5, 12, 7, 2, 179, 177, 3, 2, 2, 2, 180, 183, 3, 2, 2, 2, 181,
	179, 3, 2, 2, 2, 181, 182, 3, 2, 2, 2, 182, 184, 3, 2, 2, 2, 183, 181,
	3, 2, 2, 2, 184, 185, 7, 6, 2, 2, 185, 186, 7, 4, 2, 2, 186, 191, 5, 14,
	8, 2, 187, 188, 7, 5, 2, 2, 188, 190, 5, 14, 8, 2, 189, 187, 3, 2, 2, 2,
	190, 193, 3, 2, 2, 2, 191, 189, 3, 2, 2, 2, 191, 192, 3, 2, 2, 2, 192,
	194, 3, 2, 2, 2, 193, 191, 3, 2, 2, 2, 194, 195, 7, 6, 2, 2, 195, 196,
	5, 10, 6, 2, 196, 214, 3, 2, 2, 2, 197, 198, 7, 46, 2, 2, 198, 199, 7,
	76, 2, 2, 199, 200, 7, 4, 2, 2, 200, 201, 7, 6, 2, 2, 201, 202, 7, 4, 2,
	2, 202, 207, 5, 14, 8, 2, 203, 204, 7, 5, 2, 2, 204, 206, 5, 14, 8, 2,
	205, 203, 3, 2, 2, 2, 206, 209, 3, 2, 2, 2, 207, 205, 3, 2, 2, 2, 207,
	208, 3, 2, 2, 2, 208, 210, 3, 2, 2, 2, 209, 207, 3, 2, 2, 2, 210, 211,
	7, 6, 2, 2, 211, 212, 5, 10, 6, 2, 212, 214, 3, 2, 2, 2, 213, 83, 3, 2,
	2, 2, 213, 100, 3, 2, 2, 2, 213, 108, 3, 2, 2, 2, 213, 132, 3, 2, 2, 2,
	213, 148, 3, 2, 2, 2, 213, 165, 3, 2, 2, 2, 213, 173, 3, 2, 2, 2, 213,
	197, 3, 2, 2, 2, 214, 7, 3, 2, 2, 2, 215, 216, 7, 46, 2, 2, 216, 217, 7,
	4, 2, 2, 217, 222, 5, 12, 7, 2, 218, 219, 7, 5, 2, 2, 219, 221, 5, 12,
	7, 2, 220, 218, 3, 2, 2, 2, 221, 224, 3, 2, 2, 2, 222, 220, 3, 2, 2, 2,
	222, 223, 3, 2, 2, 2, 223, 225, 3, 2, 2, 2, 224, 222, 3, 2, 2, 2, 225,
	227, 7, 6, 2, 2, 226, 228, 5, 18, 10, 2, 227, 226, 3, 2, 2, 2, 227, 228,
	3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 230, 5, 10, 6, 2, 230, 338, 3, 2,
	2, 2, 231, 232, 7, 46, 2, 2, 232, 233, 7, 4, 2, 2, 233, 235, 7, 6, 2, 2,
	234, 236, 5, 18, 10, 2, 235, 234, 3, 2, 2, 2, 235, 236, 3, 2, 2, 2, 236,
	237, 3, 2, 2, 2, 237, 338, 5, 10, 6, 2, 238, 239, 7, 46, 2, 2, 239, 240,
	7, 4, 2, 2, 240, 245, 5, 12, 7, 2, 241, 242, 7, 5, 2, 2, 242, 244, 5, 12,
	7, 2, 243, 241, 3, 2, 2, 2, 244, 247, 3, 2, 2, 2, 245, 243, 3, 2, 2, 2,
	245, 246, 3, 2, 2, 2, 246, 248, 3, 2, 2, 2, 247, 245, 3, 2, 2, 2, 248,
	249, 7, 6, 2, 2, 249, 250, 7, 4, 2, 2, 250, 255, 5, 18, 10, 2, 251, 252,
	7, 5, 2, 2, 252, 254, 5, 18, 10, 2, 253, 251, 3, 2, 2, 2, 254, 257, 3,
	2, 2, 2, 255, 253, 3, 2, 2, 2, 255, 256, 3, 2, 2, 2, 256, 258, 3, 2, 2,
	2, 257, 255, 3, 2, 2, 2, 258, 259, 7, 6, 2, 2, 259, 260, 5, 10, 6, 2, 260,
	338, 3, 2, 2, 2, 261, 262, 7, 46, 2, 2, 262, 263, 7, 4, 2, 2, 263, 264,
	7, 6, 2, 2, 264, 265, 7, 4, 2, 2, 265, 270, 5, 18, 10, 2, 266, 267, 7,
	5, 2, 2, 267, 269, 5, 18, 10, 2, 268, 266, 3, 2, 2, 2, 269, 272, 3, 2,
	2, 2, 270, 268, 3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 273, 3, 2, 2, 2,
	272, 270, 3, 2, 2, 2, 273, 274, 7, 6, 2, 2, 274, 275, 5, 10, 6, 2, 275,
	338, 3, 2, 2, 2, 276, 277, 7, 46, 2, 2, 277, 278, 7, 4, 2, 2, 278, 283,
	5, 12, 7, 2, 279, 280, 7, 5, 2, 2, 280, 282, 5, 12, 7, 2, 281, 279, 3,
	2, 2, 2, 282, 285, 3, 2, 2, 2, 283, 281, 3, 2, 2, 2, 283, 284, 3, 2, 2,
	2, 284, 286, 3, 2, 2, 2, 285, 283, 3, 2, 2, 2, 286, 288, 7, 6, 2, 2, 287,
	289, 5, 14, 8, 2, 288, 287, 3, 2, 2, 2, 288, 289, 3, 2, 2, 2, 289, 290,
	3, 2, 2, 2, 290, 291, 5, 10, 6, 2, 291, 338, 3, 2, 2, 2, 292, 293, 7, 46,
	2, 2, 293, 294, 7, 4, 2, 2, 294, 296, 7, 6, 2, 2, 295, 297, 5, 24, 13,
	2, 296, 295, 3, 2, 2, 2, 296, 297, 3, 2, 2, 2, 297, 298, 3, 2, 2, 2, 298,
	338, 5, 10, 6, 2, 299, 300, 7, 46, 2, 2, 300, 301, 7, 4, 2, 2, 301, 306,
	5, 12, 7, 2, 302, 303, 7, 5, 2, 2, 303, 305, 5, 12, 7, 2, 304, 302, 3,
	2, 2, 2, 305, 308, 3, 2, 2, 2, 306, 304, 3, 2, 2, 2, 306, 307, 3, 2, 2,
	2, 307, 309, 3, 2, 2, 2, 308, 306, 3, 2, 2, 2, 309, 310, 7, 6, 2, 2, 310,
	311, 7, 4, 2, 2, 311, 316, 5, 14, 8, 2, 312, 313, 7, 5, 2, 2, 313, 315,
	5, 14, 8, 2, 314, 312, 3, 2, 2, 2, 315, 318, 3, 2, 2, 2, 316, 314, 3, 2,
	2, 2, 316, 317, 3, 2, 2, 2, 317, 319, 3, 2, 2, 2, 318, 316, 3, 2, 2, 2,
	319, 320, 7, 6, 2, 2, 320, 321, 5, 10, 6, 2, 321, 338, 3, 2, 2, 2, 322,
	323, 7, 46, 2, 2, 323, 324, 7, 4, 2, 2, 324, 325, 7, 6, 2, 2, 325, 326,
	7, 4, 2, 2, 326, 331, 5, 14, 8, 2, 327, 328, 7, 5, 2, 2, 328, 330, 5, 14,
	8, 2, 329, 327, 3, 2, 2, 2, 330, 333, 3, 2, 2, 2, 331, 329, 3, 2, 2, 2,
	331, 332, 3, 2, 2, 2, 332, 334, 3, 2, 2, 2, 333, 331, 3, 2, 2, 2, 334,
	335, 7, 6, 2, 2, 335, 336, 5, 10, 6, 2, 336, 338, 3, 2, 2, 2, 337, 215,
	3, 2, 2, 2, 337, 231, 3, 2, 2, 2, 337, 238, 3, 2, 2, 2, 337, 261, 3, 2,
	2, 2, 337, 276, 3, 2, 2, 2, 337, 292, 3, 2, 2, 2, 337, 299, 3, 2, 2, 2,
	337, 322, 3, 2, 2, 2, 338, 9, 3, 2, 2, 2, 339, 340, 5, 36, 19, 2, 340,
	11, 3, 2, 2, 2, 341, 342, 5, 20, 11, 2, 342, 13, 3, 2, 2, 2, 343, 344,
	5, 20, 11, 2, 344, 15, 3, 2, 2, 2, 345, 346, 5, 24, 13, 2, 346, 17, 3,
	2, 2, 2, 347, 348, 5, 24, 13, 2, 348, 19, 3, 2, 2, 2, 349, 350, 7, 76,
	2, 2, 350, 351, 5, 24, 13, 2, 351, 21, 3, 2, 2, 2, 352, 353, 7, 47, 2,
	2, 353, 354, 7, 76, 2, 2, 354, 369, 5, 24, 13, 2, 355, 356, 7, 47, 2, 2,
	356, 357, 7, 76, 2, 2, 357, 364, 7, 7, 2, 2, 358, 359, 7, 76, 2, 2, 359,
	360, 5, 24, 13, 2, 360, 361, 7, 5, 2, 2, 361, 363, 3, 2, 2, 2, 362, 358,
	3, 2, 2, 2, 363, 366, 3, 2, 2, 2, 364, 362, 3, 2, 2, 2, 364, 365, 3, 2,
	2, 2, 365, 367, 3, 2, 2, 2, 366, 364, 3, 2, 2, 2, 367, 369, 7, 8, 2, 2,
	368, 352, 3, 2, 2, 2, 368, 355, 3, 2, 2, 2, 369, 23, 3, 2, 2, 2, 370, 389,
	7, 76, 2, 2, 371, 389, 5, 54, 28, 2, 372, 389, 5, 26, 14, 2, 373, 374,
	7, 9, 2, 2, 374, 377, 7, 63, 2, 2, 375, 378, 7, 76, 2, 2, 376, 378, 5,
	54, 28, 2, 377, 375, 3, 2, 2, 2, 377, 376, 3, 2, 2, 2, 378, 379, 3, 2,
	2, 2, 379, 380, 7, 5, 2, 2, 380, 381, 5, 24, 13, 2, 381, 382, 7, 60, 2,
	2, 382, 389, 3, 2, 2, 2, 383, 384, 7, 10, 2, 2, 384, 385, 7, 63, 2, 2,
	385, 386, 5, 24, 13, 2, 386, 387, 7, 60, 2, 2, 387, 389, 3, 2, 2, 2, 388,
	370, 3, 2, 2, 2, 388, 371, 3, 2, 2, 2, 388, 372, 3, 2, 2, 2, 388, 373,
	3, 2, 2, 2, 388, 383, 3, 2, 2, 2, 389, 25, 3, 2, 2, 2, 390, 391, 7, 46,
	2, 2, 391, 392, 7, 4, 2, 2, 392, 397, 5, 16, 9, 2, 393, 394, 7, 5, 2, 2,
	394, 396, 5, 16, 9, 2, 395, 393, 3, 2, 2, 2, 396, 399, 3, 2, 2, 2, 397,
	395, 3, 2, 2, 2, 397, 398, 3, 2, 2, 2, 398, 400, 3, 2, 2, 2, 399, 397,
	3, 2, 2, 2, 400, 402, 7, 6, 2, 2, 401, 403, 5, 18, 10, 2, 402, 401, 3,
	2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 447, 3, 2, 2, 2, 404, 405, 7, 46, 2,
	2, 405, 406, 7, 4, 2, 2, 406, 408, 7, 6, 2, 2, 407, 409, 5, 18, 10, 2,
	408, 407, 3, 2, 2, 2, 408, 409, 3, 2, 2, 2, 409, 447, 3, 2, 2, 2, 410,
	411, 7, 46, 2, 2, 411, 412, 7, 4, 2, 2, 412, 417, 5, 16, 9, 2, 413, 414,
	7, 5, 2, 2, 414, 416, 5, 16, 9, 2, 415, 413, 3, 2, 2, 2, 416, 419, 3, 2,
	2, 2, 417, 415, 3, 2, 2, 2, 417, 418, 3, 2, 2, 2, 418, 420, 3, 2, 2, 2,
	419, 417, 3, 2, 2, 2, 420, 421, 7, 6, 2, 2, 421, 422, 7, 4, 2, 2, 422,
	427, 5, 18, 10, 2, 423, 424, 7, 5, 2, 2, 424, 426, 5, 18, 10, 2, 425, 423,
	3, 2, 2, 2, 426, 429, 3, 2, 2, 2, 427, 425, 3, 2, 2, 2, 427, 428, 3, 2,
	2, 2, 428, 430, 3, 2, 2, 2, 429, 427, 3, 2, 2, 2, 430, 431, 7, 6, 2, 2,
	431, 447, 3, 2, 2, 2, 432, 433, 7, 46, 2, 2, 433, 434, 7, 4, 2, 2, 434,
	435, 7, 6, 2, 2, 435, 436, 7, 4, 2, 2, 436, 441, 5, 18, 10, 2, 437, 438,
	7, 5, 2, 2, 438, 440, 5, 18, 10, 2, 439, 437, 3, 2, 2, 2, 440, 443, 3,
	2, 2, 2, 441, 439, 3, 2, 2, 2, 441, 442, 3, 2, 2, 2, 442, 444, 3, 2, 2,
	2, 443, 441, 3, 2, 2, 2, 444, 445, 7, 6, 2, 2, 445, 447, 3, 2, 2, 2, 446,
	390, 3, 2, 2, 2, 446, 404, 3, 2, 2, 2, 446, 410, 3, 2, 2, 2, 446, 432,
	3, 2, 2, 2, 447, 27, 3, 2, 2, 2, 448, 449, 7, 47, 2, 2, 449, 450, 7, 11,
	2, 2, 450, 451, 7, 76, 2, 2, 451, 457, 7, 7, 2, 2, 452, 453, 7, 76, 2,
	2, 453, 454, 7, 73, 2, 2, 454, 456, 7, 5, 2, 2, 455, 452, 3, 2, 2, 2, 456,
	459, 3, 2, 2, 2, 457, 455, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 460,
	3, 2, 2, 2, 459, 457, 3, 2, 2, 2, 460, 461, 7, 8, 2, 2, 461, 29, 3, 2,
	2, 2, 462, 467, 5, 32, 17, 2, 463, 464, 5, 38, 20, 2, 464, 465, 7, 3, 2,
	2, 465, 467, 3, 2, 2, 2, 466, 462, 3, 2, 2, 2, 466, 463, 3, 2, 2, 2, 467,
	31, 3, 2, 2, 2, 468, 469, 7, 39, 2, 2, 469, 470, 7, 4, 2, 2, 470, 471,
	5, 52, 27, 2, 471, 472, 7, 6, 2, 2, 472, 478, 5, 36, 19, 2, 473, 476, 7,
	40, 2, 2, 474, 477, 5, 36, 19, 2, 475, 477, 5, 32, 17, 2, 476, 474, 3,
	2, 2, 2, 476, 475, 3, 2, 2, 2, 477, 479, 3, 2, 2, 2, 478, 473, 3, 2, 2,
	2, 478, 479, 3, 2, 2, 2, 479, 542, 3, 2, 2, 2, 480, 481, 7, 41, 2, 2, 481,
	482, 7, 4, 2, 2, 482, 483, 5, 52, 27, 2, 483, 484, 7, 6, 2, 2, 484, 490,
	7, 7, 2, 2, 485, 486, 7, 42, 2, 2, 486, 487, 5, 62, 32, 2, 487, 488, 7,
	12, 2, 2, 488, 489, 5, 36, 19, 2, 489, 491, 3, 2, 2, 2, 490, 485, 3, 2,
	2, 2, 491, 492, 3, 2, 2, 2, 492, 490, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2,
	493, 494, 3, 2, 2, 2, 494, 495, 7, 8, 2, 2, 495, 542, 3, 2, 2, 2, 496,
	497, 7, 36, 2, 2, 497, 498, 7, 4, 2, 2, 498, 499, 7, 76, 2, 2, 499, 500,
	7, 13, 2, 2, 500, 501, 5, 34, 18, 2, 501, 502, 7, 6, 2, 2, 502, 503, 5,
	36, 19, 2, 503, 542, 3, 2, 2, 2, 504, 505, 7, 36, 2, 2, 505, 506, 7, 4,
	2, 2, 506, 507, 7, 76, 2, 2, 507, 508, 7, 5, 2, 2, 508, 509, 7, 76, 2,
	2, 509, 510, 7, 13, 2, 2, 510, 511, 5, 34, 18, 2, 511, 512, 7, 6, 2, 2,
	512, 513, 5, 36, 19, 2, 513, 542, 3, 2, 2, 2, 514, 515, 7, 36, 2, 2, 515,
	516, 7, 4, 2, 2, 516, 517, 5, 38, 20, 2, 517, 518, 7, 3, 2, 2, 518, 519,
	5, 52, 27, 2, 519, 520, 7, 3, 2, 2, 520, 521, 5, 40, 21, 2, 521, 522, 7,
	6, 2, 2, 522, 523, 5, 36, 19, 2, 523, 542, 3, 2, 2, 2, 524, 525, 7, 37,
	2, 2, 525, 542, 7, 3, 2, 2, 526, 527, 7, 38, 2, 2, 527, 542, 7, 3, 2, 2,
	528, 529, 7, 43, 2, 2, 529, 542, 7, 3, 2, 2, 530, 531, 7, 43, 2, 2, 531,
	536, 5, 52, 27, 2, 532, 533, 7, 5, 2, 2, 533, 535, 5, 52, 27, 2, 534, 532,
	3, 2, 2, 2, 535, 538, 3, 2, 2, 2, 536, 534, 3, 2, 2, 2, 536, 537, 3, 2,
	2, 2, 537, 539, 3, 2, 2, 2, 538, 536, 3, 2, 2, 2, 539, 540, 7, 3, 2, 2,
	540, 542, 3, 2, 2, 2, 541, 468, 3, 2, 2, 2, 541, 480, 3, 2, 2, 2, 541,
	496, 3, 2, 2, 2, 541, 504, 3, 2, 2, 2, 541, 514, 3, 2, 2, 2, 541, 524,
	3, 2, 2, 2, 541, 526, 3, 2, 2, 2, 541, 528, 3, 2, 2, 2, 541, 530, 3, 2,
	2, 2, 542, 33, 3, 2, 2, 2, 543, 544, 5, 52, 27, 2, 544, 35, 3, 2, 2, 2,
	545, 549, 7, 7, 2, 2, 546, 548, 5, 30, 16, 2, 547, 546, 3, 2, 2, 2, 548,
	551, 3, 2, 2, 2, 549, 547, 3, 2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 552,
	3, 2, 2, 2, 551, 549, 3, 2, 2, 2, 552, 553, 7, 8, 2, 2, 553, 37, 3, 2,
	2, 2, 554, 558, 5, 40, 21, 2, 555, 558, 5, 66, 34, 2, 556, 558, 5, 68,
	35, 2, 557, 554, 3, 2, 2, 2, 557, 555, 3, 2, 2, 2, 557, 556, 3, 2, 2, 2,
	558, 39, 3, 2, 2, 2, 559, 560, 5, 42, 22, 2, 560, 41, 3, 2, 2, 2, 561,
	591, 5, 52, 27, 2, 562, 567, 5, 44, 23, 2, 563, 564, 7, 5, 2, 2, 564, 566,
	5, 44, 23, 2, 565, 563, 3, 2, 2, 2, 566, 569, 3, 2, 2, 2, 567, 565, 3,
	2, 2, 2, 567, 568, 3, 2, 2, 2, 568, 570, 3, 2, 2, 2, 569, 567, 3, 2, 2,
	2, 570, 571, 7, 68, 2, 2, 571, 572, 5, 46, 24, 2, 572, 591, 3, 2, 2, 2,
	573, 578, 5, 44, 23, 2, 574, 575, 7, 5, 2, 2, 575, 577, 5, 44, 23, 2, 576,
	574, 3, 2, 2, 2, 577, 580, 3, 2, 2, 2, 578, 576, 3, 2, 2, 2, 578, 579,
	3, 2, 2, 2, 579, 581, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 581, 582, 7, 68,
	2, 2, 582, 587, 5, 52, 27, 2, 583, 584, 7, 5, 2, 2, 584, 586, 5, 52, 27,
	2, 585, 583, 3, 2, 2, 2, 586, 589, 3, 2, 2, 2, 587, 585, 3, 2, 2, 2, 587,
	588, 3, 2, 2, 2, 588, 591, 3, 2, 2, 2, 589, 587, 3, 2, 2, 2, 590, 561,
	3, 2, 2, 2, 590, 562, 3, 2, 2, 2, 590, 573, 3, 2, 2, 2, 591, 43, 3, 2,
	2, 2, 592, 593, 5, 46, 24, 2, 593, 45, 3, 2, 2, 2, 594, 595, 8, 24, 1,
	2, 595, 598, 7, 76, 2, 2, 596, 598, 7, 18, 2, 2, 597, 594, 3, 2, 2, 2,
	597, 596, 3, 2, 2, 2, 598, 655, 3, 2, 2, 2, 599, 600, 12, 11, 2, 2, 600,
	601, 7, 77, 2, 2, 601, 654, 7, 76, 2, 2, 602, 603, 12, 10, 2, 2, 603, 604,
	7, 14, 2, 2, 604, 605, 5, 48, 25, 2, 605, 606, 7, 15, 2, 2, 606, 654, 3,
	2, 2, 2, 607, 608, 12, 9, 2, 2, 608, 609, 7, 16, 2, 2, 609, 610, 5, 52,
	27, 2, 610, 611, 7, 17, 2, 2, 611, 654, 3, 2, 2, 2, 612, 613, 12, 8, 2,
	2, 613, 614, 7, 16, 2, 2, 614, 619, 5, 50, 26, 2, 615, 616, 7, 5, 2, 2,
	616, 618, 5, 50, 26, 2, 617, 615, 3, 2, 2, 2, 618, 621, 3, 2, 2, 2, 619,
	617, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2, 620, 622, 3, 2, 2, 2, 621, 619,
	3, 2, 2, 2, 622, 623, 7, 17, 2, 2, 623, 654, 3, 2, 2, 2, 624, 625, 12,
	7, 2, 2, 625, 626, 7, 16, 2, 2, 626, 627, 7, 16, 2, 2, 627, 632, 5, 52,
	27, 2, 628, 629, 7, 5, 2, 2, 629, 631, 5, 52, 27, 2, 630, 628, 3, 2, 2,
	2, 631, 634, 3, 2, 2, 2, 632, 630, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633,
	635, 3, 2, 2, 2, 634, 632, 3, 2, 2, 2, 635, 636, 7, 17, 2, 2, 636, 637,
	7, 17, 2, 2, 637, 654, 3, 2, 2, 2, 638, 639, 12, 6, 2, 2, 639, 640, 7,
	4, 2, 2, 640, 645, 5, 52, 27, 2, 641, 642, 7, 5, 2, 2, 642, 644, 5, 52,
	27, 2, 643, 641, 3, 2, 2, 2, 644, 647, 3, 2, 2, 2, 645, 643, 3, 2, 2, 2,
	645, 646, 3, 2, 2, 2, 646, 648, 3, 2, 2, 2, 647, 645, 3, 2, 2, 2, 648,
	649, 7, 6, 2, 2, 649, 654, 3, 2, 2, 2, 650, 651, 12, 5, 2, 2, 651, 652,
	7, 4, 2, 2, 652, 654, 7, 6, 2, 2, 653, 599, 3, 2, 2, 2, 653, 602, 3, 2,
	2, 2, 653, 607, 3, 2, 2, 2, 653, 612, 3, 2, 2, 2, 653, 624, 3, 2, 2, 2,
	653, 638, 3, 2, 2, 2, 653, 650, 3, 2, 2, 2, 654, 657, 3, 2, 2, 2, 655,
	653, 3, 2, 2, 2, 655, 656, 3, 2, 2, 2, 656, 47, 3, 2, 2, 2, 657, 655, 3,
	2, 2, 2, 658, 659, 5, 52, 27, 2, 659, 49, 3, 2, 2, 2, 660, 661, 5, 52,
	27, 2, 661, 662, 7, 12, 2, 2, 662, 663, 5, 52, 27, 2, 663, 664, 7, 12,
	2, 2, 664, 665, 5, 52, 27, 2, 665, 677, 3, 2, 2, 2, 666, 667, 5, 52, 27,
	2, 667, 668, 7, 12, 2, 2, 668, 669, 5, 52, 27, 2, 669, 677, 3, 2, 2, 2,
	670, 671, 5, 52, 27, 2, 671, 672, 7, 12, 2, 2, 672, 677, 3, 2, 2, 2, 673,
	677, 5, 52, 27, 2, 674, 675, 7, 12, 2, 2, 675, 677, 5, 52, 27, 2, 676,
	660, 3, 2, 2, 2, 676, 666, 3, 2, 2, 2, 676, 670, 3, 2, 2, 2, 676, 673,
	3, 2, 2, 2, 676, 674, 3, 2, 2, 2, 677, 51, 3, 2, 2, 2, 678, 679, 8, 27,
	1, 2, 679, 680, 7, 4, 2, 2, 680, 681, 5, 52, 27, 2, 681, 682, 7, 6, 2,
	2, 682, 704, 3, 2, 2, 2, 683, 684, 9, 2, 2, 2, 684, 704, 5, 46, 24, 2,
	685, 686, 9, 3, 2, 2, 686, 704, 5, 52, 27, 17, 687, 688, 5, 46, 24, 2,
	688, 689, 9, 2, 2, 2, 689, 704, 3, 2, 2, 2, 690, 691, 5, 44, 23, 2, 691,
	692, 9, 4, 2, 2, 692, 693, 5, 52, 27, 9, 693, 704, 3, 2, 2, 2, 694, 695,
	5, 44, 23, 2, 695, 696, 7, 68, 2, 2, 696, 697, 5, 58, 30, 2, 697, 704,
	3, 2, 2, 2, 698, 704, 5, 62, 32, 2, 699, 704, 5, 46, 24, 2, 700, 704, 5,
	8, 5, 2, 701, 704, 5, 56, 29, 2, 702, 704, 5, 64, 33, 2, 703, 678, 3, 2,
	2, 2, 703, 683, 3, 2, 2, 2, 703, 685, 3, 2, 2, 2, 703, 687, 3, 2, 2, 2,
	703, 690, 3, 2, 2, 2, 703, 694, 3, 2, 2, 2, 703, 698, 3, 2, 2, 2, 703,
	699, 3, 2, 2, 2, 703, 700, 3, 2, 2, 2, 703, 701, 3, 2, 2, 2, 703, 702,
	3, 2, 2, 2, 704, 725, 3, 2, 2, 2, 705, 706, 12, 15, 2, 2, 706, 707, 7,
	50, 2, 2, 707, 724, 5, 52, 27, 15, 708, 709, 12, 14, 2, 2, 709, 710, 9,
	5, 2, 2, 710, 724, 5, 52, 27, 15, 711, 712, 12, 13, 2, 2, 712, 713, 9,
	6, 2, 2, 713, 724, 5, 52, 27, 14, 714, 715, 12, 12, 2, 2, 715, 716, 9,
	7, 2, 2, 716, 724, 5, 52, 27, 13, 717, 718, 12, 11, 2, 2, 718, 719, 7,
	65, 2, 2, 719, 724, 5, 52, 27, 12, 720, 721, 12, 10, 2, 2, 721, 722, 7,
	66, 2, 2, 722, 724, 5, 52, 27, 11, 723, 705, 3, 2, 2, 2, 723, 708, 3, 2,
	2, 2, 723, 711, 3, 2, 2, 2, 723, 714, 3, 2, 2, 2, 723, 717, 3, 2, 2, 2,
	723, 720, 3, 2, 2, 2, 724, 727, 3, 2, 2, 2, 725, 723, 3, 2, 2, 2, 725,
	726, 3, 2, 2, 2, 726, 53, 3, 2, 2, 2, 727, 725, 3, 2, 2, 2, 728, 729, 9,
	8, 2, 2, 729, 55, 3, 2, 2, 2, 730, 731, 7, 19, 2, 2, 731, 732, 7, 4, 2,
	2, 732, 733, 5, 46, 24, 2, 733, 734, 7, 5, 2, 2, 734, 735, 5, 52, 27, 2,
	735, 736, 7, 6, 2, 2, 736, 817, 3, 2, 2, 2, 737, 738, 7, 20, 2, 2, 738,
	739, 7, 4, 2, 2, 739, 740, 5, 46, 24, 2, 740, 741, 7, 5, 2, 2, 741, 742,
	5, 52, 27, 2, 742, 743, 7, 6, 2, 2, 743, 817, 3, 2, 2, 2, 744, 745, 7,
	21, 2, 2, 745, 746, 7, 4, 2, 2, 746, 747, 5, 46, 24, 2, 747, 748, 7, 5,
	2, 2, 748, 749, 5, 52, 27, 2, 749, 750, 7, 6, 2, 2, 750, 817, 3, 2, 2,
	2, 751, 752, 7, 22, 2, 2, 752, 753, 7, 4, 2, 2, 753, 754, 5, 46, 24, 2,
	754, 755, 7, 6, 2, 2, 755, 817, 3, 2, 2, 2, 756, 757, 7, 23, 2, 2, 757,
	758, 7, 4, 2, 2, 758, 759, 5, 46, 24, 2, 759, 760, 7, 6, 2, 2, 760, 817,
	3, 2, 2, 2, 761, 762, 7, 24, 2, 2, 762, 763, 7, 4, 2, 2, 763, 764, 5, 46,
	24, 2, 764, 765, 7, 6, 2, 2, 765, 817, 3, 2, 2, 2, 766, 767, 7, 25, 2,
	2, 767, 768, 7, 4, 2, 2, 768, 769, 5, 52, 27, 2, 769, 770, 7, 6, 2, 2,
	770, 817, 3, 2, 2, 2, 771, 772, 7, 26, 2, 2, 772, 773, 7, 4, 2, 2, 773,
	774, 5, 52, 27, 2, 774, 775, 7, 6, 2, 2, 775, 817, 3, 2, 2, 2, 776, 777,
	7, 27, 2, 2, 777, 778, 7, 4, 2, 2, 778, 779, 5, 52, 27, 2, 779, 780, 7,
	6, 2, 2, 780, 817, 3, 2, 2, 2, 781, 782, 7, 28, 2, 2, 782, 783, 7, 4, 2,
	2, 783, 784, 5, 52, 27, 2, 784, 785, 7, 6, 2, 2, 785, 817, 3, 2, 2, 2,
	786, 787, 7, 29, 2, 2, 787, 788, 7, 4, 2, 2, 788, 789, 5, 52, 27, 2, 789,
	790, 7, 6, 2, 2, 790, 817, 3, 2, 2, 2, 791, 792, 7, 30, 2, 2, 792, 793,
	7, 4, 2, 2, 793, 794, 5, 52, 27, 2, 794, 795, 7, 6, 2, 2, 795, 817, 3,
	2, 2, 2, 796, 797, 7, 31, 2, 2, 797, 798, 7, 4, 2, 2, 798, 799, 5, 52,
	27, 2, 799, 800, 7, 6, 2, 2, 800, 817, 3, 2, 2, 2, 801, 802, 7, 32, 2,
	2, 802, 803, 7, 4, 2, 2, 803, 804, 5, 52, 27, 2, 804, 805, 7, 6, 2, 2,
	805, 817, 3, 2, 2, 2, 806, 807, 7, 33, 2, 2, 807, 808, 7, 4, 2, 2, 808,
	809, 5, 52, 27, 2, 809, 810, 7, 6, 2, 2, 810, 817, 3, 2, 2, 2, 811, 812,
	7, 34, 2, 2, 812, 813, 7, 4, 2, 2, 813, 814, 5, 52, 27, 2, 814, 815, 7,
	6, 2, 2, 815, 817, 3, 2, 2, 2, 816, 730, 3, 2, 2, 2, 816, 737, 3, 2, 2,
	2, 816, 744, 3, 2, 2, 2, 816, 751, 3, 2, 2, 2, 816, 756, 3, 2, 2, 2, 816,
	761, 3, 2, 2, 2, 816, 766, 3, 2, 2, 2, 816, 771, 3, 2, 2, 2, 816, 776,
	3, 2, 2, 2, 816, 781, 3, 2, 2, 2, 816, 786, 3, 2, 2, 2, 816, 791, 3, 2,
	2, 2, 816, 796, 3, 2, 2, 2, 816, 801, 3, 2, 2, 2, 816, 806, 3, 2, 2, 2,
	816, 811, 3, 2, 2, 2, 817, 57, 3, 2, 2, 2, 818, 819, 5, 60, 31, 2, 819,
	59, 3, 2, 2, 2, 820, 821, 7, 16, 2, 2, 821, 826, 5, 60, 31, 2, 822, 823,
	7, 5, 2, 2, 823, 825, 5, 60, 31, 2, 824, 822, 3, 2, 2, 2, 825, 828, 3,
	2, 2, 2, 826, 824, 3, 2, 2, 2, 826, 827, 3, 2, 2, 2, 827, 829, 3, 2, 2,
	2, 828, 826, 3, 2, 2, 2, 829, 830, 7, 17, 2, 2, 830, 867, 3, 2, 2, 2, 831,
	832, 7, 7, 2, 2, 832, 833, 7, 76, 2, 2, 833, 834, 7, 4, 2, 2, 834, 835,
	5, 60, 31, 2, 835, 844, 7, 6, 2, 2, 836, 837, 7, 5, 2, 2, 837, 838, 7,
	76, 2, 2, 838, 839, 7, 4, 2, 2, 839, 840, 5, 60, 31, 2, 840, 841, 7, 6,
	2, 2, 841, 843, 3, 2, 2, 2, 842, 836, 3, 2, 2, 2, 843, 846, 3, 2, 2, 2,
	844, 842, 3, 2, 2, 2, 844, 845, 3, 2, 2, 2, 845, 847, 3, 2, 2, 2, 846,
	844, 3, 2, 2, 2, 847, 848, 7, 8, 2, 2, 848, 867, 3, 2, 2, 2, 849, 850,
	7, 7, 2, 2, 850, 851, 5, 60, 31, 2, 851, 852, 7, 12, 2, 2, 852, 860, 5,
	60, 31, 2, 853, 854, 7, 5, 2, 2, 854, 855, 5, 60, 31, 2, 855, 856, 7, 12,
	2, 2, 856, 857, 5, 60, 31, 2, 857, 859, 3, 2, 2, 2, 858, 853, 3, 2, 2,
	2, 859, 862, 3, 2, 2, 2, 860, 858, 3, 2, 2, 2, 860, 861, 3, 2, 2, 2, 861,
	863, 3, 2, 2, 2, 862, 860, 3, 2, 2, 2, 863, 864, 7, 8, 2, 2, 864, 867,
	3, 2, 2, 2, 865, 867, 5, 52, 27, 2, 866, 820, 3, 2, 2, 2, 866, 831, 3,
	2, 2, 2, 866, 849, 3, 2, 2, 2, 866, 865, 3, 2, 2, 2, 867, 61, 3, 2, 2,
	2, 868, 874, 7, 73, 2, 2, 869, 874, 7, 74, 2, 2, 870, 874, 7, 48, 2, 2,
	871, 874, 7, 49, 2, 2, 872, 874, 7, 75, 2, 2, 873, 868, 3, 2, 2, 2, 873,
	869, 3, 2, 2, 2, 873, 870, 3, 2, 2, 2, 873, 871, 3, 2, 2, 2, 873, 872,
	3, 2, 2, 2, 874, 63, 3, 2, 2, 2, 875, 876, 7, 35, 2, 2, 876, 877, 5, 24,
	13, 2, 877, 878, 7, 4, 2, 2, 878, 879, 7, 6, 2, 2, 879, 894, 3, 2, 2, 2,
	880, 881, 7, 35, 2, 2, 881, 882, 5, 24, 13, 2, 882, 883, 7, 4, 2, 2, 883,
	888, 5, 52, 27, 2, 884, 885, 7, 5, 2, 2, 885, 887, 5, 52, 27, 2, 886, 884,
	3, 2, 2, 2, 887, 890, 3, 2, 2, 2, 888, 886, 3, 2, 2, 2, 888, 889, 3, 2,
	2, 2, 889, 891, 3, 2, 2, 2, 890, 888, 3, 2, 2, 2, 891, 892, 7, 6, 2, 2,
	892, 894, 3, 2, 2, 2, 893, 875, 3, 2, 2, 2, 893, 880, 3, 2, 2, 2, 894,
	65, 3, 2, 2, 2, 895, 896, 7, 44, 2, 2, 896, 897, 7, 76, 2, 2, 897, 905,
	5, 24, 13, 2, 898, 899, 7, 44, 2, 2, 899, 900, 7, 76, 2, 2, 900, 901, 5,
	24, 13, 2, 901, 902, 7, 68, 2, 2, 902, 903, 5, 52, 27, 2, 903, 905, 3,
	2, 2, 2, 904, 895, 3, 2, 2, 2, 904, 898, 3, 2, 2, 2, 905, 67, 3, 2, 2,
	2, 906, 907, 7, 45, 2, 2, 907, 908, 7, 76, 2, 2, 908, 916, 5, 24, 13, 2,
	909, 910, 7, 45, 2, 2, 910, 911, 7, 76, 2, 2, 911, 912, 5, 24, 13, 2, 912,
	913, 7, 68, 2, 2, 913, 914, 5, 52, 27, 2, 914, 916, 3, 2, 2, 2, 915, 906,
	3, 2, 2, 2, 915, 909, 3, 2, 2, 2, 916, 69, 3, 2, 2, 2, 74, 73, 81, 91,
	96, 105, 116, 126, 142, 156, 161, 170, 181, 191, 207, 213, 222, 227, 235,
	245, 255, 270, 283, 288, 296, 306, 316, 331, 337, 364, 368, 377, 388, 397,
	402, 408, 417, 427, 441, 446, 457, 466, 476, 478, 492, 536, 541, 549, 557,
	567, 578, 587, 590, 597, 619, 632, 645, 653, 655, 676, 703, 723, 725, 816,
	826, 844, 860, 866, 873, 888, 893, 904, 915,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "';'", "'('", "','", "')'", "'{'", "'}'", "'map'", "'slice'", "'enum'",
	"':'", "'in'", "'[?('", "')]'", "'['", "']'", "'@'", "'pushBack'", "'pushFront'",
	"'delete'", "'enumString'", "'len'", "'typeof'", "'uint32'", "'uint64'",
	"'int32'", "'int64'", "'float32'", "'float64'", "'string'", "'bytes'",
	"'bool'", "'uint8'", "'new'", "'for'", "'break'", "'continue'", "'if'",
	"'else'", "'switch'", "'case'", "'return'", "'var'", "'local'", "'func'",
	"'type'", "", "'nil'", "'**'", "'*'", "'/'", "'%'", "'+'", "'-'", "'++'",
	"'--'", "'=='", "'!='", "'>'", "'>='", "'<='", "'<'", "'=~'", "'&&'", "'||'",
	"'!'", "'='", "'+='", "'-='", "'*='", "'/='", "", "", "", "", "'.'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "PUSHBACK",
	"PUSHFRONT", "DELETE", "ENUMSTRING", "LEN", "TYPEOF", "UINT32", "UINT64",
	"INT32", "INT64", "FLOAT32", "FLOAT64", "STRING", "BYTES", "BOOL", "UINT8",
	"NEW", "FOR", "BREAK", "CONTINUE", "IF", "ELSE", "SWITCH", "CASE", "RETURN",
	"VAR", "LOCAL", "FUNCTION", "TYPEDEF", "BOOLLITERAL", "NULL", "POW", "MUL",
	"DIV", "MOD", "ADD", "SUB", "UNARYADD", "UNARYSUB", "EQ", "INEQ", "GT",
	"GE", "LE", "LT", "REGEX", "AND", "OR", "NOT", "ASSIGN", "ADDEQUAL", "SUBEQUAL",
	"MULEQUAL", "DIVEQUAL", "INT", "FLOAT", "STRINGLITERAL", "NAME", "DOT",
	"WHITESPACE", "COMMENT",
}

var ruleNames = []string{
	"program", "statement", "functiondef", "lambda", "closure", "inparam",
	"outparam", "intypename", "returntypename", "param", "typedef", "typename",
	"functionTypeName", "enumdef", "execution", "control", "collection", "block",
	"line", "restoreStack", "keepStack", "lhs", "variable", "filter", "indexs",
	"expr", "basicTypeName", "builtin", "initializationListBegin", "initializationList",
	"constant", "constructor", "vardef", "localdef",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type goscriptParser struct {
	*antlr.BaseParser
}

func NewgoscriptParser(input antlr.TokenStream) *goscriptParser {
	this := new(goscriptParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "goscript.g4"

	return this
}

// goscriptParser tokens.
const (
	goscriptParserEOF           = antlr.TokenEOF
	goscriptParserT__0          = 1
	goscriptParserT__1          = 2
	goscriptParserT__2          = 3
	goscriptParserT__3          = 4
	goscriptParserT__4          = 5
	goscriptParserT__5          = 6
	goscriptParserT__6          = 7
	goscriptParserT__7          = 8
	goscriptParserT__8          = 9
	goscriptParserT__9          = 10
	goscriptParserT__10         = 11
	goscriptParserT__11         = 12
	goscriptParserT__12         = 13
	goscriptParserT__13         = 14
	goscriptParserT__14         = 15
	goscriptParserT__15         = 16
	goscriptParserPUSHBACK      = 17
	goscriptParserPUSHFRONT     = 18
	goscriptParserDELETE        = 19
	goscriptParserENUMSTRING    = 20
	goscriptParserLEN           = 21
	goscriptParserTYPEOF        = 22
	goscriptParserUINT32        = 23
	goscriptParserUINT64        = 24
	goscriptParserINT32         = 25
	goscriptParserINT64         = 26
	goscriptParserFLOAT32       = 27
	goscriptParserFLOAT64       = 28
	goscriptParserSTRING        = 29
	goscriptParserBYTES         = 30
	goscriptParserBOOL          = 31
	goscriptParserUINT8         = 32
	goscriptParserNEW           = 33
	goscriptParserFOR           = 34
	goscriptParserBREAK         = 35
	goscriptParserCONTINUE      = 36
	goscriptParserIF            = 37
	goscriptParserELSE          = 38
	goscriptParserSWITCH        = 39
	goscriptParserCASE          = 40
	goscriptParserRETURN        = 41
	goscriptParserVAR           = 42
	goscriptParserLOCAL         = 43
	goscriptParserFUNCTION      = 44
	goscriptParserTYPEDEF       = 45
	goscriptParserBOOLLITERAL   = 46
	goscriptParserNULL          = 47
	goscriptParserPOW           = 48
	goscriptParserMUL           = 49
	goscriptParserDIV           = 50
	goscriptParserMOD           = 51
	goscriptParserADD           = 52
	goscriptParserSUB           = 53
	goscriptParserUNARYADD      = 54
	goscriptParserUNARYSUB      = 55
	goscriptParserEQ            = 56
	goscriptParserINEQ          = 57
	goscriptParserGT            = 58
	goscriptParserGE            = 59
	goscriptParserLE            = 60
	goscriptParserLT            = 61
	goscriptParserREGEX         = 62
	goscriptParserAND           = 63
	goscriptParserOR            = 64
	goscriptParserNOT           = 65
	goscriptParserASSIGN        = 66
	goscriptParserADDEQUAL      = 67
	goscriptParserSUBEQUAL      = 68
	goscriptParserMULEQUAL      = 69
	goscriptParserDIVEQUAL      = 70
	goscriptParserINT           = 71
	goscriptParserFLOAT         = 72
	goscriptParserSTRINGLITERAL = 73
	goscriptParserNAME          = 74
	goscriptParserDOT           = 75
	goscriptParserWHITESPACE    = 76
	goscriptParserCOMMENT       = 77
)

// goscriptParser rules.
const (
	goscriptParserRULE_program                 = 0
	goscriptParserRULE_statement               = 1
	goscriptParserRULE_functiondef             = 2
	goscriptParserRULE_lambda                  = 3
	goscriptParserRULE_closure                 = 4
	goscriptParserRULE_inparam                 = 5
	goscriptParserRULE_outparam                = 6
	goscriptParserRULE_intypename              = 7
	goscriptParserRULE_returntypename          = 8
	goscriptParserRULE_param                   = 9
	goscriptParserRULE_typedef                 = 10
	goscriptParserRULE_typename                = 11
	goscriptParserRULE_functionTypeName        = 12
	goscriptParserRULE_enumdef                 = 13
	goscriptParserRULE_execution               = 14
	goscriptParserRULE_control                 = 15
	goscriptParserRULE_collection              = 16
	goscriptParserRULE_block                   = 17
	goscriptParserRULE_line                    = 18
	goscriptParserRULE_restoreStack            = 19
	goscriptParserRULE_keepStack               = 20
	goscriptParserRULE_lhs                     = 21
	goscriptParserRULE_variable                = 22
	goscriptParserRULE_filter                  = 23
	goscriptParserRULE_indexs                  = 24
	goscriptParserRULE_expr                    = 25
	goscriptParserRULE_basicTypeName           = 26
	goscriptParserRULE_builtin                 = 27
	goscriptParserRULE_initializationListBegin = 28
	goscriptParserRULE_initializationList      = 29
	goscriptParserRULE_constant                = 30
	goscriptParserRULE_constructor             = 31
	goscriptParserRULE_vardef                  = 32
	goscriptParserRULE_localdef                = 33
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (p *goscriptParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, goscriptParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(69)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__1)|(1<<goscriptParserT__15)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserTYPEDEF-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
		{
			p.SetState(68)
			p.Statement()
		}

		p.SetState(71)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) CopyFrom(ctx *StatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type EnumDefContext struct {
	*StatementContext
}

func NewEnumDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EnumDefContext {
	var p = new(EnumDefContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *EnumDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDefContext) Enumdef() IEnumdefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumdefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumdefContext)
}

func (s *EnumDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterEnumDef(s)
	}
}

func (s *EnumDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitEnumDef(s)
	}
}

type TypeDefContext struct {
	*StatementContext
}

func NewTypeDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefContext {
	var p = new(TypeDefContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *TypeDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefContext) Typedef() ITypedefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypedefContext)
}

func (s *TypeDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDef(s)
	}
}

func (s *TypeDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDef(s)
	}
}

type FuncDefContext struct {
	*StatementContext
}

func NewFuncDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FuncDefContext {
	var p = new(FuncDefContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *FuncDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncDefContext) Functiondef() IFunctiondefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefContext)
}

func (s *FuncDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFuncDef(s)
	}
}

func (s *FuncDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFuncDef(s)
	}
}

type RunContext struct {
	*StatementContext
}

func NewRunContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RunContext {
	var p = new(RunContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RunContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RunContext) Execution() IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *RunContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRun(s)
	}
}

func (s *RunContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRun(s)
	}
}

func (p *goscriptParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, goscriptParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(79)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFuncDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(73)
			p.Functiondef()
		}

	case 2:
		localctx = NewTypeDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(74)
			p.Typedef()
		}
		{
			p.SetState(75)
			p.Match(goscriptParserT__0)
		}

	case 3:
		localctx = NewEnumDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(77)
			p.Enumdef()
		}

	case 4:
		localctx = NewRunContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(78)
			p.Execution()
		}

	}

	return localctx
}

// IFunctiondefContext is an interface to support dynamic dispatch.
type IFunctiondefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiondefContext differentiates from other interfaces.
	IsFunctiondefContext()
}

type FunctiondefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiondefContext() *FunctiondefContext {
	var p = new(FunctiondefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functiondef
	return p
}

func (*FunctiondefContext) IsFunctiondefContext() {}

func NewFunctiondefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiondefContext {
	var p = new(FunctiondefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functiondef

	return p
}

func (s *FunctiondefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiondefContext) CopyFrom(ctx *FunctiondefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctiondefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiondefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionDefContext struct {
	*FunctiondefContext
}

func NewFunctionDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionDefContext {
	var p = new(FunctionDefContext)

	p.FunctiondefContext = NewEmptyFunctiondefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctiondefContext))

	return p
}

func (s *FunctionDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionDefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *FunctionDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *FunctionDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *FunctionDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionDefContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *FunctionDefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *FunctionDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionDef(s)
	}
}

func (s *FunctionDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionDef(s)
	}
}

func (p *goscriptParser) Functiondef() (localctx IFunctiondefContext) {
	localctx = NewFunctiondefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, goscriptParserRULE_functiondef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(211)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(81)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(82)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(83)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(84)
			p.Inparam()
		}
		p.SetState(89)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(85)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(86)
				p.Inparam()
			}

			p.SetState(91)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(92)
			p.Match(goscriptParserT__3)
		}
		p.SetState(94)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(93)
				p.Returntypename()
			}

		}
		{
			p.SetState(96)
			p.Closure()
		}

	case 2:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(98)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(99)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(100)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(101)
			p.Match(goscriptParserT__3)
		}
		p.SetState(103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(102)
				p.Returntypename()
			}

		}
		{
			p.SetState(105)
			p.Block()
		}

	case 3:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(106)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(107)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(108)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(109)
			p.Inparam()
		}
		p.SetState(114)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(110)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(111)
				p.Inparam()
			}

			p.SetState(116)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(117)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(118)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(119)
			p.Returntypename()
		}
		p.SetState(124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(120)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(121)
				p.Returntypename()
			}

			p.SetState(126)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(127)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(128)
			p.Closure()
		}

	case 4:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(130)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(131)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(132)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(133)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(134)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(135)
			p.Returntypename()
		}
		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(136)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(137)
				p.Returntypename()
			}

			p.SetState(142)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(143)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(144)
			p.Closure()
		}

	case 5:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(146)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(147)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(148)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(149)
			p.Inparam()
		}
		p.SetState(154)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(150)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(151)
				p.Inparam()
			}

			p.SetState(156)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(157)
			p.Match(goscriptParserT__3)
		}
		p.SetState(159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(158)
				p.Outparam()
			}

		}
		{
			p.SetState(161)
			p.Closure()
		}

	case 6:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(163)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(164)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(165)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(166)
			p.Match(goscriptParserT__3)
		}
		p.SetState(168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(167)
				p.Typename()
			}

		}
		{
			p.SetState(170)
			p.Closure()
		}

	case 7:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(171)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(172)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(173)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(174)
			p.Inparam()
		}
		p.SetState(179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(175)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(176)
				p.Inparam()
			}

			p.SetState(181)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(182)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(183)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(184)
			p.Outparam()
		}
		p.SetState(189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(185)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(186)
				p.Outparam()
			}

			p.SetState(191)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(192)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(193)
			p.Closure()
		}

	case 8:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(195)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(196)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(197)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(198)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(199)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(200)
			p.Outparam()
		}
		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(201)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(202)
				p.Outparam()
			}

			p.SetState(207)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(208)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(209)
			p.Closure()
		}

	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) CopyFrom(ctx *LambdaContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LambdaDefContext struct {
	*LambdaContext
}

func NewLambdaDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaDefContext {
	var p = new(LambdaDefContext)

	p.LambdaContext = NewEmptyLambdaContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LambdaContext))

	return p
}

func (s *LambdaDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *LambdaDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *LambdaDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *LambdaDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *LambdaDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *LambdaDefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *LambdaDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLambdaDef(s)
	}
}

func (s *LambdaDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLambdaDef(s)
	}
}

func (p *goscriptParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, goscriptParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(335)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(213)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(214)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(215)
			p.Inparam()
		}
		p.SetState(220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(216)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(217)
				p.Inparam()
			}

			p.SetState(222)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(223)
			p.Match(goscriptParserT__3)
		}
		p.SetState(225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(224)
				p.Returntypename()
			}

		}
		{
			p.SetState(227)
			p.Closure()
		}

	case 2:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(229)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(230)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(231)
			p.Match(goscriptParserT__3)
		}
		p.SetState(233)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(232)
				p.Returntypename()
			}

		}
		{
			p.SetState(235)
			p.Closure()
		}

	case 3:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(236)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(237)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(238)
			p.Inparam()
		}
		p.SetState(243)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(239)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(240)
				p.Inparam()
			}

			p.SetState(245)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(246)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(247)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(248)
			p.Returntypename()
		}
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(249)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(250)
				p.Returntypename()
			}

			p.SetState(255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(256)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(257)
			p.Closure()
		}

	case 4:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(259)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(260)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(261)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(262)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(263)
			p.Returntypename()
		}
		p.SetState(268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(264)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(265)
				p.Returntypename()
			}

			p.SetState(270)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(271)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(272)
			p.Closure()
		}

	case 5:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(274)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(275)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(276)
			p.Inparam()
		}
		p.SetState(281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(277)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(278)
				p.Inparam()
			}

			p.SetState(283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(284)
			p.Match(goscriptParserT__3)
		}
		p.SetState(286)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserNAME {
			{
				p.SetState(285)
				p.Outparam()
			}

		}
		{
			p.SetState(288)
			p.Closure()
		}

	case 6:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(290)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(291)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(292)
			p.Match(goscriptParserT__3)
		}
		p.SetState(294)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(293)
				p.Typename()
			}

		}
		{
			p.SetState(296)
			p.Closure()
		}

	case 7:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(297)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(298)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(299)
			p.Inparam()
		}
		p.SetState(304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(300)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(301)
				p.Inparam()
			}

			p.SetState(306)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(307)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(308)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(309)
			p.Outparam()
		}
		p.SetState(314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(310)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(311)
				p.Outparam()
			}

			p.SetState(316)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(317)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(318)
			p.Closure()
		}

	case 8:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(320)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(321)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(322)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(323)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(324)
			p.Outparam()
		}
		p.SetState(329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(325)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(326)
				p.Outparam()
			}

			p.SetState(331)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(332)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(333)
			p.Closure()
		}

	}

	return localctx
}

// IClosureContext is an interface to support dynamic dispatch.
type IClosureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureContext differentiates from other interfaces.
	IsClosureContext()
}

type ClosureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureContext() *ClosureContext {
	var p = new(ClosureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_closure
	return p
}

func (*ClosureContext) IsClosureContext() {}

func NewClosureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureContext {
	var p = new(ClosureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_closure

	return p
}

func (s *ClosureContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ClosureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterClosure(s)
	}
}

func (s *ClosureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitClosure(s)
	}
}

func (p *goscriptParser) Closure() (localctx IClosureContext) {
	localctx = NewClosureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, goscriptParserRULE_closure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(337)
		p.Block()
	}

	return localctx
}

// IInparamContext is an interface to support dynamic dispatch.
type IInparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInparamContext differentiates from other interfaces.
	IsInparamContext()
}

type InparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInparamContext() *InparamContext {
	var p = new(InparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_inparam
	return p
}

func (*InparamContext) IsInparamContext() {}

func NewInparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InparamContext {
	var p = new(InparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_inparam

	return p
}

func (s *InparamContext) GetParser() antlr.Parser { return s.parser }

func (s *InparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *InparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInparam(s)
	}
}

func (s *InparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInparam(s)
	}
}

func (p *goscriptParser) Inparam() (localctx IInparamContext) {
	localctx = NewInparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, goscriptParserRULE_inparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)
		p.Param()
	}

	return localctx
}

// IOutparamContext is an interface to support dynamic dispatch.
type IOutparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutparamContext differentiates from other interfaces.
	IsOutparamContext()
}

type OutparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutparamContext() *OutparamContext {
	var p = new(OutparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_outparam
	return p
}

func (*OutparamContext) IsOutparamContext() {}

func NewOutparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OutparamContext {
	var p = new(OutparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_outparam

	return p
}

func (s *OutparamContext) GetParser() antlr.Parser { return s.parser }

func (s *OutparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *OutparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OutparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOutparam(s)
	}
}

func (s *OutparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOutparam(s)
	}
}

func (p *goscriptParser) Outparam() (localctx IOutparamContext) {
	localctx = NewOutparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, goscriptParserRULE_outparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(341)
		p.Param()
	}

	return localctx
}

// IIntypenameContext is an interface to support dynamic dispatch.
type IIntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameContext differentiates from other interfaces.
	IsIntypenameContext()
}

type IntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameContext() *IntypenameContext {
	var p = new(IntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypename
	return p
}

func (*IntypenameContext) IsIntypenameContext() {}

func NewIntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameContext {
	var p = new(IntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypename

	return p
}

func (s *IntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *IntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypename(s)
	}
}

func (s *IntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypename(s)
	}
}

func (p *goscriptParser) Intypename() (localctx IIntypenameContext) {
	localctx = NewIntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, goscriptParserRULE_intypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(343)
		p.Typename()
	}

	return localctx
}

// IReturntypenameContext is an interface to support dynamic dispatch.
type IReturntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameContext differentiates from other interfaces.
	IsReturntypenameContext()
}

type ReturntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameContext() *ReturntypenameContext {
	var p = new(ReturntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypename
	return p
}

func (*ReturntypenameContext) IsReturntypenameContext() {}

func NewReturntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameContext {
	var p = new(ReturntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypename

	return p
}

func (s *ReturntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ReturntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypename(s)
	}
}

func (s *ReturntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypename(s)
	}
}

func (p *goscriptParser) Returntypename() (localctx IReturntypenameContext) {
	localctx = NewReturntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, goscriptParserRULE_returntypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(345)
		p.Typename()
	}

	return localctx
}

// IParamContext is an interface to support dynamic dispatch.
type IParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParamContext differentiates from other interfaces.
	IsParamContext()
}

type ParamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamContext() *ParamContext {
	var p = new(ParamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_param
	return p
}

func (*ParamContext) IsParamContext() {}

func NewParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamContext {
	var p = new(ParamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_param

	return p
}

func (s *ParamContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *ParamContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterParam(s)
	}
}

func (s *ParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitParam(s)
	}
}

func (p *goscriptParser) Param() (localctx IParamContext) {
	localctx = NewParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, goscriptParserRULE_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(347)
		p.Match(goscriptParserNAME)
	}
	{
		p.SetState(348)
		p.Typename()
	}

	return localctx
}

// ITypedefContext is an interface to support dynamic dispatch.
type ITypedefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefContext differentiates from other interfaces.
	IsTypedefContext()
}

type TypedefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefContext() *TypedefContext {
	var p = new(TypedefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typedef
	return p
}

func (*TypedefContext) IsTypedefContext() {}

func NewTypedefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefContext {
	var p = new(TypedefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typedef

	return p
}

func (s *TypedefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefContext) CopyFrom(ctx *TypedefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypedefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeDefComplexContext struct {
	*TypedefContext
}

func NewTypeDefComplexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefComplexContext {
	var p = new(TypeDefComplexContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefComplexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefComplexContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefComplexContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *TypeDefComplexContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *TypeDefComplexContext) AllTypename() []ITypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypenameContext)(nil)).Elem())
	var tst = make([]ITypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypenameContext)
		}
	}

	return tst
}

func (s *TypeDefComplexContext) Typename(i int) ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *TypeDefComplexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefComplex(s)
	}
}

func (s *TypeDefComplexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefComplex(s)
	}
}

type TypeDefAliasContext struct {
	*TypedefContext
}

func NewTypeDefAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefAliasContext {
	var p = new(TypeDefAliasContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefAliasContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefAliasContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *TypeDefAliasContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *TypeDefAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefAlias(s)
	}
}

func (s *TypeDefAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefAlias(s)
	}
}

func (p *goscriptParser) Typedef() (localctx ITypedefContext) {
	localctx = NewTypedefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, goscriptParserRULE_typedef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTypeDefAliasContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(350)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(351)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(352)
			p.Typename()
		}

	case 2:
		localctx = NewTypeDefComplexContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(353)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(354)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(355)
			p.Match(goscriptParserT__4)
		}
		p.SetState(362)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserNAME {
			{
				p.SetState(356)
				p.Match(goscriptParserNAME)
			}
			{
				p.SetState(357)
				p.Typename()
			}
			{
				p.SetState(358)
				p.Match(goscriptParserT__2)
			}

			p.SetState(364)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(365)
			p.Match(goscriptParserT__5)
		}

	}

	return localctx
}

// ITypenameContext is an interface to support dynamic dispatch.
type ITypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameContext differentiates from other interfaces.
	IsTypenameContext()
}

type TypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameContext() *TypenameContext {
	var p = new(TypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typename
	return p
}

func (*TypenameContext) IsTypenameContext() {}

func NewTypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameContext {
	var p = new(TypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typename

	return p
}

func (s *TypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameContext) CopyFrom(ctx *TypenameContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MapTypeNameContext struct {
	*TypenameContext
}

func NewMapTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameContext {
	var p = new(MapTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *MapTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *MapTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *MapTypeNameContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *MapTypeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *MapTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeName(s)
	}
}

func (s *MapTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeName(s)
	}
}

type FunctionTypeContext struct {
	*TypenameContext
}

func NewFunctionTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

type SimpleTypeNameContext struct {
	*TypenameContext
}

func NewSimpleTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SimpleTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *SimpleTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeName(s)
	}
}

func (s *SimpleTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeName(s)
	}
}

type SliceTypeNameContext struct {
	*TypenameContext
}

func NewSliceTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameContext {
	var p = new(SliceTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SliceTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *SliceTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *SliceTypeNameContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *SliceTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeName(s)
	}
}

func (s *SliceTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeName(s)
	}
}

func (p *goscriptParser) Typename() (localctx ITypenameContext) {
	localctx = NewTypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, goscriptParserRULE_typename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(386)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserNAME:
		localctx = NewSimpleTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(368)
			p.Match(goscriptParserNAME)
		}

	case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8:
		localctx = NewSimpleTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(369)
			p.BasicTypeName()
		}

	case goscriptParserFUNCTION:
		localctx = NewFunctionTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(370)
			p.FunctionTypeName()
		}

	case goscriptParserT__6:
		localctx = NewMapTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(371)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(372)
			p.Match(goscriptParserLT)
		}
		p.SetState(375)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserNAME:
			{
				p.SetState(373)
				p.Match(goscriptParserNAME)
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8:
			{
				p.SetState(374)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(377)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(378)
			p.Typename()
		}
		{
			p.SetState(379)
			p.Match(goscriptParserGT)
		}

	case goscriptParserT__7:
		localctx = NewSliceTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(381)
			p.Match(goscriptParserT__7)
		}
		{
			p.SetState(382)
			p.Match(goscriptParserLT)
		}
		{
			p.SetState(383)
			p.Typename()
		}
		{
			p.SetState(384)
			p.Match(goscriptParserGT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameContext) AllIntypename() []IIntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameContext)(nil)).Elem())
	var tst = make([]IIntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Intypename(i int) IIntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameContext)
}

func (s *FunctionTypeNameContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *goscriptParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, goscriptParserRULE_functionTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(388)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(389)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(390)
			p.Intypename()
		}
		p.SetState(395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(391)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(392)
				p.Intypename()
			}

			p.SetState(397)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(398)
			p.Match(goscriptParserT__3)
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(399)
				p.Returntypename()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(402)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(403)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(404)
			p.Match(goscriptParserT__3)
		}
		p.SetState(406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-7)&-(0x1f+1)) == 0 && ((1<<uint((_la-7)))&((1<<(goscriptParserT__6-7))|(1<<(goscriptParserT__7-7))|(1<<(goscriptParserUINT32-7))|(1<<(goscriptParserUINT64-7))|(1<<(goscriptParserINT32-7))|(1<<(goscriptParserINT64-7))|(1<<(goscriptParserFLOAT32-7))|(1<<(goscriptParserFLOAT64-7))|(1<<(goscriptParserSTRING-7))|(1<<(goscriptParserBYTES-7))|(1<<(goscriptParserBOOL-7))|(1<<(goscriptParserUINT8-7)))) != 0) || _la == goscriptParserFUNCTION || _la == goscriptParserNAME {
			{
				p.SetState(405)
				p.Returntypename()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(408)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(409)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(410)
			p.Intypename()
		}
		p.SetState(415)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(411)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(412)
				p.Intypename()
			}

			p.SetState(417)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(418)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(419)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(420)
			p.Returntypename()
		}
		p.SetState(425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(421)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(422)
				p.Returntypename()
			}

			p.SetState(427)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(428)
			p.Match(goscriptParserT__3)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(430)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(431)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(432)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(433)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(434)
			p.Returntypename()
		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(435)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(436)
				p.Returntypename()
			}

			p.SetState(441)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(442)
			p.Match(goscriptParserT__3)
		}

	}

	return localctx
}

// IEnumdefContext is an interface to support dynamic dispatch.
type IEnumdefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumdefContext differentiates from other interfaces.
	IsEnumdefContext()
}

type EnumdefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumdefContext() *EnumdefContext {
	var p = new(EnumdefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_enumdef
	return p
}

func (*EnumdefContext) IsEnumdefContext() {}

func NewEnumdefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumdefContext {
	var p = new(EnumdefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_enumdef

	return p
}

func (s *EnumdefContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumdefContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *EnumdefContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *EnumdefContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *EnumdefContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserINT)
}

func (s *EnumdefContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, i)
}

func (s *EnumdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumdefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterEnumdef(s)
	}
}

func (s *EnumdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitEnumdef(s)
	}
}

func (p *goscriptParser) Enumdef() (localctx IEnumdefContext) {
	localctx = NewEnumdefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, goscriptParserRULE_enumdef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(446)
		p.Match(goscriptParserTYPEDEF)
	}
	{
		p.SetState(447)
		p.Match(goscriptParserT__8)
	}
	{
		p.SetState(448)
		p.Match(goscriptParserNAME)
	}
	{
		p.SetState(449)
		p.Match(goscriptParserT__4)
	}
	p.SetState(455)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == goscriptParserNAME {
		{
			p.SetState(450)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(451)
			p.Match(goscriptParserINT)
		}
		{
			p.SetState(452)
			p.Match(goscriptParserT__2)
		}

		p.SetState(457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(458)
		p.Match(goscriptParserT__5)
	}

	return localctx
}

// IExecutionContext is an interface to support dynamic dispatch.
type IExecutionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecutionContext differentiates from other interfaces.
	IsExecutionContext()
}

type ExecutionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecutionContext() *ExecutionContext {
	var p = new(ExecutionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_execution
	return p
}

func (*ExecutionContext) IsExecutionContext() {}

func NewExecutionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecutionContext {
	var p = new(ExecutionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_execution

	return p
}

func (s *ExecutionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecutionContext) CopyFrom(ctx *ExecutionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExecutionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecutionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LineProgramContext struct {
	*ExecutionContext
}

func NewLineProgramContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LineProgramContext {
	var p = new(LineProgramContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *LineProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineProgramContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *LineProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLineProgram(s)
	}
}

func (s *LineProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLineProgram(s)
	}
}

type CtrlContext struct {
	*ExecutionContext
}

func NewCtrlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CtrlContext {
	var p = new(CtrlContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *CtrlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtrlContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *CtrlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCtrl(s)
	}
}

func (s *CtrlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCtrl(s)
	}
}

func (p *goscriptParser) Execution() (localctx IExecutionContext) {
	localctx = NewExecutionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, goscriptParserRULE_execution)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(464)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
		localctx = NewCtrlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(460)
			p.Control()
		}

	case goscriptParserT__1, goscriptParserT__15, goscriptParserPUSHBACK, goscriptParserPUSHFRONT, goscriptParserDELETE, goscriptParserENUMSTRING, goscriptParserLEN, goscriptParserTYPEOF, goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserNEW, goscriptParserVAR, goscriptParserLOCAL, goscriptParserFUNCTION, goscriptParserBOOLLITERAL, goscriptParserNULL, goscriptParserSUB, goscriptParserUNARYADD, goscriptParserUNARYSUB, goscriptParserNOT, goscriptParserINT, goscriptParserFLOAT, goscriptParserSTRINGLITERAL, goscriptParserNAME:
		localctx = NewLineProgramContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(461)
			p.Line()
		}
		{
			p.SetState(462)
			p.Match(goscriptParserT__0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControlContext is an interface to support dynamic dispatch.
type IControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlContext differentiates from other interfaces.
	IsControlContext()
}

type ControlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlContext() *ControlContext {
	var p = new(ControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_control
	return p
}

func (*ControlContext) IsControlContext() {}

func NewControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlContext {
	var p = new(ControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_control

	return p
}

func (s *ControlContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlContext) CopyFrom(ctx *ControlContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReturnVoidContext struct {
	*ControlContext
}

func NewReturnVoidContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnVoidContext {
	var p = new(ReturnVoidContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnVoidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnVoidContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnVoidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVoid(s)
	}
}

func (s *ReturnVoidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVoid(s)
	}
}

type ForInSliceContext struct {
	*ControlContext
}

func NewForInSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInSliceContext {
	var p = new(ForInSliceContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInSliceContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInSliceContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *ForInSliceContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInSliceContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInSlice(s)
	}
}

func (s *ForInSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInSlice(s)
	}
}

type SwitchContext struct {
	*ControlContext
}

func NewSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SwitchContext {
	var p = new(SwitchContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *SwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *SwitchContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SwitchContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserCASE)
}

func (s *SwitchContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, i)
}

func (s *SwitchContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *SwitchContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *SwitchContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *SwitchContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSwitch(s)
	}
}

func (s *SwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSwitch(s)
	}
}

type ReturnValContext struct {
	*ControlContext
}

func NewReturnValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnValContext {
	var p = new(ReturnValContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnValContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnValContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ReturnValContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVal(s)
	}
}

func (s *ReturnValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVal(s)
	}
}

type ForInMapContext struct {
	*ControlContext
}

func NewForInMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInMapContext {
	var p = new(ForInMapContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInMapContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInMapContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *ForInMapContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *ForInMapContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInMapContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInMap(s)
	}
}

func (s *ForInMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInMap(s)
	}
}

type ForContext struct {
	*ControlContext
}

func NewForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForContext {
	var p = new(ForContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *ForContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *ForContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFor(s)
	}
}

func (s *ForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFor(s)
	}
}

type BreakContext struct {
	*ControlContext
}

func NewBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BreakContext {
	var p = new(BreakContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *BreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *BreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBreak(s)
	}
}

func (s *BreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBreak(s)
	}
}

type ContinueContext struct {
	*ControlContext
}

func NewContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ContinueContext {
	var p = new(ContinueContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *ContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterContinue(s)
	}
}

func (s *ContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitContinue(s)
	}
}

type IfContext struct {
	*ControlContext
}

func NewIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfContext {
	var p = new(IfContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *IfContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *IfContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *IfContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIf(s)
	}
}

func (s *IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIf(s)
	}
}

func (p *goscriptParser) Control() (localctx IControlContext) {
	localctx = NewControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, goscriptParserRULE_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(539)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(466)
			p.Match(goscriptParserIF)
		}
		{
			p.SetState(467)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(468)
			p.expr(0)
		}
		{
			p.SetState(469)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(470)
			p.Block()
		}
		p.SetState(476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == goscriptParserELSE {
			{
				p.SetState(471)
				p.Match(goscriptParserELSE)
			}
			p.SetState(474)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case goscriptParserT__4:
				{
					p.SetState(472)
					p.Block()
				}

			case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
				{
					p.SetState(473)
					p.Control()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	case 2:
		localctx = NewSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(478)
			p.Match(goscriptParserSWITCH)
		}
		{
			p.SetState(479)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(480)
			p.expr(0)
		}
		{
			p.SetState(481)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(482)
			p.Match(goscriptParserT__4)
		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserCASE {
			{
				p.SetState(483)
				p.Match(goscriptParserCASE)
			}
			{
				p.SetState(484)
				p.Constant()
			}
			{
				p.SetState(485)
				p.Match(goscriptParserT__9)
			}
			{
				p.SetState(486)
				p.Block()
			}

			p.SetState(490)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(492)
			p.Match(goscriptParserT__5)
		}

	case 3:
		localctx = NewForInSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(494)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(495)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(496)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(497)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(498)
			p.Collection()
		}
		{
			p.SetState(499)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(500)
			p.Block()
		}

	case 4:
		localctx = NewForInMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(502)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(503)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(504)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(505)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(506)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(507)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(508)
			p.Collection()
		}
		{
			p.SetState(509)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(510)
			p.Block()
		}

	case 5:
		localctx = NewForContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(512)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(513)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(514)
			p.Line()
		}
		{
			p.SetState(515)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(516)
			p.expr(0)
		}
		{
			p.SetState(517)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(518)
			p.RestoreStack()
		}
		{
			p.SetState(519)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(520)
			p.Block()
		}

	case 6:
		localctx = NewBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(522)
			p.Match(goscriptParserBREAK)
		}
		{
			p.SetState(523)
			p.Match(goscriptParserT__0)
		}

	case 7:
		localctx = NewContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(524)
			p.Match(goscriptParserCONTINUE)
		}
		{
			p.SetState(525)
			p.Match(goscriptParserT__0)
		}

	case 8:
		localctx = NewReturnVoidContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(526)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(527)
			p.Match(goscriptParserT__0)
		}

	case 9:
		localctx = NewReturnValContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(528)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(529)
			p.expr(0)
		}
		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(530)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(531)
				p.expr(0)
			}

			p.SetState(536)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(537)
			p.Match(goscriptParserT__0)
		}

	}

	return localctx
}

// ICollectionContext is an interface to support dynamic dispatch.
type ICollectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionContext differentiates from other interfaces.
	IsCollectionContext()
}

type CollectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionContext() *CollectionContext {
	var p = new(CollectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_collection
	return p
}

func (*CollectionContext) IsCollectionContext() {}

func NewCollectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionContext {
	var p = new(CollectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_collection

	return p
}

func (s *CollectionContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CollectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCollection(s)
	}
}

func (s *CollectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCollection(s)
	}
}

func (p *goscriptParser) Collection() (localctx ICollectionContext) {
	localctx = NewCollectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, goscriptParserRULE_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(541)
		p.expr(0)
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *BlockContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *goscriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, goscriptParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.Match(goscriptParserT__4)
	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__1)|(1<<goscriptParserT__15)|(1<<goscriptParserPUSHBACK)|(1<<goscriptParserPUSHFRONT)|(1<<goscriptParserDELETE)|(1<<goscriptParserENUMSTRING)|(1<<goscriptParserLEN)|(1<<goscriptParserTYPEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserUINT8-32))|(1<<(goscriptParserNEW-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
		{
			p.SetState(544)
			p.Execution()
		}

		p.SetState(549)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(550)
		p.Match(goscriptParserT__5)
	}

	return localctx
}

// ILineContext is an interface to support dynamic dispatch.
type ILineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineContext differentiates from other interfaces.
	IsLineContext()
}

type LineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineContext() *LineContext {
	var p = new(LineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_line
	return p
}

func (*LineContext) IsLineContext() {}

func NewLineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineContext {
	var p = new(LineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_line

	return p
}

func (s *LineContext) GetParser() antlr.Parser { return s.parser }

func (s *LineContext) CopyFrom(ctx *LineContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RestoreStackSpContext struct {
	*LineContext
}

func NewRestoreStackSpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RestoreStackSpContext {
	var p = new(RestoreStackSpContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *RestoreStackSpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackSpContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *RestoreStackSpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStackSp(s)
	}
}

func (s *RestoreStackSpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStackSp(s)
	}
}

type LocalVarDefContext struct {
	*LineContext
}

func NewLocalVarDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LocalVarDefContext {
	var p = new(LocalVarDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *LocalVarDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocalVarDefContext) Localdef() ILocaldefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocaldefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocaldefContext)
}

func (s *LocalVarDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLocalVarDef(s)
	}
}

func (s *LocalVarDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLocalVarDef(s)
	}
}

type GlobalVarDefContext struct {
	*LineContext
}

func NewGlobalVarDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GlobalVarDefContext {
	var p = new(GlobalVarDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *GlobalVarDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalVarDefContext) Vardef() IVardefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVardefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVardefContext)
}

func (s *GlobalVarDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterGlobalVarDef(s)
	}
}

func (s *GlobalVarDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitGlobalVarDef(s)
	}
}

func (p *goscriptParser) Line() (localctx ILineContext) {
	localctx = NewLineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, goscriptParserRULE_line)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(555)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserT__1, goscriptParserT__15, goscriptParserPUSHBACK, goscriptParserPUSHFRONT, goscriptParserDELETE, goscriptParserENUMSTRING, goscriptParserLEN, goscriptParserTYPEOF, goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserNEW, goscriptParserFUNCTION, goscriptParserBOOLLITERAL, goscriptParserNULL, goscriptParserSUB, goscriptParserUNARYADD, goscriptParserUNARYSUB, goscriptParserNOT, goscriptParserINT, goscriptParserFLOAT, goscriptParserSTRINGLITERAL, goscriptParserNAME:
		localctx = NewRestoreStackSpContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(552)
			p.RestoreStack()
		}

	case goscriptParserVAR:
		localctx = NewGlobalVarDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(553)
			p.Vardef()
		}

	case goscriptParserLOCAL:
		localctx = NewLocalVarDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(554)
			p.Localdef()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRestoreStackContext is an interface to support dynamic dispatch.
type IRestoreStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestoreStackContext differentiates from other interfaces.
	IsRestoreStackContext()
}

type RestoreStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestoreStackContext() *RestoreStackContext {
	var p = new(RestoreStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_restoreStack
	return p
}

func (*RestoreStackContext) IsRestoreStackContext() {}

func NewRestoreStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestoreStackContext {
	var p = new(RestoreStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_restoreStack

	return p
}

func (s *RestoreStackContext) GetParser() antlr.Parser { return s.parser }

func (s *RestoreStackContext) KeepStack() IKeepStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeepStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeepStackContext)
}

func (s *RestoreStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestoreStackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStack(s)
	}
}

func (s *RestoreStackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStack(s)
	}
}

func (p *goscriptParser) RestoreStack() (localctx IRestoreStackContext) {
	localctx = NewRestoreStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, goscriptParserRULE_restoreStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(557)
		p.KeepStack()
	}

	return localctx
}

// IKeepStackContext is an interface to support dynamic dispatch.
type IKeepStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeepStackContext differentiates from other interfaces.
	IsKeepStackContext()
}

type KeepStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeepStackContext() *KeepStackContext {
	var p = new(KeepStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_keepStack
	return p
}

func (*KeepStackContext) IsKeepStackContext() {}

func NewKeepStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeepStackContext {
	var p = new(KeepStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_keepStack

	return p
}

func (s *KeepStackContext) GetParser() antlr.Parser { return s.parser }

func (s *KeepStackContext) CopyFrom(ctx *KeepStackContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *KeepStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeepStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprEntryContext struct {
	*KeepStackContext
}

func NewExprEntryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprEntryContext {
	var p = new(ExprEntryContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *ExprEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprEntryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterExprEntry(s)
	}
}

func (s *ExprEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitExprEntry(s)
	}
}

type FunctionAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewFunctionAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionAssignContext {
	var p = new(FunctionAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *FunctionAssignContext) GetOp() antlr.Token { return s.op }

func (s *FunctionAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *FunctionAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionAssignContext) AllLhs() []ILhsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILhsContext)(nil)).Elem())
	var tst = make([]ILhsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILhsContext)
		}
	}

	return tst
}

func (s *FunctionAssignContext) Lhs(i int) ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *FunctionAssignContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *FunctionAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *FunctionAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionAssign(s)
	}
}

func (s *FunctionAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionAssign(s)
	}
}

type MultiAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewMultiAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultiAssignContext {
	var p = new(MultiAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *MultiAssignContext) GetOp() antlr.Token { return s.op }

func (s *MultiAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *MultiAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiAssignContext) AllLhs() []ILhsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILhsContext)(nil)).Elem())
	var tst = make([]ILhsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILhsContext)
		}
	}

	return tst
}

func (s *MultiAssignContext) Lhs(i int) ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *MultiAssignContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MultiAssignContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MultiAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *MultiAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMultiAssign(s)
	}
}

func (s *MultiAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMultiAssign(s)
	}
}

func (p *goscriptParser) KeepStack() (localctx IKeepStackContext) {
	localctx = NewKeepStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, goscriptParserRULE_keepStack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(588)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprEntryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(559)
			p.expr(0)
		}

	case 2:
		localctx = NewFunctionAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(560)
			p.Lhs()
		}
		p.SetState(565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(561)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(562)
				p.Lhs()
			}

			p.SetState(567)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(568)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*FunctionAssignContext).op = _m
		}
		{
			p.SetState(569)
			p.variable(0)
		}

	case 3:
		localctx = NewMultiAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(571)
			p.Lhs()
		}
		p.SetState(576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(572)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(573)
				p.Lhs()
			}

			p.SetState(578)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(579)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*MultiAssignContext).op = _m
		}
		{
			p.SetState(580)
			p.expr(0)
		}
		p.SetState(585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(581)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(582)
				p.expr(0)
			}

			p.SetState(587)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILhsContext is an interface to support dynamic dispatch.
type ILhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLhsContext differentiates from other interfaces.
	IsLhsContext()
}

type LhsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLhsContext() *LhsContext {
	var p = new(LhsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lhs
	return p
}

func (*LhsContext) IsLhsContext() {}

func NewLhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LhsContext {
	var p = new(LhsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lhs

	return p
}

func (s *LhsContext) GetParser() antlr.Parser { return s.parser }

func (s *LhsContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *LhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLhs(s)
	}
}

func (s *LhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLhs(s)
	}
}

func (p *goscriptParser) Lhs() (localctx ILhsContext) {
	localctx = NewLhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, goscriptParserRULE_lhs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(590)
		p.variable(0)
	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) CopyFrom(ctx *VariableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SliceFilterContext struct {
	*VariableContext
}

func NewSliceFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceFilterContext {
	var p = new(SliceFilterContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SliceFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFilterContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SliceFilterContext) Filter() IFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterContext)
}

func (s *SliceFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceFilter(s)
	}
}

func (s *SliceFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceFilter(s)
	}
}

type DirectCallContext struct {
	*VariableContext
}

func NewDirectCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DirectCallContext {
	var p = new(DirectCallContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *DirectCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectCallContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *DirectCallContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DirectCallContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DirectCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterDirectCall(s)
	}
}

func (s *DirectCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitDirectCall(s)
	}
}

type VariableNameContext struct {
	*VariableContext
}

func NewVariableNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableNameContext {
	var p = new(VariableNameContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *VariableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *VariableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVariableName(s)
	}
}

func (s *VariableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVariableName(s)
	}
}

type SelectContext struct {
	*VariableContext
}

func NewSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectContext {
	var p = new(SelectContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SelectContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *SelectContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSelect(s)
	}
}

type IndexContext struct {
	*VariableContext
}

func NewIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexContext {
	var p = new(IndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *IndexContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndex(s)
	}
}

type MapMultiIndexContext struct {
	*VariableContext
}

func NewMapMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapMultiIndexContext {
	var p = new(MapMultiIndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *MapMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapMultiIndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *MapMultiIndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MapMultiIndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MapMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapMultiIndex(s)
	}
}

func (s *MapMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapMultiIndex(s)
	}
}

type SliceMultiIndexContext struct {
	*VariableContext
}

func NewSliceMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceMultiIndexContext {
	var p = new(SliceMultiIndexContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *SliceMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceMultiIndexContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *SliceMultiIndexContext) AllIndexs() []IIndexsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexsContext)(nil)).Elem())
	var tst = make([]IIndexsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexsContext)
		}
	}

	return tst
}

func (s *SliceMultiIndexContext) Indexs(i int) IIndexsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexsContext)
}

func (s *SliceMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceMultiIndex(s)
	}
}

func (s *SliceMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceMultiIndex(s)
	}
}

func (p *goscriptParser) Variable() (localctx IVariableContext) {
	return p.variable(0)
}

func (p *goscriptParser) variable(_p int) (localctx IVariableContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 44
	p.EnterRecursionRule(localctx, 44, goscriptParserRULE_variable, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(595)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserNAME:
		localctx = NewVariableNameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(593)
			p.Match(goscriptParserNAME)
		}

	case goscriptParserT__15:
		localctx = NewVariableNameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(594)
			p.Match(goscriptParserT__15)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(651)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSelectContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(597)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(598)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(599)
					p.Match(goscriptParserNAME)
				}

			case 2:
				localctx = NewSliceFilterContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(600)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(601)
					p.Match(goscriptParserT__11)
				}
				{
					p.SetState(602)
					p.Filter()
				}
				{
					p.SetState(603)
					p.Match(goscriptParserT__12)
				}

			case 3:
				localctx = NewIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(605)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(606)
					p.Match(goscriptParserT__13)
				}
				{
					p.SetState(607)
					p.expr(0)
				}
				{
					p.SetState(608)
					p.Match(goscriptParserT__14)
				}

			case 4:
				localctx = NewSliceMultiIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(610)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(611)
					p.Match(goscriptParserT__13)
				}
				{
					p.SetState(612)
					p.Indexs()
				}
				p.SetState(617)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__2 {
					{
						p.SetState(613)
						p.Match(goscriptParserT__2)
					}
					{
						p.SetState(614)
						p.Indexs()
					}

					p.SetState(619)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(620)
					p.Match(goscriptParserT__14)
				}

			case 5:
				localctx = NewMapMultiIndexContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(622)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(623)
					p.Match(goscriptParserT__13)
				}
				{
					p.SetState(624)
					p.Match(goscriptParserT__13)
				}
				{
					p.SetState(625)
					p.expr(0)
				}
				p.SetState(630)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__2 {
					{
						p.SetState(626)
						p.Match(goscriptParserT__2)
					}
					{
						p.SetState(627)
						p.expr(0)
					}

					p.SetState(632)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(633)
					p.Match(goscriptParserT__14)
				}
				{
					p.SetState(634)
					p.Match(goscriptParserT__14)
				}

			case 6:
				localctx = NewDirectCallContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(636)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(637)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(638)
					p.expr(0)
				}
				p.SetState(643)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__2 {
					{
						p.SetState(639)
						p.Match(goscriptParserT__2)
					}
					{
						p.SetState(640)
						p.expr(0)
					}

					p.SetState(645)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(646)
					p.Match(goscriptParserT__3)
				}

			case 7:
				localctx = NewDirectCallContext(p, NewVariableContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_variable)
				p.SetState(648)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(649)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(650)
					p.Match(goscriptParserT__3)
				}

			}

		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}

	return localctx
}

// IFilterContext is an interface to support dynamic dispatch.
type IFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterContext differentiates from other interfaces.
	IsFilterContext()
}

type FilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterContext() *FilterContext {
	var p = new(FilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_filter
	return p
}

func (*FilterContext) IsFilterContext() {}

func NewFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterContext {
	var p = new(FilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_filter

	return p
}

func (s *FilterContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFilter(s)
	}
}

func (s *FilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFilter(s)
	}
}

func (p *goscriptParser) Filter() (localctx IFilterContext) {
	localctx = NewFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, goscriptParserRULE_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(656)
		p.expr(0)
	}

	return localctx
}

// IIndexsContext is an interface to support dynamic dispatch.
type IIndexsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexsContext differentiates from other interfaces.
	IsIndexsContext()
}

type IndexsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexsContext() *IndexsContext {
	var p = new(IndexsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_indexs
	return p
}

func (*IndexsContext) IsIndexsContext() {}

func NewIndexsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexsContext {
	var p = new(IndexsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_indexs

	return p
}

func (s *IndexsContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexsContext) CopyFrom(ctx *IndexsContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IndexType1Context struct {
	*IndexsContext
}

func NewIndexType1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType1Context {
	var p = new(IndexType1Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType1Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType1Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType1(s)
	}
}

func (s *IndexType1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType1(s)
	}
}

type IndexType3Context struct {
	*IndexsContext
}

func NewIndexType3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType3Context {
	var p = new(IndexType3Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType3Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType3(s)
	}
}

func (s *IndexType3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType3(s)
	}
}

type IndexType2Context struct {
	*IndexsContext
}

func NewIndexType2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType2Context {
	var p = new(IndexType2Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType2Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType2Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType2(s)
	}
}

func (s *IndexType2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType2(s)
	}
}

type IndexType5Context struct {
	*IndexsContext
}

func NewIndexType5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType5Context {
	var p = new(IndexType5Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType5Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType5(s)
	}
}

func (s *IndexType5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType5(s)
	}
}

type IndexType4Context struct {
	*IndexsContext
}

func NewIndexType4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType4Context {
	var p = new(IndexType4Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType4Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType4(s)
	}
}

func (s *IndexType4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType4(s)
	}
}

func (p *goscriptParser) Indexs() (localctx IIndexsContext) {
	localctx = NewIndexsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, goscriptParserRULE_indexs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(674)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIndexType1Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(658)
			p.expr(0)
		}
		{
			p.SetState(659)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(660)
			p.expr(0)
		}
		{
			p.SetState(661)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(662)
			p.expr(0)
		}

	case 2:
		localctx = NewIndexType2Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(664)
			p.expr(0)
		}
		{
			p.SetState(665)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(666)
			p.expr(0)
		}

	case 3:
		localctx = NewIndexType3Context(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(668)
			p.expr(0)
		}
		{
			p.SetState(669)
			p.Match(goscriptParserT__9)
		}

	case 4:
		localctx = NewIndexType4Context(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(671)
			p.expr(0)
		}

	case 5:
		localctx = NewIndexType5Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(672)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(673)
			p.expr(0)
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyFrom(ctx *ExprContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PassContext struct {
	*ExprContext
}

func NewPassContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PassContext {
	var p = new(PassContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *PassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PassContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PassContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PassContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *PassContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *PassContext) Builtin() IBuiltinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBuiltinContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBuiltinContext)
}

func (s *PassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterPass(s)
	}
}

func (s *PassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitPass(s)
	}
}

type ConstructContext struct {
	*ExprContext
}

func NewConstructContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstructContext {
	var p = new(ConstructContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *ConstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructContext) Constructor() IConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorContext)
}

func (s *ConstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstruct(s)
	}
}

func (s *ConstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstruct(s)
	}
}

type BinaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryContext {
	var p = new(BinaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *BinaryContext) GetOp() antlr.Token { return s.op }

func (s *BinaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryContext) Lhs() ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *BinaryContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *BinaryContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BinaryContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *BinaryContext) ADDEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserADDEQUAL, 0)
}

func (s *BinaryContext) SUBEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUBEQUAL, 0)
}

func (s *BinaryContext) MULEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMULEQUAL, 0)
}

func (s *BinaryContext) DIVEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIVEQUAL, 0)
}

func (s *BinaryContext) POW() antlr.TerminalNode {
	return s.GetToken(goscriptParserPOW, 0)
}

func (s *BinaryContext) MUL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMUL, 0)
}

func (s *BinaryContext) DIV() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIV, 0)
}

func (s *BinaryContext) MOD() antlr.TerminalNode {
	return s.GetToken(goscriptParserMOD, 0)
}

func (s *BinaryContext) ADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserADD, 0)
}

func (s *BinaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *BinaryContext) EQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserEQ, 0)
}

func (s *BinaryContext) INEQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserINEQ, 0)
}

func (s *BinaryContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *BinaryContext) GE() antlr.TerminalNode {
	return s.GetToken(goscriptParserGE, 0)
}

func (s *BinaryContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *BinaryContext) LE() antlr.TerminalNode {
	return s.GetToken(goscriptParserLE, 0)
}

func (s *BinaryContext) REGEX() antlr.TerminalNode {
	return s.GetToken(goscriptParserREGEX, 0)
}

func (s *BinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(goscriptParserAND, 0)
}

func (s *BinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(goscriptParserOR, 0)
}

func (s *BinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBinary(s)
	}
}

func (s *BinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBinary(s)
	}
}

type LeftUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewLeftUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LeftUnaryContext {
	var p = new(LeftUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *LeftUnaryContext) GetOp() antlr.Token { return s.op }

func (s *LeftUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *LeftUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftUnaryContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *LeftUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *LeftUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *LeftUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LeftUnaryContext) NOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserNOT, 0)
}

func (s *LeftUnaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *LeftUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLeftUnary(s)
	}
}

func (s *LeftUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLeftUnary(s)
	}
}

type RightUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewRightUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RightUnaryContext {
	var p = new(RightUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RightUnaryContext) GetOp() antlr.Token { return s.op }

func (s *RightUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *RightUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RightUnaryContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *RightUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *RightUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *RightUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRightUnary(s)
	}
}

func (s *RightUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRightUnary(s)
	}
}

type AssignInitializationlistContext struct {
	*ExprContext
	op antlr.Token
}

func NewAssignInitializationlistContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignInitializationlistContext {
	var p = new(AssignInitializationlistContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *AssignInitializationlistContext) GetOp() antlr.Token { return s.op }

func (s *AssignInitializationlistContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignInitializationlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignInitializationlistContext) Lhs() ILhsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILhsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILhsContext)
}

func (s *AssignInitializationlistContext) InitializationListBegin() IInitializationListBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListBeginContext)
}

func (s *AssignInitializationlistContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *AssignInitializationlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAssignInitializationlist(s)
	}
}

func (s *AssignInitializationlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAssignInitializationlist(s)
	}
}

func (p *goscriptParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *goscriptParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 50
	p.EnterRecursionRule(localctx, 50, goscriptParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(677)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(678)
			p.expr(0)
		}
		{
			p.SetState(679)
			p.Match(goscriptParserT__3)
		}

	case 2:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(681)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(682)
			p.variable(0)
		}

	case 3:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(683)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserSUB || _la == goscriptParserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(684)
			p.expr(15)
		}

	case 4:
		localctx = NewRightUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(685)
			p.variable(0)
		}
		{
			p.SetState(686)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RightUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RightUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 5:
		localctx = NewBinaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(688)
			p.Lhs()
		}
		{
			p.SetState(689)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*BinaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(goscriptParserASSIGN-66))|(1<<(goscriptParserADDEQUAL-66))|(1<<(goscriptParserSUBEQUAL-66))|(1<<(goscriptParserMULEQUAL-66))|(1<<(goscriptParserDIVEQUAL-66)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*BinaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(690)
			p.expr(7)
		}

	case 6:
		localctx = NewAssignInitializationlistContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(692)
			p.Lhs()
		}
		{
			p.SetState(693)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*AssignInitializationlistContext).op = _m
		}
		{
			p.SetState(694)
			p.InitializationListBegin()
		}

	case 7:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(696)
			p.Constant()
		}

	case 8:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(697)
			p.variable(0)
		}

	case 9:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(698)
			p.Lambda()
		}

	case 10:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(699)
			p.Builtin()
		}

	case 11:
		localctx = NewConstructContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(700)
			p.Constructor()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(721)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(703)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(704)

					var _m = p.Match(goscriptParserPOW)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(705)
					p.expr(13)
				}

			case 2:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(706)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(707)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(goscriptParserMUL-49))|(1<<(goscriptParserDIV-49))|(1<<(goscriptParserMOD-49)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(708)
					p.expr(13)
				}

			case 3:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(709)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(710)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserADD || _la == goscriptParserSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(711)
					p.expr(12)
				}

			case 4:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(712)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(713)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(goscriptParserEQ-56))|(1<<(goscriptParserINEQ-56))|(1<<(goscriptParserGT-56))|(1<<(goscriptParserGE-56))|(1<<(goscriptParserLE-56))|(1<<(goscriptParserLT-56))|(1<<(goscriptParserREGEX-56)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(714)
					p.expr(11)
				}

			case 5:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(715)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(716)

					var _m = p.Match(goscriptParserAND)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(717)
					p.expr(10)
				}

			case 6:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(718)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(719)

					var _m = p.Match(goscriptParserOR)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(720)
					p.expr(9)
				}

			}

		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeNameContext is an interface to support dynamic dispatch.
type IBasicTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeNameContext differentiates from other interfaces.
	IsBasicTypeNameContext()
}

type BasicTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeNameContext() *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_basicTypeName
	return p
}

func (*BasicTypeNameContext) IsBasicTypeNameContext() {}

func NewBasicTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_basicTypeName

	return p
}

func (s *BasicTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeNameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BasicTypeNameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BasicTypeNameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BasicTypeNameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BasicTypeNameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BasicTypeNameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BasicTypeNameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BasicTypeNameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BasicTypeNameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BasicTypeNameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BasicTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBasicTypeName(s)
	}
}

func (s *BasicTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBasicTypeName(s)
	}
}

func (p *goscriptParser) BasicTypeName() (localctx IBasicTypeNameContext) {
	localctx = NewBasicTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, goscriptParserRULE_basicTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(726)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-23)&-(0x1f+1)) == 0 && ((1<<uint((_la-23)))&((1<<(goscriptParserUINT32-23))|(1<<(goscriptParserUINT64-23))|(1<<(goscriptParserINT32-23))|(1<<(goscriptParserINT64-23))|(1<<(goscriptParserFLOAT32-23))|(1<<(goscriptParserFLOAT64-23))|(1<<(goscriptParserSTRING-23))|(1<<(goscriptParserBYTES-23))|(1<<(goscriptParserBOOL-23))|(1<<(goscriptParserUINT8-23)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBuiltinContext is an interface to support dynamic dispatch.
type IBuiltinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBuiltinContext differentiates from other interfaces.
	IsBuiltinContext()
}

type BuiltinContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuiltinContext() *BuiltinContext {
	var p = new(BuiltinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_builtin
	return p
}

func (*BuiltinContext) IsBuiltinContext() {}

func NewBuiltinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BuiltinContext {
	var p = new(BuiltinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_builtin

	return p
}

func (s *BuiltinContext) GetParser() antlr.Parser { return s.parser }

func (s *BuiltinContext) PUSHBACK() antlr.TerminalNode {
	return s.GetToken(goscriptParserPUSHBACK, 0)
}

func (s *BuiltinContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *BuiltinContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BuiltinContext) PUSHFRONT() antlr.TerminalNode {
	return s.GetToken(goscriptParserPUSHFRONT, 0)
}

func (s *BuiltinContext) DELETE() antlr.TerminalNode {
	return s.GetToken(goscriptParserDELETE, 0)
}

func (s *BuiltinContext) ENUMSTRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUMSTRING, 0)
}

func (s *BuiltinContext) LEN() antlr.TerminalNode {
	return s.GetToken(goscriptParserLEN, 0)
}

func (s *BuiltinContext) TYPEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEOF, 0)
}

func (s *BuiltinContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BuiltinContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BuiltinContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BuiltinContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BuiltinContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BuiltinContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BuiltinContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BuiltinContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BuiltinContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BuiltinContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BuiltinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BuiltinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BuiltinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBuiltin(s)
	}
}

func (s *BuiltinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBuiltin(s)
	}
}

func (p *goscriptParser) Builtin() (localctx IBuiltinContext) {
	localctx = NewBuiltinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, goscriptParserRULE_builtin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(814)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserPUSHBACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(728)
			p.Match(goscriptParserPUSHBACK)
		}
		{
			p.SetState(729)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(730)
			p.variable(0)
		}
		{
			p.SetState(731)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(732)
			p.expr(0)
		}
		{
			p.SetState(733)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserPUSHFRONT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(735)
			p.Match(goscriptParserPUSHFRONT)
		}
		{
			p.SetState(736)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(737)
			p.variable(0)
		}
		{
			p.SetState(738)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(739)
			p.expr(0)
		}
		{
			p.SetState(740)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserDELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(742)
			p.Match(goscriptParserDELETE)
		}
		{
			p.SetState(743)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(744)
			p.variable(0)
		}
		{
			p.SetState(745)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(746)
			p.expr(0)
		}
		{
			p.SetState(747)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserENUMSTRING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(749)
			p.Match(goscriptParserENUMSTRING)
		}
		{
			p.SetState(750)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(751)
			p.variable(0)
		}
		{
			p.SetState(752)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserLEN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(754)
			p.Match(goscriptParserLEN)
		}
		{
			p.SetState(755)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(756)
			p.variable(0)
		}
		{
			p.SetState(757)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserTYPEOF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(759)
			p.Match(goscriptParserTYPEOF)
		}
		{
			p.SetState(760)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(761)
			p.variable(0)
		}
		{
			p.SetState(762)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserUINT32:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(764)
			p.Match(goscriptParserUINT32)
		}
		{
			p.SetState(765)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(766)
			p.expr(0)
		}
		{
			p.SetState(767)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserUINT64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(769)
			p.Match(goscriptParserUINT64)
		}
		{
			p.SetState(770)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(771)
			p.expr(0)
		}
		{
			p.SetState(772)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserINT32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(774)
			p.Match(goscriptParserINT32)
		}
		{
			p.SetState(775)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(776)
			p.expr(0)
		}
		{
			p.SetState(777)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserINT64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(779)
			p.Match(goscriptParserINT64)
		}
		{
			p.SetState(780)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(781)
			p.expr(0)
		}
		{
			p.SetState(782)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserFLOAT32:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(784)
			p.Match(goscriptParserFLOAT32)
		}
		{
			p.SetState(785)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(786)
			p.expr(0)
		}
		{
			p.SetState(787)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserFLOAT64:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(789)
			p.Match(goscriptParserFLOAT64)
		}
		{
			p.SetState(790)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(791)
			p.expr(0)
		}
		{
			p.SetState(792)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserSTRING:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(794)
			p.Match(goscriptParserSTRING)
		}
		{
			p.SetState(795)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(796)
			p.expr(0)
		}
		{
			p.SetState(797)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserBYTES:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(799)
			p.Match(goscriptParserBYTES)
		}
		{
			p.SetState(800)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(801)
			p.expr(0)
		}
		{
			p.SetState(802)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserBOOL:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(804)
			p.Match(goscriptParserBOOL)
		}
		{
			p.SetState(805)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(806)
			p.expr(0)
		}
		{
			p.SetState(807)
			p.Match(goscriptParserT__3)
		}

	case goscriptParserUINT8:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(809)
			p.Match(goscriptParserUINT8)
		}
		{
			p.SetState(810)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(811)
			p.expr(0)
		}
		{
			p.SetState(812)
			p.Match(goscriptParserT__3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializationListBeginContext is an interface to support dynamic dispatch.
type IInitializationListBeginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListBeginContext differentiates from other interfaces.
	IsInitializationListBeginContext()
}

type InitializationListBeginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListBeginContext() *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationListBegin
	return p
}

func (*InitializationListBeginContext) IsInitializationListBeginContext() {}

func NewInitializationListBeginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationListBegin

	return p
}

func (s *InitializationListBeginContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListBeginContext) InitializationList() IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitializationListBeginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListBeginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializationListBeginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitializationListBegin(s)
	}
}

func (s *InitializationListBeginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitializationListBegin(s)
	}
}

func (p *goscriptParser) InitializationListBegin() (localctx IInitializationListBeginContext) {
	localctx = NewInitializationListBeginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, goscriptParserRULE_initializationListBegin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(816)
		p.InitializationList()
	}

	return localctx
}

// IInitializationListContext is an interface to support dynamic dispatch.
type IInitializationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListContext differentiates from other interfaces.
	IsInitializationListContext()
}

type InitializationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListContext() *InitializationListContext {
	var p = new(InitializationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationList
	return p
}

func (*InitializationListContext) IsInitializationListContext() {}

func NewInitializationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListContext {
	var p = new(InitializationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationList

	return p
}

func (s *InitializationListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListContext) CopyFrom(ctx *InitializationListContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *InitializationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InitMessageContext struct {
	*InitializationListContext
}

func NewInitMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMessageContext {
	var p = new(InitMessageContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMessageContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserNAME)
}

func (s *InitMessageContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, i)
}

func (s *InitMessageContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMessageContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMessage(s)
	}
}

func (s *InitMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMessage(s)
	}
}

type InitConstantContext struct {
	*InitializationListContext
}

func NewInitConstantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitConstantContext {
	var p = new(InitConstantContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitConstantContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InitConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitConstant(s)
	}
}

func (s *InitConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitConstant(s)
	}
}

type InitMapContext struct {
	*InitializationListContext
}

func NewInitMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMapContext {
	var p = new(InitMapContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMapContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMapContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMap(s)
	}
}

func (s *InitMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMap(s)
	}
}

type InitSliceContext struct {
	*InitializationListContext
}

func NewInitSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitSliceContext {
	var p = new(InitSliceContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitSliceContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitSliceContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitSlice(s)
	}
}

func (s *InitSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitSlice(s)
	}
}

func (p *goscriptParser) InitializationList() (localctx IInitializationListContext) {
	localctx = NewInitializationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, goscriptParserRULE_initializationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) {
	case 1:
		localctx = NewInitSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(818)
			p.Match(goscriptParserT__13)
		}
		{
			p.SetState(819)
			p.InitializationList()
		}
		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(820)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(821)
				p.InitializationList()
			}

			p.SetState(826)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(827)
			p.Match(goscriptParserT__14)
		}

	case 2:
		localctx = NewInitMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(829)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(830)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(831)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(832)
			p.InitializationList()
		}
		{
			p.SetState(833)
			p.Match(goscriptParserT__3)
		}
		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(834)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(835)
				p.Match(goscriptParserNAME)
			}
			{
				p.SetState(836)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(837)
				p.InitializationList()
			}
			{
				p.SetState(838)
				p.Match(goscriptParserT__3)
			}

			p.SetState(844)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(845)
			p.Match(goscriptParserT__5)
		}

	case 3:
		localctx = NewInitMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(847)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(848)
			p.InitializationList()
		}
		{
			p.SetState(849)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(850)
			p.InitializationList()
		}
		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(851)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(852)
				p.InitializationList()
			}
			{
				p.SetState(853)
				p.Match(goscriptParserT__9)
			}
			{
				p.SetState(854)
				p.InitializationList()
			}

			p.SetState(860)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(861)
			p.Match(goscriptParserT__5)
		}

	case 4:
		localctx = NewInitConstantContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(863)
			p.expr(0)
		}

	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) CopyFrom(ctx *ConstantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConstantNilContext struct {
	*ConstantContext
}

func NewConstantNilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantNilContext {
	var p = new(ConstantNilContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantNilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantNilContext) NULL() antlr.TerminalNode {
	return s.GetToken(goscriptParserNULL, 0)
}

func (s *ConstantNilContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantNil(s)
	}
}

func (s *ConstantNilContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantNil(s)
	}
}

type ConstantIntContext struct {
	*ConstantContext
}

func NewConstantIntContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantIntContext {
	var p = new(ConstantIntContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantIntContext) INT() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, 0)
}

func (s *ConstantIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantInt(s)
	}
}

func (s *ConstantIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantInt(s)
	}
}

type ConstantStringContext struct {
	*ConstantContext
}

func NewConstantStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantStringContext {
	var p = new(ConstantStringContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantStringContext) STRINGLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRINGLITERAL, 0)
}

func (s *ConstantStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantString(s)
	}
}

func (s *ConstantStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantString(s)
	}
}

type ConstantFloatContext struct {
	*ConstantContext
}

func NewConstantFloatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantFloatContext {
	var p = new(ConstantFloatContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantFloatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantFloatContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT, 0)
}

func (s *ConstantFloatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantFloat(s)
	}
}

func (s *ConstantFloatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantFloat(s)
	}
}

type ConstantBoolContext struct {
	*ConstantContext
}

func NewConstantBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantBoolContext {
	var p = new(ConstantBoolContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantBoolContext) BOOLLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOLLITERAL, 0)
}

func (s *ConstantBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantBool(s)
	}
}

func (s *ConstantBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantBool(s)
	}
}

func (p *goscriptParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, goscriptParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(871)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserINT:
		localctx = NewConstantIntContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(866)
			p.Match(goscriptParserINT)
		}

	case goscriptParserFLOAT:
		localctx = NewConstantFloatContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(867)
			p.Match(goscriptParserFLOAT)
		}

	case goscriptParserBOOLLITERAL:
		localctx = NewConstantBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(868)
			p.Match(goscriptParserBOOLLITERAL)
		}

	case goscriptParserNULL:
		localctx = NewConstantNilContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(869)
			p.Match(goscriptParserNULL)
		}

	case goscriptParserSTRINGLITERAL:
		localctx = NewConstantStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(870)
			p.Match(goscriptParserSTRINGLITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstructorContext is an interface to support dynamic dispatch.
type IConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorContext differentiates from other interfaces.
	IsConstructorContext()
}

type ConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorContext() *ConstructorContext {
	var p = new(ConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constructor
	return p
}

func (*ConstructorContext) IsConstructorContext() {}

func NewConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorContext {
	var p = new(ConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constructor

	return p
}

func (s *ConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorContext) NEW() antlr.TerminalNode {
	return s.GetToken(goscriptParserNEW, 0)
}

func (s *ConstructorContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ConstructorContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ConstructorContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstructor(s)
	}
}

func (s *ConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstructor(s)
	}
}

func (p *goscriptParser) Constructor() (localctx IConstructorContext) {
	localctx = NewConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, goscriptParserRULE_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(873)
			p.Match(goscriptParserNEW)
		}
		{
			p.SetState(874)
			p.Typename()
		}
		{
			p.SetState(875)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(876)
			p.Match(goscriptParserT__3)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(878)
			p.Match(goscriptParserNEW)
		}
		{
			p.SetState(879)
			p.Typename()
		}
		{
			p.SetState(880)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(881)
			p.expr(0)
		}
		p.SetState(886)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__2 {
			{
				p.SetState(882)
				p.Match(goscriptParserT__2)
			}
			{
				p.SetState(883)
				p.expr(0)
			}

			p.SetState(888)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(889)
			p.Match(goscriptParserT__3)
		}

	}

	return localctx
}

// IVardefContext is an interface to support dynamic dispatch.
type IVardefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVardefContext differentiates from other interfaces.
	IsVardefContext()
}

type VardefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVardefContext() *VardefContext {
	var p = new(VardefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_vardef
	return p
}

func (*VardefContext) IsVardefContext() {}

func NewVardefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VardefContext {
	var p = new(VardefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_vardef

	return p
}

func (s *VardefContext) GetParser() antlr.Parser { return s.parser }

func (s *VardefContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *VardefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *VardefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *VardefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *VardefContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VardefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VardefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VardefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVardef(s)
	}
}

func (s *VardefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVardef(s)
	}
}

func (p *goscriptParser) Vardef() (localctx IVardefContext) {
	localctx = NewVardefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, goscriptParserRULE_vardef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(902)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(893)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(894)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(895)
			p.Typename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(896)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(897)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(898)
			p.Typename()
		}
		{
			p.SetState(899)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(900)
			p.expr(0)
		}

	}

	return localctx
}

// ILocaldefContext is an interface to support dynamic dispatch.
type ILocaldefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLocaldefContext differentiates from other interfaces.
	IsLocaldefContext()
}

type LocaldefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocaldefContext() *LocaldefContext {
	var p = new(LocaldefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_localdef
	return p
}

func (*LocaldefContext) IsLocaldefContext() {}

func NewLocaldefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LocaldefContext {
	var p = new(LocaldefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_localdef

	return p
}

func (s *LocaldefContext) GetParser() antlr.Parser { return s.parser }

func (s *LocaldefContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *LocaldefContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *LocaldefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *LocaldefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *LocaldefContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LocaldefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocaldefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LocaldefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLocaldef(s)
	}
}

func (s *LocaldefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLocaldef(s)
	}
}

func (p *goscriptParser) Localdef() (localctx ILocaldefContext) {
	localctx = NewLocaldefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, goscriptParserRULE_localdef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(913)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(904)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(905)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(906)
			p.Typename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(907)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(908)
			p.Match(goscriptParserNAME)
		}
		{
			p.SetState(909)
			p.Typename()
		}
		{
			p.SetState(910)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(911)
			p.expr(0)
		}

	}

	return localctx
}

func (p *goscriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 22:
		var t *VariableContext = nil
		if localctx != nil {
			t = localctx.(*VariableContext)
		}
		return p.Variable_Sempred(t, predIndex)

	case 25:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *goscriptParser) Variable_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *goscriptParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 8)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
