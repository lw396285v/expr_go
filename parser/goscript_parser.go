// Code generated from goscript.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // goscript

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 85, 975,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 3, 2, 3, 2, 3, 2, 6, 2, 86, 10, 2, 13,
	2, 14, 2, 87, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 7, 5, 100, 10, 5, 12, 5, 14, 5, 103, 11, 5, 3, 5, 5, 5, 106, 10, 5,
	5, 5, 108, 10, 5, 3, 5, 3, 5, 5, 5, 112, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 122, 10, 5, 12, 5, 14, 5, 125, 11, 5, 3,
	5, 5, 5, 128, 10, 5, 5, 5, 130, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7,
	5, 137, 10, 5, 12, 5, 14, 5, 140, 11, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 151, 10, 5, 12, 5, 14, 5, 154, 11, 5, 3,
	5, 5, 5, 157, 10, 5, 5, 5, 159, 10, 5, 3, 5, 3, 5, 5, 5, 163, 10, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 173, 10, 5, 12, 5, 14,
	5, 176, 11, 5, 3, 5, 5, 5, 179, 10, 5, 5, 5, 181, 10, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 7, 5, 188, 10, 5, 12, 5, 14, 5, 191, 11, 5, 3, 5, 3, 5,
	3, 5, 5, 5, 196, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 203, 10, 6,
	12, 6, 14, 6, 206, 11, 6, 3, 6, 5, 6, 209, 10, 6, 5, 6, 211, 10, 6, 3,
	6, 3, 6, 5, 6, 215, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 223,
	10, 6, 12, 6, 14, 6, 226, 11, 6, 3, 6, 5, 6, 229, 10, 6, 5, 6, 231, 10,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 238, 10, 6, 12, 6, 14, 6, 241, 11,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 251, 10, 6, 12,
	6, 14, 6, 254, 11, 6, 3, 6, 5, 6, 257, 10, 6, 5, 6, 259, 10, 6, 3, 6, 3,
	6, 5, 6, 263, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 271, 10,
	6, 12, 6, 14, 6, 274, 11, 6, 3, 6, 5, 6, 277, 10, 6, 5, 6, 279, 10, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 286, 10, 6, 12, 6, 14, 6, 289, 11,
	6, 3, 6, 3, 6, 3, 6, 5, 6, 294, 10, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3,
	9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 5, 13,
	311, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 327, 10, 13, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 7, 14, 334, 10, 14, 12, 14, 14, 14, 337, 11, 14, 3,
	14, 5, 14, 340, 10, 14, 5, 14, 342, 10, 14, 3, 14, 3, 14, 5, 14, 346, 10,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 353, 10, 14, 12, 14, 14,
	14, 356, 11, 14, 3, 14, 5, 14, 359, 10, 14, 5, 14, 361, 10, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 368, 10, 14, 12, 14, 14, 14, 371, 11,
	14, 3, 14, 3, 14, 5, 14, 375, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 7, 15, 395, 10, 15, 12, 15, 14, 15, 398, 11, 15, 5, 15,
	400, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 7, 15, 411, 10, 15, 12, 15, 14, 15, 414, 11, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 5, 15, 422, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 7, 16, 432, 10, 16, 12, 16, 14, 16, 435, 11, 16,
	3, 16, 3, 16, 5, 16, 439, 10, 16, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 5,
	18, 446, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 462, 10, 18, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 19, 7, 19, 469, 10, 19, 12, 19, 14, 19, 472, 11, 19,
	3, 19, 5, 19, 475, 10, 19, 5, 19, 477, 10, 19, 3, 19, 3, 19, 5, 19, 481,
	10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 488, 10, 19, 12, 19,
	14, 19, 491, 11, 19, 3, 19, 5, 19, 494, 10, 19, 5, 19, 496, 10, 19, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 503, 10, 19, 12, 19, 14, 19, 506,
	11, 19, 3, 19, 3, 19, 5, 19, 510, 10, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3,
	22, 3, 22, 3, 22, 3, 22, 5, 22, 520, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 530, 10, 23, 5, 23, 532, 10, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 6, 23,
	544, 10, 23, 13, 23, 14, 23, 545, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 7, 23, 588, 10, 23, 12, 23, 14, 23, 591, 11, 23, 3,
	23, 3, 23, 5, 23, 595, 10, 23, 3, 24, 3, 24, 3, 25, 3, 25, 7, 25, 601,
	10, 25, 12, 25, 14, 25, 604, 11, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26,
	5, 26, 611, 10, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 28, 6, 28, 619,
	10, 28, 13, 28, 14, 28, 620, 3, 28, 3, 28, 3, 28, 5, 28, 626, 10, 28, 3,
	29, 3, 29, 5, 29, 630, 10, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 5, 32, 652, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5,
	33, 668, 10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 718,
	10, 33, 12, 33, 14, 33, 721, 11, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 7, 33, 731, 10, 33, 12, 33, 14, 33, 734, 11, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 744, 10, 33,
	12, 33, 14, 33, 747, 11, 33, 5, 33, 749, 10, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 7, 33, 757, 10, 33, 12, 33, 14, 33, 760, 11, 33, 3, 34,
	3, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 855, 10,
	35, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 863, 10, 37, 12, 37,
	14, 37, 866, 11, 37, 5, 37, 868, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 882, 10, 37,
	12, 37, 14, 37, 885, 11, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 898, 10, 37, 12, 37, 14, 37,
	901, 11, 37, 3, 37, 3, 37, 3, 37, 5, 37, 906, 10, 37, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 5, 38, 913, 10, 38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 7, 39, 926, 10, 39, 12, 39, 14,
	39, 929, 11, 39, 3, 39, 3, 39, 5, 39, 933, 10, 39, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 967, 10,
	40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 2, 3, 64, 42, 2, 4,
	6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
	44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
	80, 2, 12, 5, 2, 24, 26, 39, 49, 81, 81, 4, 2, 24, 49, 81, 81, 4, 2, 58,
	60, 70, 70, 3, 2, 71, 72, 3, 2, 54, 56, 3, 2, 57, 58, 3, 2, 61, 67, 3,
	2, 73, 77, 3, 2, 59, 60, 4, 2, 27, 36, 38, 38, 2, 1097, 2, 85, 3, 2, 2,
	2, 4, 89, 3, 2, 2, 2, 6, 91, 3, 2, 2, 2, 8, 195, 3, 2, 2, 2, 10, 293, 3,
	2, 2, 2, 12, 295, 3, 2, 2, 2, 14, 297, 3, 2, 2, 2, 16, 299, 3, 2, 2, 2,
	18, 301, 3, 2, 2, 2, 20, 303, 3, 2, 2, 2, 22, 305, 3, 2, 2, 2, 24, 326,
	3, 2, 2, 2, 26, 374, 3, 2, 2, 2, 28, 421, 3, 2, 2, 2, 30, 438, 3, 2, 2,
	2, 32, 440, 3, 2, 2, 2, 34, 461, 3, 2, 2, 2, 36, 509, 3, 2, 2, 2, 38, 511,
	3, 2, 2, 2, 40, 513, 3, 2, 2, 2, 42, 519, 3, 2, 2, 2, 44, 594, 3, 2, 2,
	2, 46, 596, 3, 2, 2, 2, 48, 598, 3, 2, 2, 2, 50, 610, 3, 2, 2, 2, 52, 612,
	3, 2, 2, 2, 54, 625, 3, 2, 2, 2, 56, 629, 3, 2, 2, 2, 58, 631, 3, 2, 2,
	2, 60, 633, 3, 2, 2, 2, 62, 651, 3, 2, 2, 2, 64, 667, 3, 2, 2, 2, 66, 761,
	3, 2, 2, 2, 68, 854, 3, 2, 2, 2, 70, 856, 3, 2, 2, 2, 72, 905, 3, 2, 2,
	2, 74, 912, 3, 2, 2, 2, 76, 932, 3, 2, 2, 2, 78, 966, 3, 2, 2, 2, 80, 968,
	3, 2, 2, 2, 82, 86, 5, 8, 5, 2, 83, 86, 5, 28, 15, 2, 84, 86, 5, 42, 22,
	2, 85, 82, 3, 2, 2, 2, 85, 83, 3, 2, 2, 2, 85, 84, 3, 2, 2, 2, 86, 87,
	3, 2, 2, 2, 87, 85, 3, 2, 2, 2, 87, 88, 3, 2, 2, 2, 88, 3, 3, 2, 2, 2,
	89, 90, 9, 2, 2, 2, 90, 5, 3, 2, 2, 2, 91, 92, 9, 3, 2, 2, 92, 7, 3, 2,
	2, 2, 93, 94, 7, 50, 2, 2, 94, 95, 5, 4, 3, 2, 95, 107, 7, 3, 2, 2, 96,
	101, 5, 14, 8, 2, 97, 98, 7, 4, 2, 2, 98, 100, 5, 14, 8, 2, 99, 97, 3,
	2, 2, 2, 100, 103, 3, 2, 2, 2, 101, 99, 3, 2, 2, 2, 101, 102, 3, 2, 2,
	2, 102, 105, 3, 2, 2, 2, 103, 101, 3, 2, 2, 2, 104, 106, 7, 83, 2, 2, 105,
	104, 3, 2, 2, 2, 105, 106, 3, 2, 2, 2, 106, 108, 3, 2, 2, 2, 107, 96, 3,
	2, 2, 2, 107, 108, 3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 111, 7, 5, 2,
	2, 110, 112, 5, 20, 11, 2, 111, 110, 3, 2, 2, 2, 111, 112, 3, 2, 2, 2,
	112, 113, 3, 2, 2, 2, 113, 114, 5, 12, 7, 2, 114, 196, 3, 2, 2, 2, 115,
	116, 7, 50, 2, 2, 116, 117, 5, 4, 3, 2, 117, 129, 7, 3, 2, 2, 118, 123,
	5, 14, 8, 2, 119, 120, 7, 4, 2, 2, 120, 122, 5, 14, 8, 2, 121, 119, 3,
	2, 2, 2, 122, 125, 3, 2, 2, 2, 123, 121, 3, 2, 2, 2, 123, 124, 3, 2, 2,
	2, 124, 127, 3, 2, 2, 2, 125, 123, 3, 2, 2, 2, 126, 128, 7, 83, 2, 2, 127,
	126, 3, 2, 2, 2, 127, 128, 3, 2, 2, 2, 128, 130, 3, 2, 2, 2, 129, 118,
	3, 2, 2, 2, 129, 130, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 132, 7, 5,
	2, 2, 132, 133, 7, 3, 2, 2, 133, 138, 5, 20, 11, 2, 134, 135, 7, 4, 2,
	2, 135, 137, 5, 20, 11, 2, 136, 134, 3, 2, 2, 2, 137, 140, 3, 2, 2, 2,
	138, 136, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 141, 3, 2, 2, 2, 140,
	138, 3, 2, 2, 2, 141, 142, 7, 5, 2, 2, 142, 143, 5, 12, 7, 2, 143, 196,
	3, 2, 2, 2, 144, 145, 7, 50, 2, 2, 145, 146, 5, 4, 3, 2, 146, 158, 7, 3,
	2, 2, 147, 152, 5, 14, 8, 2, 148, 149, 7, 4, 2, 2, 149, 151, 5, 14, 8,
	2, 150, 148, 3, 2, 2, 2, 151, 154, 3, 2, 2, 2, 152, 150, 3, 2, 2, 2, 152,
	153, 3, 2, 2, 2, 153, 156, 3, 2, 2, 2, 154, 152, 3, 2, 2, 2, 155, 157,
	7, 83, 2, 2, 156, 155, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 159, 3, 2,
	2, 2, 158, 147, 3, 2, 2, 2, 158, 159, 3, 2, 2, 2, 159, 160, 3, 2, 2, 2,
	160, 162, 7, 5, 2, 2, 161, 163, 5, 16, 9, 2, 162, 161, 3, 2, 2, 2, 162,
	163, 3, 2, 2, 2, 163, 164, 3, 2, 2, 2, 164, 165, 5, 12, 7, 2, 165, 196,
	3, 2, 2, 2, 166, 167, 7, 50, 2, 2, 167, 168, 5, 4, 3, 2, 168, 180, 7, 3,
	2, 2, 169, 174, 5, 14, 8, 2, 170, 171, 7, 4, 2, 2, 171, 173, 5, 14, 8,
	2, 172, 170, 3, 2, 2, 2, 173, 176, 3, 2, 2, 2, 174, 172, 3, 2, 2, 2, 174,
	175, 3, 2, 2, 2, 175, 178, 3, 2, 2, 2, 176, 174, 3, 2, 2, 2, 177, 179,
	7, 83, 2, 2, 178, 177, 3, 2, 2, 2, 178, 179, 3, 2, 2, 2, 179, 181, 3, 2,
	2, 2, 180, 169, 3, 2, 2, 2, 180, 181, 3, 2, 2, 2, 181, 182, 3, 2, 2, 2,
	182, 183, 7, 5, 2, 2, 183, 184, 7, 3, 2, 2, 184, 189, 5, 16, 9, 2, 185,
	186, 7, 4, 2, 2, 186, 188, 5, 16, 9, 2, 187, 185, 3, 2, 2, 2, 188, 191,
	3, 2, 2, 2, 189, 187, 3, 2, 2, 2, 189, 190, 3, 2, 2, 2, 190, 192, 3, 2,
	2, 2, 191, 189, 3, 2, 2, 2, 192, 193, 7, 5, 2, 2, 193, 194, 5, 12, 7, 2,
	194, 196, 3, 2, 2, 2, 195, 93, 3, 2, 2, 2, 195, 115, 3, 2, 2, 2, 195, 144,
	3, 2, 2, 2, 195, 166, 3, 2, 2, 2, 196, 9, 3, 2, 2, 2, 197, 198, 7, 50,
	2, 2, 198, 210, 7, 3, 2, 2, 199, 204, 5, 14, 8, 2, 200, 201, 7, 4, 2, 2,
	201, 203, 5, 14, 8, 2, 202, 200, 3, 2, 2, 2, 203, 206, 3, 2, 2, 2, 204,
	202, 3, 2, 2, 2, 204, 205, 3, 2, 2, 2, 205, 208, 3, 2, 2, 2, 206, 204,
	3, 2, 2, 2, 207, 209, 7, 83, 2, 2, 208, 207, 3, 2, 2, 2, 208, 209, 3, 2,
	2, 2, 209, 211, 3, 2, 2, 2, 210, 199, 3, 2, 2, 2, 210, 211, 3, 2, 2, 2,
	211, 212, 3, 2, 2, 2, 212, 214, 7, 5, 2, 2, 213, 215, 5, 20, 11, 2, 214,
	213, 3, 2, 2, 2, 214, 215, 3, 2, 2, 2, 215, 216, 3, 2, 2, 2, 216, 294,
	5, 12, 7, 2, 217, 218, 7, 50, 2, 2, 218, 230, 7, 3, 2, 2, 219, 224, 5,
	14, 8, 2, 220, 221, 7, 4, 2, 2, 221, 223, 5, 14, 8, 2, 222, 220, 3, 2,
	2, 2, 223, 226, 3, 2, 2, 2, 224, 222, 3, 2, 2, 2, 224, 225, 3, 2, 2, 2,
	225, 228, 3, 2, 2, 2, 226, 224, 3, 2, 2, 2, 227, 229, 7, 83, 2, 2, 228,
	227, 3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 231, 3, 2, 2, 2, 230, 219,
	3, 2, 2, 2, 230, 231, 3, 2, 2, 2, 231, 232, 3, 2, 2, 2, 232, 233, 7, 5,
	2, 2, 233, 234, 7, 3, 2, 2, 234, 239, 5, 20, 11, 2, 235, 236, 7, 4, 2,
	2, 236, 238, 5, 20, 11, 2, 237, 235, 3, 2, 2, 2, 238, 241, 3, 2, 2, 2,
	239, 237, 3, 2, 2, 2, 239, 240, 3, 2, 2, 2, 240, 242, 3, 2, 2, 2, 241,
	239, 3, 2, 2, 2, 242, 243, 7, 5, 2, 2, 243, 244, 5, 12, 7, 2, 244, 294,
	3, 2, 2, 2, 245, 246, 7, 50, 2, 2, 246, 258, 7, 3, 2, 2, 247, 252, 5, 14,
	8, 2, 248, 249, 7, 4, 2, 2, 249, 251, 5, 14, 8, 2, 250, 248, 3, 2, 2, 2,
	251, 254, 3, 2, 2, 2, 252, 250, 3, 2, 2, 2, 252, 253, 3, 2, 2, 2, 253,
	256, 3, 2, 2, 2, 254, 252, 3, 2, 2, 2, 255, 257, 7, 83, 2, 2, 256, 255,
	3, 2, 2, 2, 256, 257, 3, 2, 2, 2, 257, 259, 3, 2, 2, 2, 258, 247, 3, 2,
	2, 2, 258, 259, 3, 2, 2, 2, 259, 260, 3, 2, 2, 2, 260, 262, 7, 5, 2, 2,
	261, 263, 5, 16, 9, 2, 262, 261, 3, 2, 2, 2, 262, 263, 3, 2, 2, 2, 263,
	264, 3, 2, 2, 2, 264, 294, 5, 12, 7, 2, 265, 266, 7, 50, 2, 2, 266, 278,
	7, 3, 2, 2, 267, 272, 5, 14, 8, 2, 268, 269, 7, 4, 2, 2, 269, 271, 5, 14,
	8, 2, 270, 268, 3, 2, 2, 2, 271, 274, 3, 2, 2, 2, 272, 270, 3, 2, 2, 2,
	272, 273, 3, 2, 2, 2, 273, 276, 3, 2, 2, 2, 274, 272, 3, 2, 2, 2, 275,
	277, 7, 83, 2, 2, 276, 275, 3, 2, 2, 2, 276, 277, 3, 2, 2, 2, 277, 279,
	3, 2, 2, 2, 278, 267, 3, 2, 2, 2, 278, 279, 3, 2, 2, 2, 279, 280, 3, 2,
	2, 2, 280, 281, 7, 5, 2, 2, 281, 282, 7, 3, 2, 2, 282, 287, 5, 16, 9, 2,
	283, 284, 7, 4, 2, 2, 284, 286, 5, 16, 9, 2, 285, 283, 3, 2, 2, 2, 286,
	289, 3, 2, 2, 2, 287, 285, 3, 2, 2, 2, 287, 288, 3, 2, 2, 2, 288, 290,
	3, 2, 2, 2, 289, 287, 3, 2, 2, 2, 290, 291, 7, 5, 2, 2, 291, 292, 5, 12,
	7, 2, 292, 294, 3, 2, 2, 2, 293, 197, 3, 2, 2, 2, 293, 217, 3, 2, 2, 2,
	293, 245, 3, 2, 2, 2, 293, 265, 3, 2, 2, 2, 294, 11, 3, 2, 2, 2, 295, 296,
	5, 48, 25, 2, 296, 13, 3, 2, 2, 2, 297, 298, 5, 22, 12, 2, 298, 15, 3,
	2, 2, 2, 299, 300, 5, 22, 12, 2, 300, 17, 3, 2, 2, 2, 301, 302, 5, 24,
	13, 2, 302, 19, 3, 2, 2, 2, 303, 304, 5, 24, 13, 2, 304, 21, 3, 2, 2, 2,
	305, 306, 5, 4, 3, 2, 306, 307, 5, 24, 13, 2, 307, 23, 3, 2, 2, 2, 308,
	311, 5, 4, 3, 2, 309, 311, 5, 66, 34, 2, 310, 308, 3, 2, 2, 2, 310, 309,
	3, 2, 2, 2, 311, 327, 3, 2, 2, 2, 312, 327, 5, 26, 14, 2, 313, 314, 7,
	25, 2, 2, 314, 315, 7, 6, 2, 2, 315, 316, 5, 66, 34, 2, 316, 317, 7, 7,
	2, 2, 317, 318, 5, 24, 13, 2, 318, 327, 3, 2, 2, 2, 319, 320, 7, 8, 2,
	2, 320, 327, 5, 24, 13, 2, 321, 322, 7, 37, 2, 2, 322, 323, 7, 6, 2, 2,
	323, 324, 5, 24, 13, 2, 324, 325, 7, 7, 2, 2, 325, 327, 3, 2, 2, 2, 326,
	310, 3, 2, 2, 2, 326, 312, 3, 2, 2, 2, 326, 313, 3, 2, 2, 2, 326, 319,
	3, 2, 2, 2, 326, 321, 3, 2, 2, 2, 327, 25, 3, 2, 2, 2, 328, 329, 7, 50,
	2, 2, 329, 341, 7, 3, 2, 2, 330, 335, 5, 18, 10, 2, 331, 332, 7, 4, 2,
	2, 332, 334, 5, 18, 10, 2, 333, 331, 3, 2, 2, 2, 334, 337, 3, 2, 2, 2,
	335, 333, 3, 2, 2, 2, 335, 336, 3, 2, 2, 2, 336, 339, 3, 2, 2, 2, 337,
	335, 3, 2, 2, 2, 338, 340, 7, 83, 2, 2, 339, 338, 3, 2, 2, 2, 339, 340,
	3, 2, 2, 2, 340, 342, 3, 2, 2, 2, 341, 330, 3, 2, 2, 2, 341, 342, 3, 2,
	2, 2, 342, 343, 3, 2, 2, 2, 343, 345, 7, 5, 2, 2, 344, 346, 5, 20, 11,
	2, 345, 344, 3, 2, 2, 2, 345, 346, 3, 2, 2, 2, 346, 375, 3, 2, 2, 2, 347,
	348, 7, 50, 2, 2, 348, 360, 7, 3, 2, 2, 349, 354, 5, 18, 10, 2, 350, 351,
	7, 4, 2, 2, 351, 353, 5, 18, 10, 2, 352, 350, 3, 2, 2, 2, 353, 356, 3,
	2, 2, 2, 354, 352, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 358, 3, 2, 2,
	2, 356, 354, 3, 2, 2, 2, 357, 359, 7, 83, 2, 2, 358, 357, 3, 2, 2, 2, 358,
	359, 3, 2, 2, 2, 359, 361, 3, 2, 2, 2, 360, 349, 3, 2, 2, 2, 360, 361,
	3, 2, 2, 2, 361, 362, 3, 2, 2, 2, 362, 363, 7, 5, 2, 2, 363, 364, 7, 3,
	2, 2, 364, 369, 5, 20, 11, 2, 365, 366, 7, 4, 2, 2, 366, 368, 5, 20, 11,
	2, 367, 365, 3, 2, 2, 2, 368, 371, 3, 2, 2, 2, 369, 367, 3, 2, 2, 2, 369,
	370, 3, 2, 2, 2, 370, 372, 3, 2, 2, 2, 371, 369, 3, 2, 2, 2, 372, 373,
	7, 5, 2, 2, 373, 375, 3, 2, 2, 2, 374, 328, 3, 2, 2, 2, 374, 347, 3, 2,
	2, 2, 375, 27, 3, 2, 2, 2, 376, 377, 7, 24, 2, 2, 377, 378, 5, 4, 3, 2,
	378, 379, 7, 25, 2, 2, 379, 380, 7, 6, 2, 2, 380, 381, 5, 66, 34, 2, 381,
	382, 7, 7, 2, 2, 382, 383, 5, 34, 18, 2, 383, 422, 3, 2, 2, 2, 384, 385,
	7, 24, 2, 2, 385, 386, 5, 4, 3, 2, 386, 387, 7, 8, 2, 2, 387, 388, 5, 34,
	18, 2, 388, 422, 3, 2, 2, 2, 389, 390, 7, 24, 2, 2, 390, 391, 5, 4, 3,
	2, 391, 399, 7, 9, 2, 2, 392, 396, 5, 30, 16, 2, 393, 395, 5, 30, 16, 2,
	394, 393, 3, 2, 2, 2, 395, 398, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 396,
	397, 3, 2, 2, 2, 397, 400, 3, 2, 2, 2, 398, 396, 3, 2, 2, 2, 399, 392,
	3, 2, 2, 2, 399, 400, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 402, 7, 10,
	2, 2, 402, 422, 3, 2, 2, 2, 403, 404, 7, 24, 2, 2, 404, 405, 5, 4, 3, 2,
	405, 412, 7, 9, 2, 2, 406, 407, 5, 4, 3, 2, 407, 408, 7, 11, 2, 2, 408,
	409, 7, 78, 2, 2, 409, 411, 3, 2, 2, 2, 410, 406, 3, 2, 2, 2, 411, 414,
	3, 2, 2, 2, 412, 410, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 415, 3, 2,
	2, 2, 414, 412, 3, 2, 2, 2, 415, 416, 7, 10, 2, 2, 416, 422, 3, 2, 2, 2,
	417, 418, 7, 24, 2, 2, 418, 419, 5, 4, 3, 2, 419, 420, 5, 36, 19, 2, 420,
	422, 3, 2, 2, 2, 421, 376, 3, 2, 2, 2, 421, 384, 3, 2, 2, 2, 421, 389,
	3, 2, 2, 2, 421, 403, 3, 2, 2, 2, 421, 417, 3, 2, 2, 2, 422, 29, 3, 2,
	2, 2, 423, 424, 5, 6, 4, 2, 424, 425, 5, 34, 18, 2, 425, 439, 3, 2, 2,
	2, 426, 427, 7, 26, 2, 2, 427, 428, 5, 6, 4, 2, 428, 429, 7, 9, 2, 2, 429,
	433, 5, 32, 17, 2, 430, 432, 5, 32, 17, 2, 431, 430, 3, 2, 2, 2, 432, 435,
	3, 2, 2, 2, 433, 431, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434, 436, 3, 2,
	2, 2, 435, 433, 3, 2, 2, 2, 436, 437, 7, 10, 2, 2, 437, 439, 3, 2, 2, 2,
	438, 423, 3, 2, 2, 2, 438, 426, 3, 2, 2, 2, 439, 31, 3, 2, 2, 2, 440, 441,
	5, 6, 4, 2, 441, 442, 5, 34, 18, 2, 442, 33, 3, 2, 2, 2, 443, 446, 5, 4,
	3, 2, 444, 446, 5, 66, 34, 2, 445, 443, 3, 2, 2, 2, 445, 444, 3, 2, 2,
	2, 446, 462, 3, 2, 2, 2, 447, 462, 5, 36, 19, 2, 448, 449, 7, 25, 2, 2,
	449, 450, 7, 6, 2, 2, 450, 451, 5, 66, 34, 2, 451, 452, 7, 7, 2, 2, 452,
	453, 5, 34, 18, 2, 453, 462, 3, 2, 2, 2, 454, 455, 7, 8, 2, 2, 455, 462,
	5, 34, 18, 2, 456, 457, 7, 37, 2, 2, 457, 458, 7, 6, 2, 2, 458, 459, 5,
	34, 18, 2, 459, 460, 7, 7, 2, 2, 460, 462, 3, 2, 2, 2, 461, 445, 3, 2,
	2, 2, 461, 447, 3, 2, 2, 2, 461, 448, 3, 2, 2, 2, 461, 454, 3, 2, 2, 2,
	461, 456, 3, 2, 2, 2, 462, 35, 3, 2, 2, 2, 463, 464, 7, 50, 2, 2, 464,
	476, 7, 3, 2, 2, 465, 470, 5, 38, 20, 2, 466, 467, 7, 4, 2, 2, 467, 469,
	5, 38, 20, 2, 468, 466, 3, 2, 2, 2, 469, 472, 3, 2, 2, 2, 470, 468, 3,
	2, 2, 2, 470, 471, 3, 2, 2, 2, 471, 474, 3, 2, 2, 2, 472, 470, 3, 2, 2,
	2, 473, 475, 7, 83, 2, 2, 474, 473, 3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475,
	477, 3, 2, 2, 2, 476, 465, 3, 2, 2, 2, 476, 477, 3, 2, 2, 2, 477, 478,
	3, 2, 2, 2, 478, 480, 7, 5, 2, 2, 479, 481, 5, 40, 21, 2, 480, 479, 3,
	2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 510, 3, 2, 2, 2, 482, 483, 7, 50, 2,
	2, 483, 495, 7, 3, 2, 2, 484, 489, 5, 38, 20, 2, 485, 486, 7, 4, 2, 2,
	486, 488, 5, 38, 20, 2, 487, 485, 3, 2, 2, 2, 488, 491, 3, 2, 2, 2, 489,
	487, 3, 2, 2, 2, 489, 490, 3, 2, 2, 2, 490, 493, 3, 2, 2, 2, 491, 489,
	3, 2, 2, 2, 492, 494, 7, 83, 2, 2, 493, 492, 3, 2, 2, 2, 493, 494, 3, 2,
	2, 2, 494, 496, 3, 2, 2, 2, 495, 484, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2,
	496, 497, 3, 2, 2, 2, 497, 498, 7, 5, 2, 2, 498, 499, 7, 3, 2, 2, 499,
	504, 5, 40, 21, 2, 500, 501, 7, 4, 2, 2, 501, 503, 5, 40, 21, 2, 502, 500,
	3, 2, 2, 2, 503, 506, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 504, 505, 3, 2,
	2, 2, 505, 507, 3, 2, 2, 2, 506, 504, 3, 2, 2, 2, 507, 508, 7, 5, 2, 2,
	508, 510, 3, 2, 2, 2, 509, 463, 3, 2, 2, 2, 509, 482, 3, 2, 2, 2, 510,
	37, 3, 2, 2, 2, 511, 512, 5, 34, 18, 2, 512, 39, 3, 2, 2, 2, 513, 514,
	5, 34, 18, 2, 514, 41, 3, 2, 2, 2, 515, 520, 5, 44, 23, 2, 516, 517, 5,
	50, 26, 2, 517, 518, 7, 12, 2, 2, 518, 520, 3, 2, 2, 2, 519, 515, 3, 2,
	2, 2, 519, 516, 3, 2, 2, 2, 520, 43, 3, 2, 2, 2, 521, 522, 7, 42, 2, 2,
	522, 523, 7, 3, 2, 2, 523, 524, 5, 64, 33, 2, 524, 525, 7, 5, 2, 2, 525,
	531, 5, 48, 25, 2, 526, 529, 7, 43, 2, 2, 527, 530, 5, 48, 25, 2, 528,
	530, 5, 44, 23, 2, 529, 527, 3, 2, 2, 2, 529, 528, 3, 2, 2, 2, 530, 532,
	3, 2, 2, 2, 531, 526, 3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 595, 3, 2,
	2, 2, 533, 534, 7, 44, 2, 2, 534, 535, 7, 3, 2, 2, 535, 536, 5, 64, 33,
	2, 536, 537, 7, 5, 2, 2, 537, 543, 7, 9, 2, 2, 538, 539, 7, 45, 2, 2, 539,
	540, 5, 74, 38, 2, 540, 541, 7, 11, 2, 2, 541, 542, 5, 48, 25, 2, 542,
	544, 3, 2, 2, 2, 543, 538, 3, 2, 2, 2, 544, 545, 3, 2, 2, 2, 545, 543,
	3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546, 547, 3, 2, 2, 2, 547, 548, 7, 10,
	2, 2, 548, 595, 3, 2, 2, 2, 549, 550, 7, 39, 2, 2, 550, 551, 7, 3, 2, 2,
	551, 552, 5, 4, 3, 2, 552, 553, 7, 13, 2, 2, 553, 554, 5, 46, 24, 2, 554,
	555, 7, 5, 2, 2, 555, 556, 5, 48, 25, 2, 556, 595, 3, 2, 2, 2, 557, 558,
	7, 39, 2, 2, 558, 559, 7, 3, 2, 2, 559, 560, 5, 4, 3, 2, 560, 561, 7, 4,
	2, 2, 561, 562, 5, 4, 3, 2, 562, 563, 7, 13, 2, 2, 563, 564, 5, 46, 24,
	2, 564, 565, 7, 5, 2, 2, 565, 566, 5, 48, 25, 2, 566, 595, 3, 2, 2, 2,
	567, 568, 7, 39, 2, 2, 568, 569, 7, 3, 2, 2, 569, 570, 5, 50, 26, 2, 570,
	571, 7, 12, 2, 2, 571, 572, 5, 64, 33, 2, 572, 573, 7, 12, 2, 2, 573, 574,
	5, 52, 27, 2, 574, 575, 7, 5, 2, 2, 575, 576, 5, 48, 25, 2, 576, 595, 3,
	2, 2, 2, 577, 578, 7, 40, 2, 2, 578, 595, 7, 12, 2, 2, 579, 580, 7, 41,
	2, 2, 580, 595, 7, 12, 2, 2, 581, 582, 7, 46, 2, 2, 582, 595, 7, 12, 2,
	2, 583, 584, 7, 46, 2, 2, 584, 589, 5, 64, 33, 2, 585, 586, 7, 4, 2, 2,
	586, 588, 5, 64, 33, 2, 587, 585, 3, 2, 2, 2, 588, 591, 3, 2, 2, 2, 589,
	587, 3, 2, 2, 2, 589, 590, 3, 2, 2, 2, 590, 592, 3, 2, 2, 2, 591, 589,
	3, 2, 2, 2, 592, 593, 7, 12, 2, 2, 593, 595, 3, 2, 2, 2, 594, 521, 3, 2,
	2, 2, 594, 533, 3, 2, 2, 2, 594, 549, 3, 2, 2, 2, 594, 557, 3, 2, 2, 2,
	594, 567, 3, 2, 2, 2, 594, 577, 3, 2, 2, 2, 594, 579, 3, 2, 2, 2, 594,
	581, 3, 2, 2, 2, 594, 583, 3, 2, 2, 2, 595, 45, 3, 2, 2, 2, 596, 597, 5,
	64, 33, 2, 597, 47, 3, 2, 2, 2, 598, 602, 7, 9, 2, 2, 599, 601, 5, 42,
	22, 2, 600, 599, 3, 2, 2, 2, 601, 604, 3, 2, 2, 2, 602, 600, 3, 2, 2, 2,
	602, 603, 3, 2, 2, 2, 603, 605, 3, 2, 2, 2, 604, 602, 3, 2, 2, 2, 605,
	606, 7, 10, 2, 2, 606, 49, 3, 2, 2, 2, 607, 611, 5, 52, 27, 2, 608, 611,
	5, 78, 40, 2, 609, 611, 5, 80, 41, 2, 610, 607, 3, 2, 2, 2, 610, 608, 3,
	2, 2, 2, 610, 609, 3, 2, 2, 2, 611, 51, 3, 2, 2, 2, 612, 613, 5, 54, 28,
	2, 613, 53, 3, 2, 2, 2, 614, 626, 5, 64, 33, 2, 615, 618, 5, 64, 33, 2,
	616, 617, 7, 4, 2, 2, 617, 619, 5, 64, 33, 2, 618, 616, 3, 2, 2, 2, 619,
	620, 3, 2, 2, 2, 620, 618, 3, 2, 2, 2, 620, 621, 3, 2, 2, 2, 621, 622,
	3, 2, 2, 2, 622, 623, 7, 73, 2, 2, 623, 624, 5, 64, 33, 2, 624, 626, 3,
	2, 2, 2, 625, 614, 3, 2, 2, 2, 625, 615, 3, 2, 2, 2, 626, 55, 3, 2, 2,
	2, 627, 630, 5, 4, 3, 2, 628, 630, 7, 14, 2, 2, 629, 627, 3, 2, 2, 2, 629,
	628, 3, 2, 2, 2, 630, 57, 3, 2, 2, 2, 631, 632, 5, 24, 13, 2, 632, 59,
	3, 2, 2, 2, 633, 634, 5, 64, 33, 2, 634, 61, 3, 2, 2, 2, 635, 636, 5, 64,
	33, 2, 636, 637, 7, 11, 2, 2, 637, 638, 5, 64, 33, 2, 638, 639, 7, 11,
	2, 2, 639, 640, 5, 64, 33, 2, 640, 652, 3, 2, 2, 2, 641, 642, 5, 64, 33,
	2, 642, 643, 7, 11, 2, 2, 643, 644, 5, 64, 33, 2, 644, 652, 3, 2, 2, 2,
	645, 646, 5, 64, 33, 2, 646, 647, 7, 11, 2, 2, 647, 652, 3, 2, 2, 2, 648,
	652, 5, 64, 33, 2, 649, 650, 7, 11, 2, 2, 650, 652, 5, 64, 33, 2, 651,
	635, 3, 2, 2, 2, 651, 641, 3, 2, 2, 2, 651, 645, 3, 2, 2, 2, 651, 648,
	3, 2, 2, 2, 651, 649, 3, 2, 2, 2, 652, 63, 3, 2, 2, 2, 653, 654, 8, 33,
	1, 2, 654, 655, 7, 3, 2, 2, 655, 656, 5, 64, 33, 2, 656, 657, 7, 5, 2,
	2, 657, 668, 3, 2, 2, 2, 658, 668, 5, 74, 38, 2, 659, 668, 5, 56, 29, 2,
	660, 668, 5, 10, 6, 2, 661, 668, 5, 68, 35, 2, 662, 663, 9, 4, 2, 2, 663,
	668, 5, 64, 33, 15, 664, 665, 9, 5, 2, 2, 665, 668, 5, 64, 33, 6, 666,
	668, 5, 76, 39, 2, 667, 653, 3, 2, 2, 2, 667, 658, 3, 2, 2, 2, 667, 659,
	3, 2, 2, 2, 667, 660, 3, 2, 2, 2, 667, 661, 3, 2, 2, 2, 667, 662, 3, 2,
	2, 2, 667, 664, 3, 2, 2, 2, 667, 666, 3, 2, 2, 2, 668, 758, 3, 2, 2, 2,
	669, 670, 12, 13, 2, 2, 670, 671, 7, 53, 2, 2, 671, 757, 5, 64, 33, 13,
	672, 673, 12, 12, 2, 2, 673, 674, 9, 6, 2, 2, 674, 757, 5, 64, 33, 13,
	675, 676, 12, 11, 2, 2, 676, 677, 9, 7, 2, 2, 677, 757, 5, 64, 33, 12,
	678, 679, 12, 10, 2, 2, 679, 680, 9, 8, 2, 2, 680, 757, 5, 64, 33, 11,
	681, 682, 12, 9, 2, 2, 682, 683, 7, 68, 2, 2, 683, 757, 5, 64, 33, 10,
	684, 685, 12, 8, 2, 2, 685, 686, 7, 69, 2, 2, 686, 757, 5, 64, 33, 9, 687,
	688, 12, 7, 2, 2, 688, 689, 9, 5, 2, 2, 689, 757, 5, 64, 33, 8, 690, 691,
	12, 5, 2, 2, 691, 692, 9, 9, 2, 2, 692, 757, 5, 64, 33, 5, 693, 694, 12,
	22, 2, 2, 694, 695, 7, 82, 2, 2, 695, 757, 5, 4, 3, 2, 696, 697, 12, 21,
	2, 2, 697, 698, 7, 82, 2, 2, 698, 699, 7, 3, 2, 2, 699, 700, 5, 58, 30,
	2, 700, 701, 7, 5, 2, 2, 701, 757, 3, 2, 2, 2, 702, 703, 12, 20, 2, 2,
	703, 704, 7, 15, 2, 2, 704, 705, 5, 60, 31, 2, 705, 706, 7, 16, 2, 2, 706,
	757, 3, 2, 2, 2, 707, 708, 12, 19, 2, 2, 708, 709, 7, 6, 2, 2, 709, 710,
	5, 64, 33, 2, 710, 711, 7, 7, 2, 2, 711, 757, 3, 2, 2, 2, 712, 713, 12,
	18, 2, 2, 713, 714, 7, 6, 2, 2, 714, 719, 5, 62, 32, 2, 715, 716, 7, 4,
	2, 2, 716, 718, 5, 62, 32, 2, 717, 715, 3, 2, 2, 2, 718, 721, 3, 2, 2,
	2, 719, 717, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 722, 3, 2, 2, 2, 721,
	719, 3, 2, 2, 2, 722, 723, 7, 7, 2, 2, 723, 757, 3, 2, 2, 2, 724, 725,
	12, 17, 2, 2, 725, 726, 7, 6, 2, 2, 726, 727, 7, 6, 2, 2, 727, 732, 5,
	64, 33, 2, 728, 729, 7, 4, 2, 2, 729, 731, 5, 64, 33, 2, 730, 728, 3, 2,
	2, 2, 731, 734, 3, 2, 2, 2, 732, 730, 3, 2, 2, 2, 732, 733, 3, 2, 2, 2,
	733, 735, 3, 2, 2, 2, 734, 732, 3, 2, 2, 2, 735, 736, 7, 7, 2, 2, 736,
	737, 7, 7, 2, 2, 737, 757, 3, 2, 2, 2, 738, 739, 12, 16, 2, 2, 739, 748,
	7, 3, 2, 2, 740, 745, 5, 64, 33, 2, 741, 742, 7, 4, 2, 2, 742, 744, 5,
	64, 33, 2, 743, 741, 3, 2, 2, 2, 744, 747, 3, 2, 2, 2, 745, 743, 3, 2,
	2, 2, 745, 746, 3, 2, 2, 2, 746, 749, 3, 2, 2, 2, 747, 745, 3, 2, 2, 2,
	748, 740, 3, 2, 2, 2, 748, 749, 3, 2, 2, 2, 749, 750, 3, 2, 2, 2, 750,
	757, 7, 5, 2, 2, 751, 752, 12, 14, 2, 2, 752, 757, 9, 10, 2, 2, 753, 754,
	12, 4, 2, 2, 754, 755, 7, 73, 2, 2, 755, 757, 5, 70, 36, 2, 756, 669, 3,
	2, 2, 2, 756, 672, 3, 2, 2, 2, 756, 675, 3, 2, 2, 2, 756, 678, 3, 2, 2,
	2, 756, 681, 3, 2, 2, 2, 756, 684, 3, 2, 2, 2, 756, 687, 3, 2, 2, 2, 756,
	690, 3, 2, 2, 2, 756, 693, 3, 2, 2, 2, 756, 696, 3, 2, 2, 2, 756, 702,
	3, 2, 2, 2, 756, 707, 3, 2, 2, 2, 756, 712, 3, 2, 2, 2, 756, 724, 3, 2,
	2, 2, 756, 738, 3, 2, 2, 2, 756, 751, 3, 2, 2, 2, 756, 753, 3, 2, 2, 2,
	757, 760, 3, 2, 2, 2, 758, 756, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2, 759,
	65, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2, 761, 762, 9, 11, 2, 2, 762, 67, 3,
	2, 2, 2, 763, 764, 7, 17, 2, 2, 764, 765, 7, 3, 2, 2, 765, 766, 5, 64,
	33, 2, 766, 767, 7, 4, 2, 2, 767, 768, 5, 64, 33, 2, 768, 769, 7, 5, 2,
	2, 769, 855, 3, 2, 2, 2, 770, 771, 7, 18, 2, 2, 771, 772, 7, 3, 2, 2, 772,
	773, 5, 64, 33, 2, 773, 774, 7, 4, 2, 2, 774, 775, 5, 64, 33, 2, 775, 776,
	7, 5, 2, 2, 776, 855, 3, 2, 2, 2, 777, 778, 7, 19, 2, 2, 778, 779, 7, 3,
	2, 2, 779, 780, 5, 64, 33, 2, 780, 781, 7, 4, 2, 2, 781, 782, 5, 64, 33,
	2, 782, 783, 7, 5, 2, 2, 783, 855, 3, 2, 2, 2, 784, 785, 7, 20, 2, 2, 785,
	786, 7, 3, 2, 2, 786, 787, 5, 64, 33, 2, 787, 788, 7, 5, 2, 2, 788, 855,
	3, 2, 2, 2, 789, 790, 7, 21, 2, 2, 790, 791, 7, 3, 2, 2, 791, 792, 5, 64,
	33, 2, 792, 793, 7, 5, 2, 2, 793, 855, 3, 2, 2, 2, 794, 795, 7, 22, 2,
	2, 795, 796, 7, 3, 2, 2, 796, 797, 5, 64, 33, 2, 797, 798, 7, 5, 2, 2,
	798, 855, 3, 2, 2, 2, 799, 800, 7, 27, 2, 2, 800, 801, 7, 3, 2, 2, 801,
	802, 5, 64, 33, 2, 802, 803, 7, 5, 2, 2, 803, 855, 3, 2, 2, 2, 804, 805,
	7, 28, 2, 2, 805, 806, 7, 3, 2, 2, 806, 807, 5, 64, 33, 2, 807, 808, 7,
	5, 2, 2, 808, 855, 3, 2, 2, 2, 809, 810, 7, 29, 2, 2, 810, 811, 7, 3, 2,
	2, 811, 812, 5, 64, 33, 2, 812, 813, 7, 5, 2, 2, 813, 855, 3, 2, 2, 2,
	814, 815, 7, 30, 2, 2, 815, 816, 7, 3, 2, 2, 816, 817, 5, 64, 33, 2, 817,
	818, 7, 5, 2, 2, 818, 855, 3, 2, 2, 2, 819, 820, 7, 31, 2, 2, 820, 821,
	7, 3, 2, 2, 821, 822, 5, 64, 33, 2, 822, 823, 7, 5, 2, 2, 823, 855, 3,
	2, 2, 2, 824, 825, 7, 32, 2, 2, 825, 826, 7, 3, 2, 2, 826, 827, 5, 64,
	33, 2, 827, 828, 7, 5, 2, 2, 828, 855, 3, 2, 2, 2, 829, 830, 7, 33, 2,
	2, 830, 831, 7, 3, 2, 2, 831, 832, 5, 64, 33, 2, 832, 833, 7, 5, 2, 2,
	833, 855, 3, 2, 2, 2, 834, 835, 7, 34, 2, 2, 835, 836, 7, 3, 2, 2, 836,
	837, 5, 64, 33, 2, 837, 838, 7, 5, 2, 2, 838, 855, 3, 2, 2, 2, 839, 840,
	7, 35, 2, 2, 840, 841, 7, 3, 2, 2, 841, 842, 5, 64, 33, 2, 842, 843, 7,
	5, 2, 2, 843, 855, 3, 2, 2, 2, 844, 845, 7, 36, 2, 2, 845, 846, 7, 3, 2,
	2, 846, 847, 5, 64, 33, 2, 847, 848, 7, 5, 2, 2, 848, 855, 3, 2, 2, 2,
	849, 850, 7, 38, 2, 2, 850, 851, 7, 3, 2, 2, 851, 852, 5, 64, 33, 2, 852,
	853, 7, 5, 2, 2, 853, 855, 3, 2, 2, 2, 854, 763, 3, 2, 2, 2, 854, 770,
	3, 2, 2, 2, 854, 777, 3, 2, 2, 2, 854, 784, 3, 2, 2, 2, 854, 789, 3, 2,
	2, 2, 854, 794, 3, 2, 2, 2, 854, 799, 3, 2, 2, 2, 854, 804, 3, 2, 2, 2,
	854, 809, 3, 2, 2, 2, 854, 814, 3, 2, 2, 2, 854, 819, 3, 2, 2, 2, 854,
	824, 3, 2, 2, 2, 854, 829, 3, 2, 2, 2, 854, 834, 3, 2, 2, 2, 854, 839,
	3, 2, 2, 2, 854, 844, 3, 2, 2, 2, 854, 849, 3, 2, 2, 2, 855, 69, 3, 2,
	2, 2, 856, 857, 5, 72, 37, 2, 857, 71, 3, 2, 2, 2, 858, 867, 7, 6, 2, 2,
	859, 864, 5, 72, 37, 2, 860, 861, 7, 4, 2, 2, 861, 863, 5, 72, 37, 2, 862,
	860, 3, 2, 2, 2, 863, 866, 3, 2, 2, 2, 864, 862, 3, 2, 2, 2, 864, 865,
	3, 2, 2, 2, 865, 868, 3, 2, 2, 2, 866, 864, 3, 2, 2, 2, 867, 859, 3, 2,
	2, 2, 867, 868, 3, 2, 2, 2, 868, 869, 3, 2, 2, 2, 869, 906, 7, 7, 2, 2,
	870, 871, 7, 9, 2, 2, 871, 872, 5, 4, 3, 2, 872, 873, 7, 3, 2, 2, 873,
	874, 5, 72, 37, 2, 874, 883, 7, 5, 2, 2, 875, 876, 7, 4, 2, 2, 876, 877,
	5, 4, 3, 2, 877, 878, 7, 3, 2, 2, 878, 879, 5, 72, 37, 2, 879, 880, 7,
	5, 2, 2, 880, 882, 3, 2, 2, 2, 881, 875, 3, 2, 2, 2, 882, 885, 3, 2, 2,
	2, 883, 881, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 886, 3, 2, 2, 2, 885,
	883, 3, 2, 2, 2, 886, 887, 7, 10, 2, 2, 887, 906, 3, 2, 2, 2, 888, 889,
	7, 9, 2, 2, 889, 890, 5, 72, 37, 2, 890, 891, 7, 11, 2, 2, 891, 899, 5,
	72, 37, 2, 892, 893, 7, 4, 2, 2, 893, 894, 5, 72, 37, 2, 894, 895, 7, 11,
	2, 2, 895, 896, 5, 72, 37, 2, 896, 898, 3, 2, 2, 2, 897, 892, 3, 2, 2,
	2, 898, 901, 3, 2, 2, 2, 899, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900,
	902, 3, 2, 2, 2, 901, 899, 3, 2, 2, 2, 902, 903, 7, 10, 2, 2, 903, 906,
	3, 2, 2, 2, 904, 906, 5, 64, 33, 2, 905, 858, 3, 2, 2, 2, 905, 870, 3,
	2, 2, 2, 905, 888, 3, 2, 2, 2, 905, 904, 3, 2, 2, 2, 906, 73, 3, 2, 2,
	2, 907, 913, 7, 78, 2, 2, 908, 913, 7, 79, 2, 2, 909, 913, 7, 51, 2, 2,
	910, 913, 7, 52, 2, 2, 911, 913, 7, 80, 2, 2, 912, 907, 3, 2, 2, 2, 912,
	908, 3, 2, 2, 2, 912, 909, 3, 2, 2, 2, 912, 910, 3, 2, 2, 2, 912, 911,
	3, 2, 2, 2, 913, 75, 3, 2, 2, 2, 914, 915, 7, 23, 2, 2, 915, 916, 5, 24,
	13, 2, 916, 917, 7, 3, 2, 2, 917, 918, 7, 5, 2, 2, 918, 933, 3, 2, 2, 2,
	919, 920, 7, 23, 2, 2, 920, 921, 5, 24, 13, 2, 921, 922, 7, 3, 2, 2, 922,
	927, 5, 64, 33, 2, 923, 924, 7, 4, 2, 2, 924, 926, 5, 64, 33, 2, 925, 923,
	3, 2, 2, 2, 926, 929, 3, 2, 2, 2, 927, 925, 3, 2, 2, 2, 927, 928, 3, 2,
	2, 2, 928, 930, 3, 2, 2, 2, 929, 927, 3, 2, 2, 2, 930, 931, 7, 5, 2, 2,
	931, 933, 3, 2, 2, 2, 932, 914, 3, 2, 2, 2, 932, 919, 3, 2, 2, 2, 933,
	77, 3, 2, 2, 2, 934, 935, 7, 47, 2, 2, 935, 936, 5, 4, 3, 2, 936, 937,
	5, 24, 13, 2, 937, 967, 3, 2, 2, 2, 938, 939, 7, 47, 2, 2, 939, 940, 5,
	4, 3, 2, 940, 941, 5, 24, 13, 2, 941, 942, 7, 73, 2, 2, 942, 943, 5, 64,
	33, 2, 943, 967, 3, 2, 2, 2, 944, 945, 7, 47, 2, 2, 945, 946, 5, 4, 3,
	2, 946, 947, 5, 24, 13, 2, 947, 948, 7, 73, 2, 2, 948, 949, 5, 70, 36,
	2, 949, 967, 3, 2, 2, 2, 950, 951, 7, 48, 2, 2, 951, 952, 5, 4, 3, 2, 952,
	953, 5, 24, 13, 2, 953, 967, 3, 2, 2, 2, 954, 955, 7, 48, 2, 2, 955, 956,
	5, 4, 3, 2, 956, 957, 5, 24, 13, 2, 957, 958, 7, 73, 2, 2, 958, 959, 5,
	64, 33, 2, 959, 967, 3, 2, 2, 2, 960, 961, 7, 48, 2, 2, 961, 962, 5, 4,
	3, 2, 962, 963, 5, 24, 13, 2, 963, 964, 7, 73, 2, 2, 964, 965, 5, 70, 36,
	2, 965, 967, 3, 2, 2, 2, 966, 934, 3, 2, 2, 2, 966, 938, 3, 2, 2, 2, 966,
	944, 3, 2, 2, 2, 966, 950, 3, 2, 2, 2, 966, 954, 3, 2, 2, 2, 966, 960,
	3, 2, 2, 2, 967, 79, 3, 2, 2, 2, 968, 969, 7, 49, 2, 2, 969, 970, 5, 4,
	3, 2, 970, 971, 5, 66, 34, 2, 971, 972, 7, 73, 2, 2, 972, 973, 5, 74, 38,
	2, 973, 81, 3, 2, 2, 2, 95, 85, 87, 101, 105, 107, 111, 123, 127, 129,
	138, 152, 156, 158, 162, 174, 178, 180, 189, 195, 204, 208, 210, 214, 224,
	228, 230, 239, 252, 256, 258, 262, 272, 276, 278, 287, 293, 310, 326, 335,
	339, 341, 345, 354, 358, 360, 369, 374, 396, 399, 412, 421, 433, 438, 445,
	461, 470, 474, 476, 480, 489, 493, 495, 504, 509, 519, 529, 531, 545, 589,
	594, 602, 610, 620, 625, 629, 651, 667, 719, 732, 745, 748, 756, 758, 854,
	864, 867, 883, 899, 905, 912, 927, 932, 966,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'('", "','", "')'", "'['", "']'", "'[]'", "'{'", "'}'", "':'", "';'",
	"'in'", "'@'", "'[?('", "')]'", "'pushBack'", "'pushFront'", "'delete'",
	"'enumString'", "'len'", "'typeof'", "'new'", "'type'", "'map'", "'oneof'",
	"'uint32'", "'uint64'", "'int32'", "'int64'", "'float32'", "'float64'",
	"'string'", "'bytes'", "'bool'", "'uint8'", "'chan'", "'any'", "'for'",
	"'break'", "'continue'", "'if'", "'else'", "'switch'", "'case'", "'return'",
	"'var'", "'local'", "'const'", "'func'", "", "'nil'", "'**'", "'*'", "'/'",
	"'%'", "'+'", "'-'", "'++'", "'--'", "'=='", "'!='", "'>'", "'>='", "'<='",
	"'<'", "'=~'", "'&&'", "'||'", "'!'", "'<-'", "'<<-'", "'='", "'+='", "'-='",
	"'*='", "'/='", "", "", "", "", "'.'", "'...'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "TYPEDEF", "MAP", "ONEOF", "UINT32", "UINT64", "INT32",
	"INT64", "FLOAT32", "FLOAT64", "STRING", "BYTES", "BOOL", "UINT8", "CHAN",
	"ANY", "FOR", "BREAK", "CONTINUE", "IF", "ELSE", "SWITCH", "CASE", "RETURN",
	"VAR", "LOCAL", "CONST", "FUNCTION", "BOOLLITERAL", "NULL", "POW", "MUL",
	"DIV", "MOD", "ADD", "SUB", "UNARYADD", "UNARYSUB", "EQ", "INEQ", "GT",
	"GE", "LE", "LT", "REGEX", "AND", "OR", "NOT", "CHANOP", "CHANOPNONBLOCK",
	"ASSIGN", "ADDEQUAL", "SUBEQUAL", "MULEQUAL", "DIVEQUAL", "INT", "FLOAT",
	"STRINGLITERAL", "NAME", "DOT", "TAILARRAY", "WHITESPACE", "COMMENT",
}

var ruleNames = []string{
	"program", "name", "fieldname", "functiondef", "lambda", "closure", "inparam",
	"outparam", "intypename", "returntypename", "param", "typename", "functionTypeName",
	"typedef", "messagefield", "oneoffield", "typenameindef", "functionTypeNameindef",
	"intypenameindef", "returntypenameindef", "execution", "control", "collection",
	"block", "line", "restoreStack", "keepStack", "variable", "asserted", "filter",
	"indexs", "expr", "basicTypeName", "builtin", "initializationListBegin",
	"initializationList", "constant", "constructor", "vardef", "constdef",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type goscriptParser struct {
	*antlr.BaseParser
}

func NewgoscriptParser(input antlr.TokenStream) *goscriptParser {
	this := new(goscriptParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "goscript.g4"

	return this
}

// goscriptParser tokens.
const (
	goscriptParserEOF            = antlr.TokenEOF
	goscriptParserT__0           = 1
	goscriptParserT__1           = 2
	goscriptParserT__2           = 3
	goscriptParserT__3           = 4
	goscriptParserT__4           = 5
	goscriptParserT__5           = 6
	goscriptParserT__6           = 7
	goscriptParserT__7           = 8
	goscriptParserT__8           = 9
	goscriptParserT__9           = 10
	goscriptParserT__10          = 11
	goscriptParserT__11          = 12
	goscriptParserT__12          = 13
	goscriptParserT__13          = 14
	goscriptParserT__14          = 15
	goscriptParserT__15          = 16
	goscriptParserT__16          = 17
	goscriptParserT__17          = 18
	goscriptParserT__18          = 19
	goscriptParserT__19          = 20
	goscriptParserT__20          = 21
	goscriptParserTYPEDEF        = 22
	goscriptParserMAP            = 23
	goscriptParserONEOF          = 24
	goscriptParserUINT32         = 25
	goscriptParserUINT64         = 26
	goscriptParserINT32          = 27
	goscriptParserINT64          = 28
	goscriptParserFLOAT32        = 29
	goscriptParserFLOAT64        = 30
	goscriptParserSTRING         = 31
	goscriptParserBYTES          = 32
	goscriptParserBOOL           = 33
	goscriptParserUINT8          = 34
	goscriptParserCHAN           = 35
	goscriptParserANY            = 36
	goscriptParserFOR            = 37
	goscriptParserBREAK          = 38
	goscriptParserCONTINUE       = 39
	goscriptParserIF             = 40
	goscriptParserELSE           = 41
	goscriptParserSWITCH         = 42
	goscriptParserCASE           = 43
	goscriptParserRETURN         = 44
	goscriptParserVAR            = 45
	goscriptParserLOCAL          = 46
	goscriptParserCONST          = 47
	goscriptParserFUNCTION       = 48
	goscriptParserBOOLLITERAL    = 49
	goscriptParserNULL           = 50
	goscriptParserPOW            = 51
	goscriptParserMUL            = 52
	goscriptParserDIV            = 53
	goscriptParserMOD            = 54
	goscriptParserADD            = 55
	goscriptParserSUB            = 56
	goscriptParserUNARYADD       = 57
	goscriptParserUNARYSUB       = 58
	goscriptParserEQ             = 59
	goscriptParserINEQ           = 60
	goscriptParserGT             = 61
	goscriptParserGE             = 62
	goscriptParserLE             = 63
	goscriptParserLT             = 64
	goscriptParserREGEX          = 65
	goscriptParserAND            = 66
	goscriptParserOR             = 67
	goscriptParserNOT            = 68
	goscriptParserCHANOP         = 69
	goscriptParserCHANOPNONBLOCK = 70
	goscriptParserASSIGN         = 71
	goscriptParserADDEQUAL       = 72
	goscriptParserSUBEQUAL       = 73
	goscriptParserMULEQUAL       = 74
	goscriptParserDIVEQUAL       = 75
	goscriptParserINT            = 76
	goscriptParserFLOAT          = 77
	goscriptParserSTRINGLITERAL  = 78
	goscriptParserNAME           = 79
	goscriptParserDOT            = 80
	goscriptParserTAILARRAY      = 81
	goscriptParserWHITESPACE     = 82
	goscriptParserCOMMENT        = 83
)

// goscriptParser rules.
const (
	goscriptParserRULE_program                 = 0
	goscriptParserRULE_name                    = 1
	goscriptParserRULE_fieldname               = 2
	goscriptParserRULE_functiondef             = 3
	goscriptParserRULE_lambda                  = 4
	goscriptParserRULE_closure                 = 5
	goscriptParserRULE_inparam                 = 6
	goscriptParserRULE_outparam                = 7
	goscriptParserRULE_intypename              = 8
	goscriptParserRULE_returntypename          = 9
	goscriptParserRULE_param                   = 10
	goscriptParserRULE_typename                = 11
	goscriptParserRULE_functionTypeName        = 12
	goscriptParserRULE_typedef                 = 13
	goscriptParserRULE_messagefield            = 14
	goscriptParserRULE_oneoffield              = 15
	goscriptParserRULE_typenameindef           = 16
	goscriptParserRULE_functionTypeNameindef   = 17
	goscriptParserRULE_intypenameindef         = 18
	goscriptParserRULE_returntypenameindef     = 19
	goscriptParserRULE_execution               = 20
	goscriptParserRULE_control                 = 21
	goscriptParserRULE_collection              = 22
	goscriptParserRULE_block                   = 23
	goscriptParserRULE_line                    = 24
	goscriptParserRULE_restoreStack            = 25
	goscriptParserRULE_keepStack               = 26
	goscriptParserRULE_variable                = 27
	goscriptParserRULE_asserted                = 28
	goscriptParserRULE_filter                  = 29
	goscriptParserRULE_indexs                  = 30
	goscriptParserRULE_expr                    = 31
	goscriptParserRULE_basicTypeName           = 32
	goscriptParserRULE_builtin                 = 33
	goscriptParserRULE_initializationListBegin = 34
	goscriptParserRULE_initializationList      = 35
	goscriptParserRULE_constant                = 36
	goscriptParserRULE_constructor             = 37
	goscriptParserRULE_vardef                  = 38
	goscriptParserRULE_constdef                = 39
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllFunctiondef() []IFunctiondefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem())
	var tst = make([]IFunctiondefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctiondefContext)
		}
	}

	return tst
}

func (s *ProgramContext) Functiondef(i int) IFunctiondefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefContext)
}

func (s *ProgramContext) AllTypedef() []ITypedefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypedefContext)(nil)).Elem())
	var tst = make([]ITypedefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypedefContext)
		}
	}

	return tst
}

func (s *ProgramContext) Typedef(i int) ITypedefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypedefContext)
}

func (s *ProgramContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *ProgramContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (p *goscriptParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, goscriptParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(83)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__11)|(1<<goscriptParserT__14)|(1<<goscriptParserT__15)|(1<<goscriptParserT__16)|(1<<goscriptParserT__17)|(1<<goscriptParserT__18)|(1<<goscriptParserT__19)|(1<<goscriptParserT__20)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(goscriptParserNOT-68))|(1<<(goscriptParserCHANOP-68))|(1<<(goscriptParserCHANOPNONBLOCK-68))|(1<<(goscriptParserINT-68))|(1<<(goscriptParserFLOAT-68))|(1<<(goscriptParserSTRINGLITERAL-68))|(1<<(goscriptParserNAME-68)))) != 0) {
		p.SetState(83)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(80)
				p.Functiondef()
			}

		case 2:
			{
				p.SetState(81)
				p.Typedef()
			}

		case 3:
			{
				p.SetState(82)
				p.Execution()
			}

		}

		p.SetState(85)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *NameContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *NameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *NameContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *NameContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *NameContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *NameContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *NameContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *NameContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *NameContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *NameContext) CASE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, 0)
}

func (s *NameContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *NameContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *NameContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *NameContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *goscriptParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, goscriptParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(87)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFieldnameContext is an interface to support dynamic dispatch.
type IFieldnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldnameContext differentiates from other interfaces.
	IsFieldnameContext()
}

type FieldnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldnameContext() *FieldnameContext {
	var p = new(FieldnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_fieldname
	return p
}

func (*FieldnameContext) IsFieldnameContext() {}

func NewFieldnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldnameContext {
	var p = new(FieldnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_fieldname

	return p
}

func (s *FieldnameContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldnameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *FieldnameContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *FieldnameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *FieldnameContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *FieldnameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *FieldnameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *FieldnameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *FieldnameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *FieldnameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *FieldnameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *FieldnameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *FieldnameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *FieldnameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *FieldnameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *FieldnameContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *FieldnameContext) ANY() antlr.TerminalNode {
	return s.GetToken(goscriptParserANY, 0)
}

func (s *FieldnameContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *FieldnameContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *FieldnameContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *FieldnameContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *FieldnameContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *FieldnameContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *FieldnameContext) CASE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, 0)
}

func (s *FieldnameContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *FieldnameContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *FieldnameContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *FieldnameContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *FieldnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFieldname(s)
	}
}

func (s *FieldnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFieldname(s)
	}
}

func (p *goscriptParser) Fieldname() (localctx IFieldnameContext) {
	localctx = NewFieldnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, goscriptParserRULE_fieldname)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(89)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserUINT32-22))|(1<<(goscriptParserUINT64-22))|(1<<(goscriptParserINT32-22))|(1<<(goscriptParserINT64-22))|(1<<(goscriptParserFLOAT32-22))|(1<<(goscriptParserFLOAT64-22))|(1<<(goscriptParserSTRING-22))|(1<<(goscriptParserBYTES-22))|(1<<(goscriptParserBOOL-22))|(1<<(goscriptParserUINT8-22))|(1<<(goscriptParserCHAN-22))|(1<<(goscriptParserANY-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFunctiondefContext is an interface to support dynamic dispatch.
type IFunctiondefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiondefContext differentiates from other interfaces.
	IsFunctiondefContext()
}

type FunctiondefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiondefContext() *FunctiondefContext {
	var p = new(FunctiondefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functiondef
	return p
}

func (*FunctiondefContext) IsFunctiondefContext() {}

func NewFunctiondefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiondefContext {
	var p = new(FunctiondefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functiondef

	return p
}

func (s *FunctiondefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiondefContext) CopyFrom(ctx *FunctiondefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctiondefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiondefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionDefContext struct {
	*FunctiondefContext
}

func NewFunctionDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionDefContext {
	var p = new(FunctionDefContext)

	p.FunctiondefContext = NewEmptyFunctiondefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctiondefContext))

	return p
}

func (s *FunctionDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionDefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FunctionDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *FunctionDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *FunctionDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *FunctionDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionDef(s)
	}
}

func (s *FunctionDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionDef(s)
	}
}

func (p *goscriptParser) Functiondef() (localctx IFunctiondefContext) {
	localctx = NewFunctiondefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, goscriptParserRULE_functiondef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(193)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(91)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(92)
			p.Name()
		}
		{
			p.SetState(93)
			p.Match(goscriptParserT__0)
		}
		p.SetState(105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(94)
				p.Inparam()
			}
			p.SetState(99)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(95)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(96)
					p.Inparam()
				}

				p.SetState(101)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(103)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(102)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(107)
			p.Match(goscriptParserT__2)
		}
		p.SetState(109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(108)
				p.Returntypename()
			}

		}
		{
			p.SetState(111)
			p.Closure()
		}

	case 2:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(113)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(114)
			p.Name()
		}
		{
			p.SetState(115)
			p.Match(goscriptParserT__0)
		}
		p.SetState(127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(116)
				p.Inparam()
			}
			p.SetState(121)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(117)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(118)
					p.Inparam()
				}

				p.SetState(123)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(125)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(124)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(129)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(130)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(131)
			p.Returntypename()
		}
		p.SetState(136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(132)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(133)
				p.Returntypename()
			}

			p.SetState(138)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(139)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(140)
			p.Closure()
		}

	case 3:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(142)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(143)
			p.Name()
		}
		{
			p.SetState(144)
			p.Match(goscriptParserT__0)
		}
		p.SetState(156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(145)
				p.Inparam()
			}
			p.SetState(150)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(146)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(147)
					p.Inparam()
				}

				p.SetState(152)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(154)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(153)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(158)
			p.Match(goscriptParserT__2)
		}
		p.SetState(160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(159)
				p.Outparam()
			}

		}
		{
			p.SetState(162)
			p.Closure()
		}

	case 4:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(164)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(165)
			p.Name()
		}
		{
			p.SetState(166)
			p.Match(goscriptParserT__0)
		}
		p.SetState(178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(167)
				p.Inparam()
			}
			p.SetState(172)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(168)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(169)
					p.Inparam()
				}

				p.SetState(174)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(176)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(175)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(180)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(181)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(182)
			p.Outparam()
		}
		p.SetState(187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(183)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(184)
				p.Outparam()
			}

			p.SetState(189)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(190)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(191)
			p.Closure()
		}

	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) CopyFrom(ctx *LambdaContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LambdaDefContext struct {
	*LambdaContext
}

func NewLambdaDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaDefContext {
	var p = new(LambdaDefContext)

	p.LambdaContext = NewEmptyLambdaContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LambdaContext))

	return p
}

func (s *LambdaDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *LambdaDefContext) Closure() IClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureContext)
}

func (s *LambdaDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *LambdaDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *LambdaDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *LambdaDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *LambdaDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLambdaDef(s)
	}
}

func (s *LambdaDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLambdaDef(s)
	}
}

func (p *goscriptParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, goscriptParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(291)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(195)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(196)
			p.Match(goscriptParserT__0)
		}
		p.SetState(208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(197)
				p.Inparam()
			}
			p.SetState(202)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(198)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(199)
					p.Inparam()
				}

				p.SetState(204)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(206)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(205)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(210)
			p.Match(goscriptParserT__2)
		}
		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(211)
				p.Returntypename()
			}

		}
		{
			p.SetState(214)
			p.Closure()
		}

	case 2:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(215)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(216)
			p.Match(goscriptParserT__0)
		}
		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(217)
				p.Inparam()
			}
			p.SetState(222)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(218)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(219)
					p.Inparam()
				}

				p.SetState(224)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(226)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(225)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(230)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(231)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(232)
			p.Returntypename()
		}
		p.SetState(237)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(233)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(234)
				p.Returntypename()
			}

			p.SetState(239)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(240)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(241)
			p.Closure()
		}

	case 3:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(243)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(244)
			p.Match(goscriptParserT__0)
		}
		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(245)
				p.Inparam()
			}
			p.SetState(250)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(246)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(247)
					p.Inparam()
				}

				p.SetState(252)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(254)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(253)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(258)
			p.Match(goscriptParserT__2)
		}
		p.SetState(260)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(259)
				p.Outparam()
			}

		}
		{
			p.SetState(262)
			p.Closure()
		}

	case 4:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(263)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(264)
			p.Match(goscriptParserT__0)
		}
		p.SetState(276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(265)
				p.Inparam()
			}
			p.SetState(270)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(266)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(267)
					p.Inparam()
				}

				p.SetState(272)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(274)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(273)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(278)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(279)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(280)
			p.Outparam()
		}
		p.SetState(285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(281)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(282)
				p.Outparam()
			}

			p.SetState(287)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(288)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(289)
			p.Closure()
		}

	}

	return localctx
}

// IClosureContext is an interface to support dynamic dispatch.
type IClosureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureContext differentiates from other interfaces.
	IsClosureContext()
}

type ClosureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureContext() *ClosureContext {
	var p = new(ClosureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_closure
	return p
}

func (*ClosureContext) IsClosureContext() {}

func NewClosureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureContext {
	var p = new(ClosureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_closure

	return p
}

func (s *ClosureContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ClosureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterClosure(s)
	}
}

func (s *ClosureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitClosure(s)
	}
}

func (p *goscriptParser) Closure() (localctx IClosureContext) {
	localctx = NewClosureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, goscriptParserRULE_closure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(293)
		p.Block()
	}

	return localctx
}

// IInparamContext is an interface to support dynamic dispatch.
type IInparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInparamContext differentiates from other interfaces.
	IsInparamContext()
}

type InparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInparamContext() *InparamContext {
	var p = new(InparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_inparam
	return p
}

func (*InparamContext) IsInparamContext() {}

func NewInparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InparamContext {
	var p = new(InparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_inparam

	return p
}

func (s *InparamContext) GetParser() antlr.Parser { return s.parser }

func (s *InparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *InparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInparam(s)
	}
}

func (s *InparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInparam(s)
	}
}

func (p *goscriptParser) Inparam() (localctx IInparamContext) {
	localctx = NewInparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, goscriptParserRULE_inparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(295)
		p.Param()
	}

	return localctx
}

// IOutparamContext is an interface to support dynamic dispatch.
type IOutparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutparamContext differentiates from other interfaces.
	IsOutparamContext()
}

type OutparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutparamContext() *OutparamContext {
	var p = new(OutparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_outparam
	return p
}

func (*OutparamContext) IsOutparamContext() {}

func NewOutparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OutparamContext {
	var p = new(OutparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_outparam

	return p
}

func (s *OutparamContext) GetParser() antlr.Parser { return s.parser }

func (s *OutparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *OutparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OutparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOutparam(s)
	}
}

func (s *OutparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOutparam(s)
	}
}

func (p *goscriptParser) Outparam() (localctx IOutparamContext) {
	localctx = NewOutparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, goscriptParserRULE_outparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(297)
		p.Param()
	}

	return localctx
}

// IIntypenameContext is an interface to support dynamic dispatch.
type IIntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameContext differentiates from other interfaces.
	IsIntypenameContext()
}

type IntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameContext() *IntypenameContext {
	var p = new(IntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypename
	return p
}

func (*IntypenameContext) IsIntypenameContext() {}

func NewIntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameContext {
	var p = new(IntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypename

	return p
}

func (s *IntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *IntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypename(s)
	}
}

func (s *IntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypename(s)
	}
}

func (p *goscriptParser) Intypename() (localctx IIntypenameContext) {
	localctx = NewIntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, goscriptParserRULE_intypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(299)
		p.Typename()
	}

	return localctx
}

// IReturntypenameContext is an interface to support dynamic dispatch.
type IReturntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameContext differentiates from other interfaces.
	IsReturntypenameContext()
}

type ReturntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameContext() *ReturntypenameContext {
	var p = new(ReturntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypename
	return p
}

func (*ReturntypenameContext) IsReturntypenameContext() {}

func NewReturntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameContext {
	var p = new(ReturntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypename

	return p
}

func (s *ReturntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ReturntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypename(s)
	}
}

func (s *ReturntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypename(s)
	}
}

func (p *goscriptParser) Returntypename() (localctx IReturntypenameContext) {
	localctx = NewReturntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, goscriptParserRULE_returntypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(301)
		p.Typename()
	}

	return localctx
}

// IParamContext is an interface to support dynamic dispatch.
type IParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParamContext differentiates from other interfaces.
	IsParamContext()
}

type ParamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamContext() *ParamContext {
	var p = new(ParamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_param
	return p
}

func (*ParamContext) IsParamContext() {}

func NewParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamContext {
	var p = new(ParamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_param

	return p
}

func (s *ParamContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ParamContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterParam(s)
	}
}

func (s *ParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitParam(s)
	}
}

func (p *goscriptParser) Param() (localctx IParamContext) {
	localctx = NewParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, goscriptParserRULE_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(303)
		p.Name()
	}
	{
		p.SetState(304)
		p.Typename()
	}

	return localctx
}

// ITypenameContext is an interface to support dynamic dispatch.
type ITypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameContext differentiates from other interfaces.
	IsTypenameContext()
}

type TypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameContext() *TypenameContext {
	var p = new(TypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typename
	return p
}

func (*TypenameContext) IsTypenameContext() {}

func NewTypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameContext {
	var p = new(TypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typename

	return p
}

func (s *TypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameContext) CopyFrom(ctx *TypenameContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MapTypeNameContext struct {
	*TypenameContext
}

func NewMapTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameContext {
	var p = new(MapTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *MapTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *MapTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeName(s)
	}
}

func (s *MapTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeName(s)
	}
}

type FunctionTypeContext struct {
	*TypenameContext
}

func NewFunctionTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

type SimpleTypeNameContext struct {
	*TypenameContext
}

func NewSimpleTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SimpleTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SimpleTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeName(s)
	}
}

func (s *SimpleTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeName(s)
	}
}

type ChanTypeNameContext struct {
	*TypenameContext
}

func NewChanTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChanTypeNameContext {
	var p = new(ChanTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *ChanTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ChanTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeName(s)
	}
}

func (s *ChanTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeName(s)
	}
}

type SliceTypeNameContext struct {
	*TypenameContext
}

func NewSliceTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameContext {
	var p = new(SliceTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SliceTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *SliceTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeName(s)
	}
}

func (s *SliceTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeName(s)
	}
}

func (p *goscriptParser) Typename() (localctx ITypenameContext) {
	localctx = NewTypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, goscriptParserRULE_typename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(308)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserTYPEDEF, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
			{
				p.SetState(306)
				p.Name()
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserANY:
			{
				p.SetState(307)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewFunctionTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(310)
			p.FunctionTypeName()
		}

	case 3:
		localctx = NewMapTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(311)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(312)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(313)
			p.BasicTypeName()
		}
		{
			p.SetState(314)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(315)
			p.Typename()
		}

	case 4:
		localctx = NewSliceTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(317)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(318)
			p.Typename()
		}

	case 5:
		localctx = NewChanTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(319)
			p.Match(goscriptParserCHAN)
		}
		{
			p.SetState(320)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(321)
			p.Typename()
		}
		{
			p.SetState(322)
			p.Match(goscriptParserT__4)
		}

	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameContext) AllIntypename() []IIntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameContext)(nil)).Elem())
	var tst = make([]IIntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Intypename(i int) IIntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameContext)
}

func (s *FunctionTypeNameContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionTypeNameContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *goscriptParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, goscriptParserRULE_functionTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(326)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(327)
			p.Match(goscriptParserT__0)
		}
		p.SetState(339)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(328)
				p.Intypename()
			}
			p.SetState(333)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(329)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(330)
					p.Intypename()
				}

				p.SetState(335)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(337)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(336)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(341)
			p.Match(goscriptParserT__2)
		}
		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(342)
				p.Returntypename()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(345)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(346)
			p.Match(goscriptParserT__0)
		}
		p.SetState(358)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(347)
				p.Intypename()
			}
			p.SetState(352)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(348)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(349)
					p.Intypename()
				}

				p.SetState(354)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(356)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(355)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(360)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(361)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(362)
			p.Returntypename()
		}
		p.SetState(367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(363)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(364)
				p.Returntypename()
			}

			p.SetState(369)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(370)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// ITypedefContext is an interface to support dynamic dispatch.
type ITypedefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefContext differentiates from other interfaces.
	IsTypedefContext()
}

type TypedefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefContext() *TypedefContext {
	var p = new(TypedefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typedef
	return p
}

func (*TypedefContext) IsTypedefContext() {}

func NewTypedefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefContext {
	var p = new(TypedefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typedef

	return p
}

func (s *TypedefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefContext) CopyFrom(ctx *TypedefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypedefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeDefFunctionContext struct {
	*TypedefContext
}

func NewTypeDefFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefFunctionContext {
	var p = new(TypeDefFunctionContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefFunctionContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefFunctionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefFunctionContext) FunctionTypeNameindef() IFunctionTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameindefContext)
}

func (s *TypeDefFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefFunction(s)
	}
}

func (s *TypeDefFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefFunction(s)
	}
}

type TypeDefMapContext struct {
	*TypedefContext
}

func NewTypeDefMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefMapContext {
	var p = new(TypeDefMapContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefMapContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefMapContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefMapContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *TypeDefMapContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *TypeDefMapContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *TypeDefMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefMap(s)
	}
}

func (s *TypeDefMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefMap(s)
	}
}

type TypeDefMessageContext struct {
	*TypedefContext
}

func NewTypeDefMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefMessageContext {
	var p = new(TypeDefMessageContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefMessageContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefMessageContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefMessageContext) AllMessagefield() []IMessagefieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem())
	var tst = make([]IMessagefieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMessagefieldContext)
		}
	}

	return tst
}

func (s *TypeDefMessageContext) Messagefield(i int) IMessagefieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMessagefieldContext)
}

func (s *TypeDefMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefMessage(s)
	}
}

func (s *TypeDefMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefMessage(s)
	}
}

type TypeDefEnumContext struct {
	*TypedefContext
}

func NewTypeDefEnumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefEnumContext {
	var p = new(TypeDefEnumContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefEnumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefEnumContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefEnumContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *TypeDefEnumContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefEnumContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserINT)
}

func (s *TypeDefEnumContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, i)
}

func (s *TypeDefEnumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefEnum(s)
	}
}

func (s *TypeDefEnumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefEnum(s)
	}
}

type TypeDefSliceContext struct {
	*TypedefContext
}

func NewTypeDefSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefSliceContext {
	var p = new(TypeDefSliceContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefSliceContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefSliceContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefSliceContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *TypeDefSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefSlice(s)
	}
}

func (s *TypeDefSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefSlice(s)
	}
}

func (p *goscriptParser) Typedef() (localctx ITypedefContext) {
	localctx = NewTypedefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, goscriptParserRULE_typedef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(419)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTypeDefMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(374)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(375)
			p.Name()
		}
		{
			p.SetState(376)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(377)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(378)
			p.BasicTypeName()
		}
		{
			p.SetState(379)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(380)
			p.Typenameindef()
		}

	case 2:
		localctx = NewTypeDefSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(382)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(383)
			p.Name()
		}
		{
			p.SetState(384)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(385)
			p.Typenameindef()
		}

	case 3:
		localctx = NewTypeDefMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(387)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(388)
			p.Name()
		}
		{
			p.SetState(389)
			p.Match(goscriptParserT__6)
		}
		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserUINT32-22))|(1<<(goscriptParserUINT64-22))|(1<<(goscriptParserINT32-22))|(1<<(goscriptParserINT64-22))|(1<<(goscriptParserFLOAT32-22))|(1<<(goscriptParserFLOAT64-22))|(1<<(goscriptParserSTRING-22))|(1<<(goscriptParserBYTES-22))|(1<<(goscriptParserBOOL-22))|(1<<(goscriptParserUINT8-22))|(1<<(goscriptParserCHAN-22))|(1<<(goscriptParserANY-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(390)
				p.Messagefield()
			}
			p.SetState(394)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserUINT32-22))|(1<<(goscriptParserUINT64-22))|(1<<(goscriptParserINT32-22))|(1<<(goscriptParserINT64-22))|(1<<(goscriptParserFLOAT32-22))|(1<<(goscriptParserFLOAT64-22))|(1<<(goscriptParserSTRING-22))|(1<<(goscriptParserBYTES-22))|(1<<(goscriptParserBOOL-22))|(1<<(goscriptParserUINT8-22))|(1<<(goscriptParserCHAN-22))|(1<<(goscriptParserANY-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
				{
					p.SetState(391)
					p.Messagefield()
				}

				p.SetState(396)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(399)
			p.Match(goscriptParserT__7)
		}

	case 4:
		localctx = NewTypeDefEnumContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(401)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(402)
			p.Name()
		}
		{
			p.SetState(403)
			p.Match(goscriptParserT__6)
		}
		p.SetState(410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(404)
				p.Name()
			}
			{
				p.SetState(405)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(406)
				p.Match(goscriptParserINT)
			}

			p.SetState(412)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(413)
			p.Match(goscriptParserT__7)
		}

	case 5:
		localctx = NewTypeDefFunctionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(415)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(416)
			p.Name()
		}
		{
			p.SetState(417)
			p.FunctionTypeNameindef()
		}

	}

	return localctx
}

// IMessagefieldContext is an interface to support dynamic dispatch.
type IMessagefieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMessagefieldContext differentiates from other interfaces.
	IsMessagefieldContext()
}

type MessagefieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMessagefieldContext() *MessagefieldContext {
	var p = new(MessagefieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_messagefield
	return p
}

func (*MessagefieldContext) IsMessagefieldContext() {}

func NewMessagefieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MessagefieldContext {
	var p = new(MessagefieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_messagefield

	return p
}

func (s *MessagefieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MessagefieldContext) CopyFrom(ctx *MessagefieldContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *MessagefieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MessagefieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FieldDefContext struct {
	*MessagefieldContext
}

func NewFieldDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FieldDefContext {
	var p = new(FieldDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *FieldDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *FieldDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *FieldDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFieldDef(s)
	}
}

func (s *FieldDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFieldDef(s)
	}
}

type OneofDefContext struct {
	*MessagefieldContext
}

func NewOneofDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OneofDefContext {
	var p = new(OneofDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *OneofDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneofDefContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *OneofDefContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *OneofDefContext) AllOneoffield() []IOneoffieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem())
	var tst = make([]IOneoffieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOneoffieldContext)
		}
	}

	return tst
}

func (s *OneofDefContext) Oneoffield(i int) IOneoffieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOneoffieldContext)
}

func (s *OneofDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneofDef(s)
	}
}

func (s *OneofDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneofDef(s)
	}
}

func (p *goscriptParser) Messagefield() (localctx IMessagefieldContext) {
	localctx = NewMessagefieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, goscriptParserRULE_messagefield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(436)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFieldDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(421)
			p.Fieldname()
		}
		{
			p.SetState(422)
			p.Typenameindef()
		}

	case 2:
		localctx = NewOneofDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(424)
			p.Match(goscriptParserONEOF)
		}
		{
			p.SetState(425)
			p.Fieldname()
		}
		{
			p.SetState(426)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(427)
			p.Oneoffield()
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(goscriptParserTYPEDEF-22))|(1<<(goscriptParserMAP-22))|(1<<(goscriptParserONEOF-22))|(1<<(goscriptParserUINT32-22))|(1<<(goscriptParserUINT64-22))|(1<<(goscriptParserINT32-22))|(1<<(goscriptParserINT64-22))|(1<<(goscriptParserFLOAT32-22))|(1<<(goscriptParserFLOAT64-22))|(1<<(goscriptParserSTRING-22))|(1<<(goscriptParserBYTES-22))|(1<<(goscriptParserBOOL-22))|(1<<(goscriptParserUINT8-22))|(1<<(goscriptParserCHAN-22))|(1<<(goscriptParserANY-22))|(1<<(goscriptParserFOR-22))|(1<<(goscriptParserBREAK-22))|(1<<(goscriptParserCONTINUE-22))|(1<<(goscriptParserIF-22))|(1<<(goscriptParserELSE-22))|(1<<(goscriptParserSWITCH-22))|(1<<(goscriptParserCASE-22))|(1<<(goscriptParserRETURN-22))|(1<<(goscriptParserVAR-22))|(1<<(goscriptParserLOCAL-22))|(1<<(goscriptParserCONST-22)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(428)
				p.Oneoffield()
			}

			p.SetState(433)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(434)
			p.Match(goscriptParserT__7)
		}

	}

	return localctx
}

// IOneoffieldContext is an interface to support dynamic dispatch.
type IOneoffieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOneoffieldContext differentiates from other interfaces.
	IsOneoffieldContext()
}

type OneoffieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOneoffieldContext() *OneoffieldContext {
	var p = new(OneoffieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_oneoffield
	return p
}

func (*OneoffieldContext) IsOneoffieldContext() {}

func NewOneoffieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OneoffieldContext {
	var p = new(OneoffieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_oneoffield

	return p
}

func (s *OneoffieldContext) GetParser() antlr.Parser { return s.parser }

func (s *OneoffieldContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *OneoffieldContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *OneoffieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneoffieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OneoffieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneoffield(s)
	}
}

func (s *OneoffieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneoffield(s)
	}
}

func (p *goscriptParser) Oneoffield() (localctx IOneoffieldContext) {
	localctx = NewOneoffieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, goscriptParserRULE_oneoffield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Fieldname()
	}
	{
		p.SetState(439)
		p.Typenameindef()
	}

	return localctx
}

// ITypenameindefContext is an interface to support dynamic dispatch.
type ITypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameindefContext differentiates from other interfaces.
	IsTypenameindefContext()
}

type TypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameindefContext() *TypenameindefContext {
	var p = new(TypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typenameindef
	return p
}

func (*TypenameindefContext) IsTypenameindefContext() {}

func NewTypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameindefContext {
	var p = new(TypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typenameindef

	return p
}

func (s *TypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameindefContext) CopyFrom(ctx *TypenameindefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ChanTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewChanTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChanTypeNameInDefContext {
	var p = new(ChanTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *ChanTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameInDefContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ChanTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeNameInDef(s)
	}
}

func (s *ChanTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeNameInDef(s)
	}
}

type SimpleTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewSimpleTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameInDefContext {
	var p = new(SimpleTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *SimpleTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameInDefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SimpleTypeNameInDefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeNameInDef(s)
	}
}

func (s *SimpleTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeNameInDef(s)
	}
}

type MapTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewMapTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameInDefContext {
	var p = new(MapTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *MapTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameInDefContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameInDefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *MapTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeNameInDef(s)
	}
}

func (s *MapTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeNameInDef(s)
	}
}

type FunctionTypeInDefContext struct {
	*TypenameindefContext
}

func NewFunctionTypeInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeInDefContext {
	var p = new(FunctionTypeInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *FunctionTypeInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeInDefContext) FunctionTypeNameindef() IFunctionTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameindefContext)
}

func (s *FunctionTypeInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeInDef(s)
	}
}

func (s *FunctionTypeInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeInDef(s)
	}
}

type SliceTypeNameInDefContext struct {
	*TypenameindefContext
}

func NewSliceTypeNameInDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameInDefContext {
	var p = new(SliceTypeNameInDefContext)

	p.TypenameindefContext = NewEmptyTypenameindefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameindefContext))

	return p
}

func (s *SliceTypeNameInDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameInDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *SliceTypeNameInDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeNameInDef(s)
	}
}

func (s *SliceTypeNameInDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeNameInDef(s)
	}
}

func (p *goscriptParser) Typenameindef() (localctx ITypenameindefContext) {
	localctx = NewTypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, goscriptParserRULE_typenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(443)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserTYPEDEF, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
			{
				p.SetState(441)
				p.Name()
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserANY:
			{
				p.SetState(442)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewFunctionTypeInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(445)
			p.FunctionTypeNameindef()
		}

	case 3:
		localctx = NewMapTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(446)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(447)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(448)
			p.BasicTypeName()
		}
		{
			p.SetState(449)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(450)
			p.Typenameindef()
		}

	case 4:
		localctx = NewSliceTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(452)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(453)
			p.Typenameindef()
		}

	case 5:
		localctx = NewChanTypeNameInDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(454)
			p.Match(goscriptParserCHAN)
		}
		{
			p.SetState(455)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(456)
			p.Typenameindef()
		}
		{
			p.SetState(457)
			p.Match(goscriptParserT__4)
		}

	}

	return localctx
}

// IFunctionTypeNameindefContext is an interface to support dynamic dispatch.
type IFunctionTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameindefContext differentiates from other interfaces.
	IsFunctionTypeNameindefContext()
}

type FunctionTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameindefContext() *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef
	return p
}

func (*FunctionTypeNameindefContext) IsFunctionTypeNameindefContext() {}

func NewFunctionTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef

	return p
}

func (s *FunctionTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameindefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameindefContext) AllIntypenameindef() []IIntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem())
	var tst = make([]IIntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Intypenameindef(i int) IIntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) AllReturntypenameindef() []IReturntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem())
	var tst = make([]IReturntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Returntypenameindef(i int) IReturntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeNameindef(s)
	}
}

func (s *FunctionTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeNameindef(s)
	}
}

func (p *goscriptParser) FunctionTypeNameindef() (localctx IFunctionTypeNameindefContext) {
	localctx = NewFunctionTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, goscriptParserRULE_functionTypeNameindef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(507)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(461)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(462)
			p.Match(goscriptParserT__0)
		}
		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(463)
				p.Intypenameindef()
			}
			p.SetState(468)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(464)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(465)
					p.Intypenameindef()
				}

				p.SetState(470)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(472)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(471)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(476)
			p.Match(goscriptParserT__2)
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(477)
				p.Returntypenameindef()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(480)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(481)
			p.Match(goscriptParserT__0)
		}
		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserCHAN-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(482)
				p.Intypenameindef()
			}
			p.SetState(487)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(483)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(484)
					p.Intypenameindef()
				}

				p.SetState(489)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(491)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(490)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(495)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(496)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(497)
			p.Returntypenameindef()
		}
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(498)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(499)
				p.Returntypenameindef()
			}

			p.SetState(504)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(505)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// IIntypenameindefContext is an interface to support dynamic dispatch.
type IIntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameindefContext differentiates from other interfaces.
	IsIntypenameindefContext()
}

type IntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameindefContext() *IntypenameindefContext {
	var p = new(IntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypenameindef
	return p
}

func (*IntypenameindefContext) IsIntypenameindefContext() {}

func NewIntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameindefContext {
	var p = new(IntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypenameindef

	return p
}

func (s *IntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *IntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypenameindef(s)
	}
}

func (s *IntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypenameindef(s)
	}
}

func (p *goscriptParser) Intypenameindef() (localctx IIntypenameindefContext) {
	localctx = NewIntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, goscriptParserRULE_intypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(509)
		p.Typenameindef()
	}

	return localctx
}

// IReturntypenameindefContext is an interface to support dynamic dispatch.
type IReturntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameindefContext differentiates from other interfaces.
	IsReturntypenameindefContext()
}

type ReturntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameindefContext() *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypenameindef
	return p
}

func (*ReturntypenameindefContext) IsReturntypenameindefContext() {}

func NewReturntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypenameindef

	return p
}

func (s *ReturntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ReturntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypenameindef(s)
	}
}

func (s *ReturntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypenameindef(s)
	}
}

func (p *goscriptParser) Returntypenameindef() (localctx IReturntypenameindefContext) {
	localctx = NewReturntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, goscriptParserRULE_returntypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(511)
		p.Typenameindef()
	}

	return localctx
}

// IExecutionContext is an interface to support dynamic dispatch.
type IExecutionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecutionContext differentiates from other interfaces.
	IsExecutionContext()
}

type ExecutionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecutionContext() *ExecutionContext {
	var p = new(ExecutionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_execution
	return p
}

func (*ExecutionContext) IsExecutionContext() {}

func NewExecutionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecutionContext {
	var p = new(ExecutionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_execution

	return p
}

func (s *ExecutionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecutionContext) CopyFrom(ctx *ExecutionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExecutionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecutionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LineProgramContext struct {
	*ExecutionContext
}

func NewLineProgramContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LineProgramContext {
	var p = new(LineProgramContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *LineProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineProgramContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *LineProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLineProgram(s)
	}
}

func (s *LineProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLineProgram(s)
	}
}

type CtrlContext struct {
	*ExecutionContext
}

func NewCtrlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CtrlContext {
	var p = new(CtrlContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *CtrlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtrlContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *CtrlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCtrl(s)
	}
}

func (s *CtrlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCtrl(s)
	}
}

func (p *goscriptParser) Execution() (localctx IExecutionContext) {
	localctx = NewExecutionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, goscriptParserRULE_execution)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCtrlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(513)
			p.Control()
		}

	case 2:
		localctx = NewLineProgramContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(514)
			p.Line()
		}
		{
			p.SetState(515)
			p.Match(goscriptParserT__9)
		}

	}

	return localctx
}

// IControlContext is an interface to support dynamic dispatch.
type IControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlContext differentiates from other interfaces.
	IsControlContext()
}

type ControlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlContext() *ControlContext {
	var p = new(ControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_control
	return p
}

func (*ControlContext) IsControlContext() {}

func NewControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlContext {
	var p = new(ControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_control

	return p
}

func (s *ControlContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlContext) CopyFrom(ctx *ControlContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReturnVoidContext struct {
	*ControlContext
}

func NewReturnVoidContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnVoidContext {
	var p = new(ReturnVoidContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnVoidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnVoidContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnVoidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVoid(s)
	}
}

func (s *ReturnVoidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVoid(s)
	}
}

type ForInSliceContext struct {
	*ControlContext
}

func NewForInSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInSliceContext {
	var p = new(ForInSliceContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInSliceContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInSliceContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ForInSliceContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInSliceContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInSlice(s)
	}
}

func (s *ForInSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInSlice(s)
	}
}

type SwitchContext struct {
	*ControlContext
}

func NewSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SwitchContext {
	var p = new(SwitchContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *SwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *SwitchContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SwitchContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserCASE)
}

func (s *SwitchContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, i)
}

func (s *SwitchContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *SwitchContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *SwitchContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *SwitchContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSwitch(s)
	}
}

func (s *SwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSwitch(s)
	}
}

type ReturnValContext struct {
	*ControlContext
}

func NewReturnValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnValContext {
	var p = new(ReturnValContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnValContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnValContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ReturnValContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVal(s)
	}
}

func (s *ReturnValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVal(s)
	}
}

type ForInMapContext struct {
	*ControlContext
}

func NewForInMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInMapContext {
	var p = new(ForInMapContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInMapContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInMapContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *ForInMapContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ForInMapContext) Collection() ICollectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ForInMapContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInMap(s)
	}
}

func (s *ForInMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInMap(s)
	}
}

type ForContext struct {
	*ControlContext
}

func NewForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForContext {
	var p = new(ForContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *ForContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *ForContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFor(s)
	}
}

func (s *ForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFor(s)
	}
}

type BreakContext struct {
	*ControlContext
}

func NewBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BreakContext {
	var p = new(BreakContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *BreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *BreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBreak(s)
	}
}

func (s *BreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBreak(s)
	}
}

type ContinueContext struct {
	*ControlContext
}

func NewContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ContinueContext {
	var p = new(ContinueContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *ContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterContinue(s)
	}
}

func (s *ContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitContinue(s)
	}
}

type IfContext struct {
	*ControlContext
}

func NewIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfContext {
	var p = new(IfContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *IfContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *IfContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *IfContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIf(s)
	}
}

func (s *IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIf(s)
	}
}

func (p *goscriptParser) Control() (localctx IControlContext) {
	localctx = NewControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, goscriptParserRULE_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(519)
			p.Match(goscriptParserIF)
		}
		{
			p.SetState(520)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(521)
			p.expr(0)
		}
		{
			p.SetState(522)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(523)
			p.Block()
		}
		p.SetState(529)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(524)
				p.Match(goscriptParserELSE)
			}
			p.SetState(527)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case goscriptParserT__6:
				{
					p.SetState(525)
					p.Block()
				}

			case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
				{
					p.SetState(526)
					p.Control()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	case 2:
		localctx = NewSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(531)
			p.Match(goscriptParserSWITCH)
		}
		{
			p.SetState(532)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(533)
			p.expr(0)
		}
		{
			p.SetState(534)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(535)
			p.Match(goscriptParserT__6)
		}
		p.SetState(541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserCASE {
			{
				p.SetState(536)
				p.Match(goscriptParserCASE)
			}
			{
				p.SetState(537)
				p.Constant()
			}
			{
				p.SetState(538)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(539)
				p.Block()
			}

			p.SetState(543)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(545)
			p.Match(goscriptParserT__7)
		}

	case 3:
		localctx = NewForInSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(547)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(548)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(549)
			p.Name()
		}
		{
			p.SetState(550)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(551)
			p.Collection()
		}
		{
			p.SetState(552)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(553)
			p.Block()
		}

	case 4:
		localctx = NewForInMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(555)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(556)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(557)
			p.Name()
		}
		{
			p.SetState(558)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(559)
			p.Name()
		}
		{
			p.SetState(560)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(561)
			p.Collection()
		}
		{
			p.SetState(562)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(563)
			p.Block()
		}

	case 5:
		localctx = NewForContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(565)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(566)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(567)
			p.Line()
		}
		{
			p.SetState(568)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(569)
			p.expr(0)
		}
		{
			p.SetState(570)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(571)
			p.RestoreStack()
		}
		{
			p.SetState(572)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(573)
			p.Block()
		}

	case 6:
		localctx = NewBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(575)
			p.Match(goscriptParserBREAK)
		}
		{
			p.SetState(576)
			p.Match(goscriptParserT__9)
		}

	case 7:
		localctx = NewContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(577)
			p.Match(goscriptParserCONTINUE)
		}
		{
			p.SetState(578)
			p.Match(goscriptParserT__9)
		}

	case 8:
		localctx = NewReturnVoidContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(579)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(580)
			p.Match(goscriptParserT__9)
		}

	case 9:
		localctx = NewReturnValContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(581)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(582)
			p.expr(0)
		}
		p.SetState(587)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(583)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(584)
				p.expr(0)
			}

			p.SetState(589)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(590)
			p.Match(goscriptParserT__9)
		}

	}

	return localctx
}

// ICollectionContext is an interface to support dynamic dispatch.
type ICollectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionContext differentiates from other interfaces.
	IsCollectionContext()
}

type CollectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionContext() *CollectionContext {
	var p = new(CollectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_collection
	return p
}

func (*CollectionContext) IsCollectionContext() {}

func NewCollectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionContext {
	var p = new(CollectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_collection

	return p
}

func (s *CollectionContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CollectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCollection(s)
	}
}

func (s *CollectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCollection(s)
	}
}

func (p *goscriptParser) Collection() (localctx ICollectionContext) {
	localctx = NewCollectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, goscriptParserRULE_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.expr(0)
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *BlockContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *goscriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, goscriptParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(goscriptParserT__6)
	}
	p.SetState(600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__11)|(1<<goscriptParserT__14)|(1<<goscriptParserT__15)|(1<<goscriptParserT__16)|(1<<goscriptParserT__17)|(1<<goscriptParserT__18)|(1<<goscriptParserT__19)|(1<<goscriptParserT__20)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(goscriptParserNOT-68))|(1<<(goscriptParserCHANOP-68))|(1<<(goscriptParserCHANOPNONBLOCK-68))|(1<<(goscriptParserINT-68))|(1<<(goscriptParserFLOAT-68))|(1<<(goscriptParserSTRINGLITERAL-68))|(1<<(goscriptParserNAME-68)))) != 0) {
		{
			p.SetState(597)
			p.Execution()
		}

		p.SetState(602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(603)
		p.Match(goscriptParserT__7)
	}

	return localctx
}

// ILineContext is an interface to support dynamic dispatch.
type ILineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineContext differentiates from other interfaces.
	IsLineContext()
}

type LineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineContext() *LineContext {
	var p = new(LineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_line
	return p
}

func (*LineContext) IsLineContext() {}

func NewLineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineContext {
	var p = new(LineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_line

	return p
}

func (s *LineContext) GetParser() antlr.Parser { return s.parser }

func (s *LineContext) CopyFrom(ctx *LineContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VarDefContext struct {
	*LineContext
}

func NewVarDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VarDefContext {
	var p = new(VarDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *VarDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarDefContext) Vardef() IVardefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVardefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVardefContext)
}

func (s *VarDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVarDef(s)
	}
}

func (s *VarDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVarDef(s)
	}
}

type ConstDefContext struct {
	*LineContext
}

func NewConstDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstDefContext {
	var p = new(ConstDefContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *ConstDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDefContext) Constdef() IConstdefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstdefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstdefContext)
}

func (s *ConstDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstDef(s)
	}
}

func (s *ConstDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstDef(s)
	}
}

type RestoreStackSpContext struct {
	*LineContext
}

func NewRestoreStackSpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RestoreStackSpContext {
	var p = new(RestoreStackSpContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *RestoreStackSpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackSpContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *RestoreStackSpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStackSp(s)
	}
}

func (s *RestoreStackSpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStackSp(s)
	}
}

func (p *goscriptParser) Line() (localctx ILineContext) {
	localctx = NewLineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, goscriptParserRULE_line)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(608)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRestoreStackSpContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(605)
			p.RestoreStack()
		}

	case 2:
		localctx = NewVarDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(606)
			p.Vardef()
		}

	case 3:
		localctx = NewConstDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(607)
			p.Constdef()
		}

	}

	return localctx
}

// IRestoreStackContext is an interface to support dynamic dispatch.
type IRestoreStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestoreStackContext differentiates from other interfaces.
	IsRestoreStackContext()
}

type RestoreStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestoreStackContext() *RestoreStackContext {
	var p = new(RestoreStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_restoreStack
	return p
}

func (*RestoreStackContext) IsRestoreStackContext() {}

func NewRestoreStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestoreStackContext {
	var p = new(RestoreStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_restoreStack

	return p
}

func (s *RestoreStackContext) GetParser() antlr.Parser { return s.parser }

func (s *RestoreStackContext) KeepStack() IKeepStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeepStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeepStackContext)
}

func (s *RestoreStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestoreStackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStack(s)
	}
}

func (s *RestoreStackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStack(s)
	}
}

func (p *goscriptParser) RestoreStack() (localctx IRestoreStackContext) {
	localctx = NewRestoreStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, goscriptParserRULE_restoreStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(610)
		p.KeepStack()
	}

	return localctx
}

// IKeepStackContext is an interface to support dynamic dispatch.
type IKeepStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeepStackContext differentiates from other interfaces.
	IsKeepStackContext()
}

type KeepStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeepStackContext() *KeepStackContext {
	var p = new(KeepStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_keepStack
	return p
}

func (*KeepStackContext) IsKeepStackContext() {}

func NewKeepStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeepStackContext {
	var p = new(KeepStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_keepStack

	return p
}

func (s *KeepStackContext) GetParser() antlr.Parser { return s.parser }

func (s *KeepStackContext) CopyFrom(ctx *KeepStackContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *KeepStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeepStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprEntryContext struct {
	*KeepStackContext
}

func NewExprEntryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprEntryContext {
	var p = new(ExprEntryContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *ExprEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprEntryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterExprEntry(s)
	}
}

func (s *ExprEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitExprEntry(s)
	}
}

type FunctionAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewFunctionAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionAssignContext {
	var p = new(FunctionAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *FunctionAssignContext) GetOp() antlr.Token { return s.op }

func (s *FunctionAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *FunctionAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionAssignContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *FunctionAssignContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FunctionAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *FunctionAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionAssign(s)
	}
}

func (s *FunctionAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionAssign(s)
	}
}

func (p *goscriptParser) KeepStack() (localctx IKeepStackContext) {
	localctx = NewKeepStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, goscriptParserRULE_keepStack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprEntryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(612)
			p.expr(0)
		}

	case 2:
		localctx = NewFunctionAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(613)
			p.expr(0)
		}
		p.SetState(616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserT__1 {
			{
				p.SetState(614)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(615)
				p.expr(0)
			}

			p.SetState(618)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(620)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*FunctionAssignContext).op = _m
		}
		{
			p.SetState(621)
			p.expr(0)
		}

	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) CopyFrom(ctx *VariableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VariableNameContext struct {
	*VariableContext
}

func NewVariableNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableNameContext {
	var p = new(VariableNameContext)

	p.VariableContext = NewEmptyVariableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*VariableContext))

	return p
}

func (s *VariableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *VariableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVariableName(s)
	}
}

func (s *VariableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVariableName(s)
	}
}

func (p *goscriptParser) Variable() (localctx IVariableContext) {
	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, goscriptParserRULE_variable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(627)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserTYPEDEF, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
		localctx = NewVariableNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(625)
			p.Name()
		}

	case goscriptParserT__11:
		localctx = NewVariableNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(626)
			p.Match(goscriptParserT__11)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssertedContext is an interface to support dynamic dispatch.
type IAssertedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertedContext differentiates from other interfaces.
	IsAssertedContext()
}

type AssertedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertedContext() *AssertedContext {
	var p = new(AssertedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_asserted
	return p
}

func (*AssertedContext) IsAssertedContext() {}

func NewAssertedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssertedContext {
	var p = new(AssertedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_asserted

	return p
}

func (s *AssertedContext) GetParser() antlr.Parser { return s.parser }

func (s *AssertedContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *AssertedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssertedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssertedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAsserted(s)
	}
}

func (s *AssertedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAsserted(s)
	}
}

func (p *goscriptParser) Asserted() (localctx IAssertedContext) {
	localctx = NewAssertedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, goscriptParserRULE_asserted)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(629)
		p.Typename()
	}

	return localctx
}

// IFilterContext is an interface to support dynamic dispatch.
type IFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterContext differentiates from other interfaces.
	IsFilterContext()
}

type FilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterContext() *FilterContext {
	var p = new(FilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_filter
	return p
}

func (*FilterContext) IsFilterContext() {}

func NewFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterContext {
	var p = new(FilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_filter

	return p
}

func (s *FilterContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFilter(s)
	}
}

func (s *FilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFilter(s)
	}
}

func (p *goscriptParser) Filter() (localctx IFilterContext) {
	localctx = NewFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, goscriptParserRULE_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		p.expr(0)
	}

	return localctx
}

// IIndexsContext is an interface to support dynamic dispatch.
type IIndexsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexsContext differentiates from other interfaces.
	IsIndexsContext()
}

type IndexsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexsContext() *IndexsContext {
	var p = new(IndexsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_indexs
	return p
}

func (*IndexsContext) IsIndexsContext() {}

func NewIndexsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexsContext {
	var p = new(IndexsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_indexs

	return p
}

func (s *IndexsContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexsContext) CopyFrom(ctx *IndexsContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IndexType1Context struct {
	*IndexsContext
}

func NewIndexType1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType1Context {
	var p = new(IndexType1Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType1Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType1Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType1(s)
	}
}

func (s *IndexType1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType1(s)
	}
}

type IndexType3Context struct {
	*IndexsContext
}

func NewIndexType3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType3Context {
	var p = new(IndexType3Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType3Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType3(s)
	}
}

func (s *IndexType3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType3(s)
	}
}

type IndexType2Context struct {
	*IndexsContext
}

func NewIndexType2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType2Context {
	var p = new(IndexType2Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType2Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType2Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType2(s)
	}
}

func (s *IndexType2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType2(s)
	}
}

type IndexType5Context struct {
	*IndexsContext
}

func NewIndexType5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType5Context {
	var p = new(IndexType5Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType5Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType5(s)
	}
}

func (s *IndexType5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType5(s)
	}
}

type IndexType4Context struct {
	*IndexsContext
}

func NewIndexType4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType4Context {
	var p = new(IndexType4Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType4Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType4(s)
	}
}

func (s *IndexType4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType4(s)
	}
}

func (p *goscriptParser) Indexs() (localctx IIndexsContext) {
	localctx = NewIndexsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, goscriptParserRULE_indexs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIndexType1Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(633)
			p.expr(0)
		}
		{
			p.SetState(634)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(635)
			p.expr(0)
		}
		{
			p.SetState(636)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(637)
			p.expr(0)
		}

	case 2:
		localctx = NewIndexType2Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(639)
			p.expr(0)
		}
		{
			p.SetState(640)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(641)
			p.expr(0)
		}

	case 3:
		localctx = NewIndexType3Context(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(643)
			p.expr(0)
		}
		{
			p.SetState(644)
			p.Match(goscriptParserT__8)
		}

	case 4:
		localctx = NewIndexType4Context(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(646)
			p.expr(0)
		}

	case 5:
		localctx = NewIndexType5Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(647)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(648)
			p.expr(0)
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyFrom(ctx *ExprContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RecvContext struct {
	*ExprContext
}

func NewRecvContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RecvContext {
	var p = new(RecvContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RecvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecvContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *RecvContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *RecvContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *RecvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRecv(s)
	}
}

func (s *RecvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRecv(s)
	}
}

type SliceFilterContext struct {
	*ExprContext
}

func NewSliceFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceFilterContext {
	var p = new(SliceFilterContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SliceFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFilterContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SliceFilterContext) Filter() IFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterContext)
}

func (s *SliceFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceFilter(s)
	}
}

func (s *SliceFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceFilter(s)
	}
}

type DirectCallContext struct {
	*ExprContext
}

func NewDirectCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DirectCallContext {
	var p = new(DirectCallContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *DirectCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectCallContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *DirectCallContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DirectCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterDirectCall(s)
	}
}

func (s *DirectCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitDirectCall(s)
	}
}

type IndexContext struct {
	*ExprContext
}

func NewIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexContext {
	var p = new(IndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndex(s)
	}
}

type MapMultiIndexContext struct {
	*ExprContext
}

func NewMapMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapMultiIndexContext {
	var p = new(MapMultiIndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *MapMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapMultiIndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MapMultiIndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MapMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapMultiIndex(s)
	}
}

func (s *MapMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapMultiIndex(s)
	}
}

type SendContext struct {
	*ExprContext
}

func NewSendContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SendContext {
	var p = new(SendContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SendContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *SendContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SendContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *SendContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *SendContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSend(s)
	}
}

func (s *SendContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSend(s)
	}
}

type PassContext struct {
	*ExprContext
}

func NewPassContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PassContext {
	var p = new(PassContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *PassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PassContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PassContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PassContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *PassContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *PassContext) Builtin() IBuiltinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBuiltinContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBuiltinContext)
}

func (s *PassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterPass(s)
	}
}

func (s *PassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitPass(s)
	}
}

type SelectContext struct {
	*ExprContext
}

func NewSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectContext {
	var p = new(SelectContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SelectContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *SelectContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSelect(s)
	}
}

type ConstructContext struct {
	*ExprContext
}

func NewConstructContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstructContext {
	var p = new(ConstructContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *ConstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructContext) Constructor() IConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorContext)
}

func (s *ConstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstruct(s)
	}
}

func (s *ConstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstruct(s)
	}
}

type BinaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryContext {
	var p = new(BinaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *BinaryContext) GetOp() antlr.Token { return s.op }

func (s *BinaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *BinaryContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BinaryContext) POW() antlr.TerminalNode {
	return s.GetToken(goscriptParserPOW, 0)
}

func (s *BinaryContext) MUL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMUL, 0)
}

func (s *BinaryContext) DIV() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIV, 0)
}

func (s *BinaryContext) MOD() antlr.TerminalNode {
	return s.GetToken(goscriptParserMOD, 0)
}

func (s *BinaryContext) ADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserADD, 0)
}

func (s *BinaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *BinaryContext) EQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserEQ, 0)
}

func (s *BinaryContext) INEQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserINEQ, 0)
}

func (s *BinaryContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *BinaryContext) GE() antlr.TerminalNode {
	return s.GetToken(goscriptParserGE, 0)
}

func (s *BinaryContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *BinaryContext) LE() antlr.TerminalNode {
	return s.GetToken(goscriptParserLE, 0)
}

func (s *BinaryContext) REGEX() antlr.TerminalNode {
	return s.GetToken(goscriptParserREGEX, 0)
}

func (s *BinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(goscriptParserAND, 0)
}

func (s *BinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(goscriptParserOR, 0)
}

func (s *BinaryContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *BinaryContext) ADDEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserADDEQUAL, 0)
}

func (s *BinaryContext) SUBEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUBEQUAL, 0)
}

func (s *BinaryContext) MULEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMULEQUAL, 0)
}

func (s *BinaryContext) DIVEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIVEQUAL, 0)
}

func (s *BinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBinary(s)
	}
}

func (s *BinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBinary(s)
	}
}

type LeftUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewLeftUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LeftUnaryContext {
	var p = new(LeftUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *LeftUnaryContext) GetOp() antlr.Token { return s.op }

func (s *LeftUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *LeftUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LeftUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *LeftUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *LeftUnaryContext) NOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserNOT, 0)
}

func (s *LeftUnaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *LeftUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLeftUnary(s)
	}
}

func (s *LeftUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLeftUnary(s)
	}
}

type TypeAssertContext struct {
	*ExprContext
}

func NewTypeAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeAssertContext {
	var p = new(TypeAssertContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *TypeAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAssertContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TypeAssertContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *TypeAssertContext) Asserted() IAssertedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssertedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssertedContext)
}

func (s *TypeAssertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeAssert(s)
	}
}

func (s *TypeAssertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeAssert(s)
	}
}

type SliceMultiIndexContext struct {
	*ExprContext
}

func NewSliceMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceMultiIndexContext {
	var p = new(SliceMultiIndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SliceMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceMultiIndexContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SliceMultiIndexContext) AllIndexs() []IIndexsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexsContext)(nil)).Elem())
	var tst = make([]IIndexsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexsContext)
		}
	}

	return tst
}

func (s *SliceMultiIndexContext) Indexs(i int) IIndexsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexsContext)
}

func (s *SliceMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceMultiIndex(s)
	}
}

func (s *SliceMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceMultiIndex(s)
	}
}

type RightUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewRightUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RightUnaryContext {
	var p = new(RightUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RightUnaryContext) GetOp() antlr.Token { return s.op }

func (s *RightUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *RightUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RightUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *RightUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *RightUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *RightUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRightUnary(s)
	}
}

func (s *RightUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRightUnary(s)
	}
}

type AssignInitializationlistContext struct {
	*ExprContext
	op antlr.Token
}

func NewAssignInitializationlistContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignInitializationlistContext {
	var p = new(AssignInitializationlistContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *AssignInitializationlistContext) GetOp() antlr.Token { return s.op }

func (s *AssignInitializationlistContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignInitializationlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignInitializationlistContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignInitializationlistContext) InitializationListBegin() IInitializationListBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListBeginContext)
}

func (s *AssignInitializationlistContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *AssignInitializationlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAssignInitializationlist(s)
	}
}

func (s *AssignInitializationlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAssignInitializationlist(s)
	}
}

func (p *goscriptParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *goscriptParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, goscriptParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(665)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserT__0:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(652)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(653)
			p.expr(0)
		}
		{
			p.SetState(654)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserBOOLLITERAL, goscriptParserNULL, goscriptParserINT, goscriptParserFLOAT, goscriptParserSTRINGLITERAL:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(656)
			p.Constant()
		}

	case goscriptParserT__11, goscriptParserTYPEDEF, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(657)
			p.Variable()
		}

	case goscriptParserFUNCTION:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(658)
			p.Lambda()
		}

	case goscriptParserT__14, goscriptParserT__15, goscriptParserT__16, goscriptParserT__17, goscriptParserT__18, goscriptParserT__19, goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserANY:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(659)
			p.Builtin()
		}

	case goscriptParserSUB, goscriptParserUNARYADD, goscriptParserUNARYSUB, goscriptParserNOT:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(660)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(goscriptParserSUB-56))|(1<<(goscriptParserUNARYADD-56))|(1<<(goscriptParserUNARYSUB-56))|(1<<(goscriptParserNOT-56)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(661)
			p.expr(13)
		}

	case goscriptParserCHANOP, goscriptParserCHANOPNONBLOCK:
		localctx = NewRecvContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(662)
			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(663)
			p.expr(4)
		}

	case goscriptParserT__20:
		localctx = NewConstructContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(664)
			p.Constructor()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(754)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(667)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(668)

					var _m = p.Match(goscriptParserPOW)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(669)
					p.expr(11)
				}

			case 2:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(670)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(671)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(goscriptParserMUL-52))|(1<<(goscriptParserDIV-52))|(1<<(goscriptParserMOD-52)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(672)
					p.expr(11)
				}

			case 3:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(673)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(674)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserADD || _la == goscriptParserSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(675)
					p.expr(10)
				}

			case 4:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(676)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(677)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(goscriptParserEQ-59))|(1<<(goscriptParserINEQ-59))|(1<<(goscriptParserGT-59))|(1<<(goscriptParserGE-59))|(1<<(goscriptParserLE-59))|(1<<(goscriptParserLT-59))|(1<<(goscriptParserREGEX-59)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(678)
					p.expr(9)
				}

			case 5:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(679)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(680)

					var _m = p.Match(goscriptParserAND)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(681)
					p.expr(8)
				}

			case 6:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(682)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(683)

					var _m = p.Match(goscriptParserOR)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(684)
					p.expr(7)
				}

			case 7:
				localctx = NewSendContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(685)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(686)
					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(687)
					p.expr(6)
				}

			case 8:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(688)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(689)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(goscriptParserASSIGN-71))|(1<<(goscriptParserADDEQUAL-71))|(1<<(goscriptParserSUBEQUAL-71))|(1<<(goscriptParserMULEQUAL-71))|(1<<(goscriptParserDIVEQUAL-71)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(690)
					p.expr(3)
				}

			case 9:
				localctx = NewSelectContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(691)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(692)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(693)
					p.Name()
				}

			case 10:
				localctx = NewTypeAssertContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(694)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(695)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(696)
					p.Match(goscriptParserT__0)
				}
				{
					p.SetState(697)
					p.Asserted()
				}
				{
					p.SetState(698)
					p.Match(goscriptParserT__2)
				}

			case 11:
				localctx = NewSliceFilterContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(700)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(701)
					p.Match(goscriptParserT__12)
				}
				{
					p.SetState(702)
					p.Filter()
				}
				{
					p.SetState(703)
					p.Match(goscriptParserT__13)
				}

			case 12:
				localctx = NewIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(705)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(706)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(707)
					p.expr(0)
				}
				{
					p.SetState(708)
					p.Match(goscriptParserT__4)
				}

			case 13:
				localctx = NewSliceMultiIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(710)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(711)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(712)
					p.Indexs()
				}
				p.SetState(717)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__1 {
					{
						p.SetState(713)
						p.Match(goscriptParserT__1)
					}
					{
						p.SetState(714)
						p.Indexs()
					}

					p.SetState(719)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(720)
					p.Match(goscriptParserT__4)
				}

			case 14:
				localctx = NewMapMultiIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(722)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(723)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(724)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(725)
					p.expr(0)
				}
				p.SetState(730)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__1 {
					{
						p.SetState(726)
						p.Match(goscriptParserT__1)
					}
					{
						p.SetState(727)
						p.expr(0)
					}

					p.SetState(732)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(733)
					p.Match(goscriptParserT__4)
				}
				{
					p.SetState(734)
					p.Match(goscriptParserT__4)
				}

			case 15:
				localctx = NewDirectCallContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(736)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(737)
					p.Match(goscriptParserT__0)
				}
				p.SetState(746)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__11)|(1<<goscriptParserT__14)|(1<<goscriptParserT__15)|(1<<goscriptParserT__16)|(1<<goscriptParserT__17)|(1<<goscriptParserT__18)|(1<<goscriptParserT__19)|(1<<goscriptParserT__20)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(goscriptParserNOT-68))|(1<<(goscriptParserCHANOP-68))|(1<<(goscriptParserCHANOPNONBLOCK-68))|(1<<(goscriptParserINT-68))|(1<<(goscriptParserFLOAT-68))|(1<<(goscriptParserSTRINGLITERAL-68))|(1<<(goscriptParserNAME-68)))) != 0) {
					{
						p.SetState(738)
						p.expr(0)
					}
					p.SetState(743)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == goscriptParserT__1 {
						{
							p.SetState(739)
							p.Match(goscriptParserT__1)
						}
						{
							p.SetState(740)
							p.expr(0)
						}

						p.SetState(745)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(748)
					p.Match(goscriptParserT__2)
				}

			case 16:
				localctx = NewRightUnaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(749)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(750)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*RightUnaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*RightUnaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 17:
				localctx = NewAssignInitializationlistContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(751)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(752)

					var _m = p.Match(goscriptParserASSIGN)

					localctx.(*AssignInitializationlistContext).op = _m
				}
				{
					p.SetState(753)
					p.InitializationListBegin()
				}

			}

		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeNameContext is an interface to support dynamic dispatch.
type IBasicTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeNameContext differentiates from other interfaces.
	IsBasicTypeNameContext()
}

type BasicTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeNameContext() *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_basicTypeName
	return p
}

func (*BasicTypeNameContext) IsBasicTypeNameContext() {}

func NewBasicTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_basicTypeName

	return p
}

func (s *BasicTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeNameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BasicTypeNameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BasicTypeNameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BasicTypeNameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BasicTypeNameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BasicTypeNameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BasicTypeNameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BasicTypeNameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BasicTypeNameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BasicTypeNameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BasicTypeNameContext) ANY() antlr.TerminalNode {
	return s.GetToken(goscriptParserANY, 0)
}

func (s *BasicTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBasicTypeName(s)
	}
}

func (s *BasicTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBasicTypeName(s)
	}
}

func (p *goscriptParser) BasicTypeName() (localctx IBasicTypeNameContext) {
	localctx = NewBasicTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, goscriptParserRULE_basicTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(759)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(goscriptParserUINT32-25))|(1<<(goscriptParserUINT64-25))|(1<<(goscriptParserINT32-25))|(1<<(goscriptParserINT64-25))|(1<<(goscriptParserFLOAT32-25))|(1<<(goscriptParserFLOAT64-25))|(1<<(goscriptParserSTRING-25))|(1<<(goscriptParserBYTES-25))|(1<<(goscriptParserBOOL-25))|(1<<(goscriptParserUINT8-25))|(1<<(goscriptParserANY-25)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBuiltinContext is an interface to support dynamic dispatch.
type IBuiltinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBuiltinContext differentiates from other interfaces.
	IsBuiltinContext()
}

type BuiltinContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuiltinContext() *BuiltinContext {
	var p = new(BuiltinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_builtin
	return p
}

func (*BuiltinContext) IsBuiltinContext() {}

func NewBuiltinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BuiltinContext {
	var p = new(BuiltinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_builtin

	return p
}

func (s *BuiltinContext) GetParser() antlr.Parser { return s.parser }

func (s *BuiltinContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *BuiltinContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BuiltinContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BuiltinContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BuiltinContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BuiltinContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BuiltinContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BuiltinContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BuiltinContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BuiltinContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BuiltinContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BuiltinContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BuiltinContext) ANY() antlr.TerminalNode {
	return s.GetToken(goscriptParserANY, 0)
}

func (s *BuiltinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BuiltinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BuiltinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBuiltin(s)
	}
}

func (s *BuiltinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBuiltin(s)
	}
}

func (p *goscriptParser) Builtin() (localctx IBuiltinContext) {
	localctx = NewBuiltinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, goscriptParserRULE_builtin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(852)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserT__14:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(761)
			p.Match(goscriptParserT__14)
		}
		{
			p.SetState(762)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(763)
			p.expr(0)
		}
		{
			p.SetState(764)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(765)
			p.expr(0)
		}
		{
			p.SetState(766)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserT__15:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(768)
			p.Match(goscriptParserT__15)
		}
		{
			p.SetState(769)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(770)
			p.expr(0)
		}
		{
			p.SetState(771)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(772)
			p.expr(0)
		}
		{
			p.SetState(773)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserT__16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(775)
			p.Match(goscriptParserT__16)
		}
		{
			p.SetState(776)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(777)
			p.expr(0)
		}
		{
			p.SetState(778)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(779)
			p.expr(0)
		}
		{
			p.SetState(780)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserT__17:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(782)
			p.Match(goscriptParserT__17)
		}
		{
			p.SetState(783)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(784)
			p.expr(0)
		}
		{
			p.SetState(785)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserT__18:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(787)
			p.Match(goscriptParserT__18)
		}
		{
			p.SetState(788)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(789)
			p.expr(0)
		}
		{
			p.SetState(790)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserT__19:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(792)
			p.Match(goscriptParserT__19)
		}
		{
			p.SetState(793)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(794)
			p.expr(0)
		}
		{
			p.SetState(795)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT32:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(797)
			p.Match(goscriptParserUINT32)
		}
		{
			p.SetState(798)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(799)
			p.expr(0)
		}
		{
			p.SetState(800)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(802)
			p.Match(goscriptParserUINT64)
		}
		{
			p.SetState(803)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(804)
			p.expr(0)
		}
		{
			p.SetState(805)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserINT32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(807)
			p.Match(goscriptParserINT32)
		}
		{
			p.SetState(808)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(809)
			p.expr(0)
		}
		{
			p.SetState(810)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserINT64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(812)
			p.Match(goscriptParserINT64)
		}
		{
			p.SetState(813)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(814)
			p.expr(0)
		}
		{
			p.SetState(815)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserFLOAT32:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(817)
			p.Match(goscriptParserFLOAT32)
		}
		{
			p.SetState(818)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(819)
			p.expr(0)
		}
		{
			p.SetState(820)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserFLOAT64:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(822)
			p.Match(goscriptParserFLOAT64)
		}
		{
			p.SetState(823)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(824)
			p.expr(0)
		}
		{
			p.SetState(825)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserSTRING:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(827)
			p.Match(goscriptParserSTRING)
		}
		{
			p.SetState(828)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(829)
			p.expr(0)
		}
		{
			p.SetState(830)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserBYTES:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(832)
			p.Match(goscriptParserBYTES)
		}
		{
			p.SetState(833)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(834)
			p.expr(0)
		}
		{
			p.SetState(835)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserBOOL:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(837)
			p.Match(goscriptParserBOOL)
		}
		{
			p.SetState(838)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(839)
			p.expr(0)
		}
		{
			p.SetState(840)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserUINT8:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(842)
			p.Match(goscriptParserUINT8)
		}
		{
			p.SetState(843)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(844)
			p.expr(0)
		}
		{
			p.SetState(845)
			p.Match(goscriptParserT__2)
		}

	case goscriptParserANY:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(847)
			p.Match(goscriptParserANY)
		}
		{
			p.SetState(848)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(849)
			p.expr(0)
		}
		{
			p.SetState(850)
			p.Match(goscriptParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializationListBeginContext is an interface to support dynamic dispatch.
type IInitializationListBeginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListBeginContext differentiates from other interfaces.
	IsInitializationListBeginContext()
}

type InitializationListBeginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListBeginContext() *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationListBegin
	return p
}

func (*InitializationListBeginContext) IsInitializationListBeginContext() {}

func NewInitializationListBeginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListBeginContext {
	var p = new(InitializationListBeginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationListBegin

	return p
}

func (s *InitializationListBeginContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListBeginContext) InitializationList() IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitializationListBeginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListBeginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializationListBeginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitializationListBegin(s)
	}
}

func (s *InitializationListBeginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitializationListBegin(s)
	}
}

func (p *goscriptParser) InitializationListBegin() (localctx IInitializationListBeginContext) {
	localctx = NewInitializationListBeginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, goscriptParserRULE_initializationListBegin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(854)
		p.InitializationList()
	}

	return localctx
}

// IInitializationListContext is an interface to support dynamic dispatch.
type IInitializationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializationListContext differentiates from other interfaces.
	IsInitializationListContext()
}

type InitializationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializationListContext() *InitializationListContext {
	var p = new(InitializationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_initializationList
	return p
}

func (*InitializationListContext) IsInitializationListContext() {}

func NewInitializationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializationListContext {
	var p = new(InitializationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_initializationList

	return p
}

func (s *InitializationListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializationListContext) CopyFrom(ctx *InitializationListContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *InitializationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InitMessageContext struct {
	*InitializationListContext
}

func NewInitMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMessageContext {
	var p = new(InitMessageContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMessageContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *InitMessageContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InitMessageContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMessageContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMessage(s)
	}
}

func (s *InitMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMessage(s)
	}
}

type InitConstantContext struct {
	*InitializationListContext
}

func NewInitConstantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitConstantContext {
	var p = new(InitConstantContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitConstantContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InitConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitConstant(s)
	}
}

func (s *InitConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitConstant(s)
	}
}

type InitMapContext struct {
	*InitializationListContext
}

func NewInitMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitMapContext {
	var p = new(InitMapContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitMapContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitMapContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitMap(s)
	}
}

func (s *InitMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitMap(s)
	}
}

type InitSliceContext struct {
	*InitializationListContext
}

func NewInitSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitSliceContext {
	var p = new(InitSliceContext)

	p.InitializationListContext = NewEmptyInitializationListContext()
	p.parser = parser
	p.CopyFrom(ctx.(*InitializationListContext))

	return p
}

func (s *InitSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitSliceContext) AllInitializationList() []IInitializationListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializationListContext)(nil)).Elem())
	var tst = make([]IInitializationListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializationListContext)
		}
	}

	return tst
}

func (s *InitSliceContext) InitializationList(i int) IInitializationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializationListContext)
}

func (s *InitSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitSlice(s)
	}
}

func (s *InitSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitSlice(s)
	}
}

func (p *goscriptParser) InitializationList() (localctx IInitializationListContext) {
	localctx = NewInitializationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, goscriptParserRULE_initializationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		localctx = NewInitSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(856)
			p.Match(goscriptParserT__3)
		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__3)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserT__14)|(1<<goscriptParserT__15)|(1<<goscriptParserT__16)|(1<<goscriptParserT__17)|(1<<goscriptParserT__18)|(1<<goscriptParserT__19)|(1<<goscriptParserT__20)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserBYTES-32))|(1<<(goscriptParserBOOL-32))|(1<<(goscriptParserUINT8-32))|(1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(goscriptParserNOT-68))|(1<<(goscriptParserCHANOP-68))|(1<<(goscriptParserCHANOPNONBLOCK-68))|(1<<(goscriptParserINT-68))|(1<<(goscriptParserFLOAT-68))|(1<<(goscriptParserSTRINGLITERAL-68))|(1<<(goscriptParserNAME-68)))) != 0) {
			{
				p.SetState(857)
				p.InitializationList()
			}
			p.SetState(862)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(858)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(859)
					p.InitializationList()
				}

				p.SetState(864)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(867)
			p.Match(goscriptParserT__4)
		}

	case 2:
		localctx = NewInitMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(868)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(869)
			p.Name()
		}
		{
			p.SetState(870)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(871)
			p.InitializationList()
		}
		{
			p.SetState(872)
			p.Match(goscriptParserT__2)
		}
		p.SetState(881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(873)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(874)
				p.Name()
			}
			{
				p.SetState(875)
				p.Match(goscriptParserT__0)
			}
			{
				p.SetState(876)
				p.InitializationList()
			}
			{
				p.SetState(877)
				p.Match(goscriptParserT__2)
			}

			p.SetState(883)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(884)
			p.Match(goscriptParserT__7)
		}

	case 3:
		localctx = NewInitMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(886)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(887)
			p.InitializationList()
		}
		{
			p.SetState(888)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(889)
			p.InitializationList()
		}
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(890)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(891)
				p.InitializationList()
			}
			{
				p.SetState(892)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(893)
				p.InitializationList()
			}

			p.SetState(899)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(900)
			p.Match(goscriptParserT__7)
		}

	case 4:
		localctx = NewInitConstantContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(902)
			p.expr(0)
		}

	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) CopyFrom(ctx *ConstantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConstantNilContext struct {
	*ConstantContext
}

func NewConstantNilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantNilContext {
	var p = new(ConstantNilContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantNilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantNilContext) NULL() antlr.TerminalNode {
	return s.GetToken(goscriptParserNULL, 0)
}

func (s *ConstantNilContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantNil(s)
	}
}

func (s *ConstantNilContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantNil(s)
	}
}

type ConstantIntContext struct {
	*ConstantContext
}

func NewConstantIntContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantIntContext {
	var p = new(ConstantIntContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantIntContext) INT() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, 0)
}

func (s *ConstantIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantInt(s)
	}
}

func (s *ConstantIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantInt(s)
	}
}

type ConstantStringContext struct {
	*ConstantContext
}

func NewConstantStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantStringContext {
	var p = new(ConstantStringContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantStringContext) STRINGLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRINGLITERAL, 0)
}

func (s *ConstantStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantString(s)
	}
}

func (s *ConstantStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantString(s)
	}
}

type ConstantFloatContext struct {
	*ConstantContext
}

func NewConstantFloatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantFloatContext {
	var p = new(ConstantFloatContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantFloatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantFloatContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT, 0)
}

func (s *ConstantFloatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantFloat(s)
	}
}

func (s *ConstantFloatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantFloat(s)
	}
}

type ConstantBoolContext struct {
	*ConstantContext
}

func NewConstantBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantBoolContext {
	var p = new(ConstantBoolContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantBoolContext) BOOLLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOLLITERAL, 0)
}

func (s *ConstantBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantBool(s)
	}
}

func (s *ConstantBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantBool(s)
	}
}

func (p *goscriptParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, goscriptParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(910)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserINT:
		localctx = NewConstantIntContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(905)
			p.Match(goscriptParserINT)
		}

	case goscriptParserFLOAT:
		localctx = NewConstantFloatContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(906)
			p.Match(goscriptParserFLOAT)
		}

	case goscriptParserBOOLLITERAL:
		localctx = NewConstantBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(907)
			p.Match(goscriptParserBOOLLITERAL)
		}

	case goscriptParserNULL:
		localctx = NewConstantNilContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(908)
			p.Match(goscriptParserNULL)
		}

	case goscriptParserSTRINGLITERAL:
		localctx = NewConstantStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(909)
			p.Match(goscriptParserSTRINGLITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstructorContext is an interface to support dynamic dispatch.
type IConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorContext differentiates from other interfaces.
	IsConstructorContext()
}

type ConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorContext() *ConstructorContext {
	var p = new(ConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constructor
	return p
}

func (*ConstructorContext) IsConstructorContext() {}

func NewConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorContext {
	var p = new(ConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constructor

	return p
}

func (s *ConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ConstructorContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ConstructorContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstructor(s)
	}
}

func (s *ConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstructor(s)
	}
}

func (p *goscriptParser) Constructor() (localctx IConstructorContext) {
	localctx = NewConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, goscriptParserRULE_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(912)
			p.Match(goscriptParserT__20)
		}
		{
			p.SetState(913)
			p.Typename()
		}
		{
			p.SetState(914)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(915)
			p.Match(goscriptParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(917)
			p.Match(goscriptParserT__20)
		}
		{
			p.SetState(918)
			p.Typename()
		}
		{
			p.SetState(919)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(920)
			p.expr(0)
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(921)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(922)
				p.expr(0)
			}

			p.SetState(927)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(928)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// IVardefContext is an interface to support dynamic dispatch.
type IVardefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVardefContext differentiates from other interfaces.
	IsVardefContext()
}

type VardefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVardefContext() *VardefContext {
	var p = new(VardefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_vardef
	return p
}

func (*VardefContext) IsVardefContext() {}

func NewVardefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VardefContext {
	var p = new(VardefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_vardef

	return p
}

func (s *VardefContext) GetParser() antlr.Parser { return s.parser }

func (s *VardefContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *VardefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *VardefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *VardefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *VardefContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VardefContext) InitializationListBegin() IInitializationListBeginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializationListBeginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializationListBeginContext)
}

func (s *VardefContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *VardefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VardefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VardefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterVardef(s)
	}
}

func (s *VardefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitVardef(s)
	}
}

func (p *goscriptParser) Vardef() (localctx IVardefContext) {
	localctx = NewVardefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, goscriptParserRULE_vardef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(932)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(933)
			p.Name()
		}
		{
			p.SetState(934)
			p.Typename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(936)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(937)
			p.Name()
		}
		{
			p.SetState(938)
			p.Typename()
		}
		{
			p.SetState(939)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(940)
			p.expr(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(942)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(943)
			p.Name()
		}
		{
			p.SetState(944)
			p.Typename()
		}
		{
			p.SetState(945)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(946)
			p.InitializationListBegin()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(948)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(949)
			p.Name()
		}
		{
			p.SetState(950)
			p.Typename()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(952)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(953)
			p.Name()
		}
		{
			p.SetState(954)
			p.Typename()
		}
		{
			p.SetState(955)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(956)
			p.expr(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(958)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(959)
			p.Name()
		}
		{
			p.SetState(960)
			p.Typename()
		}
		{
			p.SetState(961)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(962)
			p.InitializationListBegin()
		}

	}

	return localctx
}

// IConstdefContext is an interface to support dynamic dispatch.
type IConstdefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstdefContext differentiates from other interfaces.
	IsConstdefContext()
}

type ConstdefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstdefContext() *ConstdefContext {
	var p = new(ConstdefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constdef
	return p
}

func (*ConstdefContext) IsConstdefContext() {}

func NewConstdefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstdefContext {
	var p = new(ConstdefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constdef

	return p
}

func (s *ConstdefContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstdefContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *ConstdefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ConstdefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *ConstdefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *ConstdefContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstdefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstdef(s)
	}
}

func (s *ConstdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstdef(s)
	}
}

func (p *goscriptParser) Constdef() (localctx IConstdefContext) {
	localctx = NewConstdefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, goscriptParserRULE_constdef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(966)
		p.Match(goscriptParserCONST)
	}
	{
		p.SetState(967)
		p.Name()
	}
	{
		p.SetState(968)
		p.BasicTypeName()
	}
	{
		p.SetState(969)
		p.Match(goscriptParserASSIGN)
	}
	{
		p.SetState(970)
		p.Constant()
	}

	return localctx
}

func (p *goscriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 31:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *goscriptParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
