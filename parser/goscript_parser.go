// Code generated from goscript.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // goscript

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 82, 848,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 3, 2, 3, 2, 6, 2, 77,
	10, 2, 13, 2, 14, 2, 78, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 7, 5, 91, 10, 5, 12, 5, 14, 5, 94, 11, 5, 3, 5, 5, 5, 97, 10,
	5, 5, 5, 99, 10, 5, 3, 5, 3, 5, 5, 5, 103, 10, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 113, 10, 5, 12, 5, 14, 5, 116, 11, 5,
	3, 5, 5, 5, 119, 10, 5, 5, 5, 121, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	7, 5, 128, 10, 5, 12, 5, 14, 5, 131, 11, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 142, 10, 5, 12, 5, 14, 5, 145, 11, 5,
	3, 5, 5, 5, 148, 10, 5, 5, 5, 150, 10, 5, 3, 5, 3, 5, 5, 5, 154, 10, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 164, 10, 5, 12, 5,
	14, 5, 167, 11, 5, 3, 5, 5, 5, 170, 10, 5, 5, 5, 172, 10, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 7, 5, 179, 10, 5, 12, 5, 14, 5, 182, 11, 5, 3, 5, 3,
	5, 3, 5, 5, 5, 187, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 194, 10,
	6, 12, 6, 14, 6, 197, 11, 6, 3, 6, 5, 6, 200, 10, 6, 5, 6, 202, 10, 6,
	3, 6, 3, 6, 5, 6, 206, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6,
	214, 10, 6, 12, 6, 14, 6, 217, 11, 6, 3, 6, 5, 6, 220, 10, 6, 5, 6, 222,
	10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 229, 10, 6, 12, 6, 14, 6, 232,
	11, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 242, 10, 6,
	12, 6, 14, 6, 245, 11, 6, 3, 6, 5, 6, 248, 10, 6, 5, 6, 250, 10, 6, 3,
	6, 3, 6, 5, 6, 254, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 262,
	10, 6, 12, 6, 14, 6, 265, 11, 6, 3, 6, 5, 6, 268, 10, 6, 5, 6, 270, 10,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 277, 10, 6, 12, 6, 14, 6, 280, 11,
	6, 3, 6, 3, 6, 3, 6, 5, 6, 285, 10, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3,
	9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 5, 12, 300, 10, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 5, 12, 316, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 7, 13, 323, 10, 13, 12, 13, 14, 13, 326, 11, 13, 3, 13, 5, 13, 329,
	10, 13, 5, 13, 331, 10, 13, 3, 13, 3, 13, 5, 13, 335, 10, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 7, 13, 342, 10, 13, 12, 13, 14, 13, 345, 11, 13,
	3, 13, 5, 13, 348, 10, 13, 5, 13, 350, 10, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 7, 13, 357, 10, 13, 12, 13, 14, 13, 360, 11, 13, 3, 13, 3, 13,
	5, 13, 364, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 7, 14, 376, 10, 14, 12, 14, 14, 14, 379, 11, 14, 5, 14,
	381, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 7, 14, 393, 10, 14, 12, 14, 14, 14, 396, 11, 14, 3, 14, 3, 14,
	5, 14, 400, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 7, 15, 410, 10, 15, 12, 15, 14, 15, 413, 11, 15, 3, 15, 3, 15, 5, 15,
	417, 10, 15, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5,
	17, 427, 10, 17, 3, 18, 3, 18, 5, 18, 431, 10, 18, 3, 19, 3, 19, 3, 19,
	3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 7, 22, 452, 10, 22, 12, 22, 14,
	22, 455, 11, 22, 3, 22, 5, 22, 458, 10, 22, 5, 22, 460, 10, 22, 3, 22,
	3, 22, 5, 22, 464, 10, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 7, 22, 471,
	10, 22, 12, 22, 14, 22, 474, 11, 22, 3, 22, 5, 22, 477, 10, 22, 5, 22,
	479, 10, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 7, 22, 486, 10, 22, 12,
	22, 14, 22, 489, 11, 22, 3, 22, 3, 22, 5, 22, 493, 10, 22, 3, 23, 3, 23,
	3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 504, 10, 25, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 514, 10, 26,
	5, 26, 516, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 6, 26, 528, 10, 26, 13, 26, 14, 26, 529, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 572, 10, 26, 12, 26,
	14, 26, 575, 11, 26, 3, 26, 3, 26, 5, 26, 579, 10, 26, 3, 27, 3, 27, 7,
	27, 583, 10, 27, 12, 27, 14, 27, 586, 11, 27, 3, 27, 3, 27, 3, 28, 3, 28,
	5, 28, 592, 10, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 6, 30, 600,
	10, 30, 13, 30, 14, 30, 601, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 5, 30, 611, 10, 30, 3, 31, 3, 31, 5, 31, 615, 10, 31, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 633, 10, 32, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 645, 10, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 7, 33, 651, 10, 33, 12, 33, 14, 33, 654, 11, 33, 5,
	33, 656, 10, 33, 3, 33, 3, 33, 5, 33, 660, 10, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 671, 10, 33, 12, 33, 14,
	33, 674, 11, 33, 5, 33, 676, 10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 688, 10, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 7, 33, 735, 10, 33, 12, 33, 14, 33, 738, 11, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 748, 10, 33, 12, 33, 14, 33,
	751, 11, 33, 5, 33, 753, 10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 7, 33, 762, 10, 33, 12, 33, 14, 33, 765, 11, 33, 5, 33, 767,
	10, 33, 3, 33, 3, 33, 3, 33, 7, 33, 772, 10, 33, 12, 33, 14, 33, 775, 11,
	33, 3, 34, 3, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 784, 10, 35,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 792, 10, 36, 12, 36, 14,
	36, 795, 11, 36, 5, 36, 797, 10, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	5, 37, 846, 10, 37, 3, 37, 2, 3, 64, 38, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 2, 12, 5, 2, 17, 21, 35, 45, 78, 78,
	5, 2, 17, 21, 23, 45, 78, 78, 3, 2, 70, 74, 4, 2, 54, 56, 67, 67, 3, 2,
	68, 69, 3, 2, 50, 52, 3, 2, 53, 54, 3, 2, 57, 63, 3, 2, 55, 56, 4, 2, 23,
	32, 34, 34, 2, 959, 2, 76, 3, 2, 2, 2, 4, 80, 3, 2, 2, 2, 6, 82, 3, 2,
	2, 2, 8, 186, 3, 2, 2, 2, 10, 284, 3, 2, 2, 2, 12, 286, 3, 2, 2, 2, 14,
	288, 3, 2, 2, 2, 16, 290, 3, 2, 2, 2, 18, 292, 3, 2, 2, 2, 20, 294, 3,
	2, 2, 2, 22, 315, 3, 2, 2, 2, 24, 363, 3, 2, 2, 2, 26, 399, 3, 2, 2, 2,
	28, 416, 3, 2, 2, 2, 30, 418, 3, 2, 2, 2, 32, 426, 3, 2, 2, 2, 34, 430,
	3, 2, 2, 2, 36, 432, 3, 2, 2, 2, 38, 437, 3, 2, 2, 2, 40, 440, 3, 2, 2,
	2, 42, 492, 3, 2, 2, 2, 44, 494, 3, 2, 2, 2, 46, 496, 3, 2, 2, 2, 48, 503,
	3, 2, 2, 2, 50, 578, 3, 2, 2, 2, 52, 580, 3, 2, 2, 2, 54, 591, 3, 2, 2,
	2, 56, 593, 3, 2, 2, 2, 58, 610, 3, 2, 2, 2, 60, 614, 3, 2, 2, 2, 62, 632,
	3, 2, 2, 2, 64, 687, 3, 2, 2, 2, 66, 776, 3, 2, 2, 2, 68, 783, 3, 2, 2,
	2, 70, 785, 3, 2, 2, 2, 72, 845, 3, 2, 2, 2, 74, 77, 5, 26, 14, 2, 75,
	77, 5, 48, 25, 2, 76, 74, 3, 2, 2, 2, 76, 75, 3, 2, 2, 2, 77, 78, 3, 2,
	2, 2, 78, 76, 3, 2, 2, 2, 78, 79, 3, 2, 2, 2, 79, 3, 3, 2, 2, 2, 80, 81,
	9, 2, 2, 2, 81, 5, 3, 2, 2, 2, 82, 83, 9, 3, 2, 2, 83, 7, 3, 2, 2, 2, 84,
	85, 7, 46, 2, 2, 85, 86, 5, 4, 3, 2, 86, 98, 7, 3, 2, 2, 87, 92, 5, 12,
	7, 2, 88, 89, 7, 4, 2, 2, 89, 91, 5, 12, 7, 2, 90, 88, 3, 2, 2, 2, 91,
	94, 3, 2, 2, 2, 92, 90, 3, 2, 2, 2, 92, 93, 3, 2, 2, 2, 93, 96, 3, 2, 2,
	2, 94, 92, 3, 2, 2, 2, 95, 97, 7, 80, 2, 2, 96, 95, 3, 2, 2, 2, 96, 97,
	3, 2, 2, 2, 97, 99, 3, 2, 2, 2, 98, 87, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2,
	99, 100, 3, 2, 2, 2, 100, 102, 7, 5, 2, 2, 101, 103, 5, 18, 10, 2, 102,
	101, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104, 105,
	5, 52, 27, 2, 105, 187, 3, 2, 2, 2, 106, 107, 7, 46, 2, 2, 107, 108, 5,
	4, 3, 2, 108, 120, 7, 3, 2, 2, 109, 114, 5, 12, 7, 2, 110, 111, 7, 4, 2,
	2, 111, 113, 5, 12, 7, 2, 112, 110, 3, 2, 2, 2, 113, 116, 3, 2, 2, 2, 114,
	112, 3, 2, 2, 2, 114, 115, 3, 2, 2, 2, 115, 118, 3, 2, 2, 2, 116, 114,
	3, 2, 2, 2, 117, 119, 7, 80, 2, 2, 118, 117, 3, 2, 2, 2, 118, 119, 3, 2,
	2, 2, 119, 121, 3, 2, 2, 2, 120, 109, 3, 2, 2, 2, 120, 121, 3, 2, 2, 2,
	121, 122, 3, 2, 2, 2, 122, 123, 7, 5, 2, 2, 123, 124, 7, 3, 2, 2, 124,
	129, 5, 18, 10, 2, 125, 126, 7, 4, 2, 2, 126, 128, 5, 18, 10, 2, 127, 125,
	3, 2, 2, 2, 128, 131, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 129, 130, 3, 2,
	2, 2, 130, 132, 3, 2, 2, 2, 131, 129, 3, 2, 2, 2, 132, 133, 7, 5, 2, 2,
	133, 134, 5, 52, 27, 2, 134, 187, 3, 2, 2, 2, 135, 136, 7, 46, 2, 2, 136,
	137, 5, 4, 3, 2, 137, 149, 7, 3, 2, 2, 138, 143, 5, 12, 7, 2, 139, 140,
	7, 4, 2, 2, 140, 142, 5, 12, 7, 2, 141, 139, 3, 2, 2, 2, 142, 145, 3, 2,
	2, 2, 143, 141, 3, 2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 147, 3, 2, 2, 2,
	145, 143, 3, 2, 2, 2, 146, 148, 7, 80, 2, 2, 147, 146, 3, 2, 2, 2, 147,
	148, 3, 2, 2, 2, 148, 150, 3, 2, 2, 2, 149, 138, 3, 2, 2, 2, 149, 150,
	3, 2, 2, 2, 150, 151, 3, 2, 2, 2, 151, 153, 7, 5, 2, 2, 152, 154, 5, 14,
	8, 2, 153, 152, 3, 2, 2, 2, 153, 154, 3, 2, 2, 2, 154, 155, 3, 2, 2, 2,
	155, 156, 5, 52, 27, 2, 156, 187, 3, 2, 2, 2, 157, 158, 7, 46, 2, 2, 158,
	159, 5, 4, 3, 2, 159, 171, 7, 3, 2, 2, 160, 165, 5, 12, 7, 2, 161, 162,
	7, 4, 2, 2, 162, 164, 5, 12, 7, 2, 163, 161, 3, 2, 2, 2, 164, 167, 3, 2,
	2, 2, 165, 163, 3, 2, 2, 2, 165, 166, 3, 2, 2, 2, 166, 169, 3, 2, 2, 2,
	167, 165, 3, 2, 2, 2, 168, 170, 7, 80, 2, 2, 169, 168, 3, 2, 2, 2, 169,
	170, 3, 2, 2, 2, 170, 172, 3, 2, 2, 2, 171, 160, 3, 2, 2, 2, 171, 172,
	3, 2, 2, 2, 172, 173, 3, 2, 2, 2, 173, 174, 7, 5, 2, 2, 174, 175, 7, 3,
	2, 2, 175, 180, 5, 14, 8, 2, 176, 177, 7, 4, 2, 2, 177, 179, 5, 14, 8,
	2, 178, 176, 3, 2, 2, 2, 179, 182, 3, 2, 2, 2, 180, 178, 3, 2, 2, 2, 180,
	181, 3, 2, 2, 2, 181, 183, 3, 2, 2, 2, 182, 180, 3, 2, 2, 2, 183, 184,
	7, 5, 2, 2, 184, 185, 5, 52, 27, 2, 185, 187, 3, 2, 2, 2, 186, 84, 3, 2,
	2, 2, 186, 106, 3, 2, 2, 2, 186, 135, 3, 2, 2, 2, 186, 157, 3, 2, 2, 2,
	187, 9, 3, 2, 2, 2, 188, 189, 7, 46, 2, 2, 189, 201, 7, 3, 2, 2, 190, 195,
	5, 12, 7, 2, 191, 192, 7, 4, 2, 2, 192, 194, 5, 12, 7, 2, 193, 191, 3,
	2, 2, 2, 194, 197, 3, 2, 2, 2, 195, 193, 3, 2, 2, 2, 195, 196, 3, 2, 2,
	2, 196, 199, 3, 2, 2, 2, 197, 195, 3, 2, 2, 2, 198, 200, 7, 80, 2, 2, 199,
	198, 3, 2, 2, 2, 199, 200, 3, 2, 2, 2, 200, 202, 3, 2, 2, 2, 201, 190,
	3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2, 203, 205, 7, 5,
	2, 2, 204, 206, 5, 18, 10, 2, 205, 204, 3, 2, 2, 2, 205, 206, 3, 2, 2,
	2, 206, 207, 3, 2, 2, 2, 207, 285, 5, 52, 27, 2, 208, 209, 7, 46, 2, 2,
	209, 221, 7, 3, 2, 2, 210, 215, 5, 12, 7, 2, 211, 212, 7, 4, 2, 2, 212,
	214, 5, 12, 7, 2, 213, 211, 3, 2, 2, 2, 214, 217, 3, 2, 2, 2, 215, 213,
	3, 2, 2, 2, 215, 216, 3, 2, 2, 2, 216, 219, 3, 2, 2, 2, 217, 215, 3, 2,
	2, 2, 218, 220, 7, 80, 2, 2, 219, 218, 3, 2, 2, 2, 219, 220, 3, 2, 2, 2,
	220, 222, 3, 2, 2, 2, 221, 210, 3, 2, 2, 2, 221, 222, 3, 2, 2, 2, 222,
	223, 3, 2, 2, 2, 223, 224, 7, 5, 2, 2, 224, 225, 7, 3, 2, 2, 225, 230,
	5, 18, 10, 2, 226, 227, 7, 4, 2, 2, 227, 229, 5, 18, 10, 2, 228, 226, 3,
	2, 2, 2, 229, 232, 3, 2, 2, 2, 230, 228, 3, 2, 2, 2, 230, 231, 3, 2, 2,
	2, 231, 233, 3, 2, 2, 2, 232, 230, 3, 2, 2, 2, 233, 234, 7, 5, 2, 2, 234,
	235, 5, 52, 27, 2, 235, 285, 3, 2, 2, 2, 236, 237, 7, 46, 2, 2, 237, 249,
	7, 3, 2, 2, 238, 243, 5, 12, 7, 2, 239, 240, 7, 4, 2, 2, 240, 242, 5, 12,
	7, 2, 241, 239, 3, 2, 2, 2, 242, 245, 3, 2, 2, 2, 243, 241, 3, 2, 2, 2,
	243, 244, 3, 2, 2, 2, 244, 247, 3, 2, 2, 2, 245, 243, 3, 2, 2, 2, 246,
	248, 7, 80, 2, 2, 247, 246, 3, 2, 2, 2, 247, 248, 3, 2, 2, 2, 248, 250,
	3, 2, 2, 2, 249, 238, 3, 2, 2, 2, 249, 250, 3, 2, 2, 2, 250, 251, 3, 2,
	2, 2, 251, 253, 7, 5, 2, 2, 252, 254, 5, 14, 8, 2, 253, 252, 3, 2, 2, 2,
	253, 254, 3, 2, 2, 2, 254, 255, 3, 2, 2, 2, 255, 285, 5, 52, 27, 2, 256,
	257, 7, 46, 2, 2, 257, 269, 7, 3, 2, 2, 258, 263, 5, 12, 7, 2, 259, 260,
	7, 4, 2, 2, 260, 262, 5, 12, 7, 2, 261, 259, 3, 2, 2, 2, 262, 265, 3, 2,
	2, 2, 263, 261, 3, 2, 2, 2, 263, 264, 3, 2, 2, 2, 264, 267, 3, 2, 2, 2,
	265, 263, 3, 2, 2, 2, 266, 268, 7, 80, 2, 2, 267, 266, 3, 2, 2, 2, 267,
	268, 3, 2, 2, 2, 268, 270, 3, 2, 2, 2, 269, 258, 3, 2, 2, 2, 269, 270,
	3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 272, 7, 5, 2, 2, 272, 273, 7, 3,
	2, 2, 273, 278, 5, 14, 8, 2, 274, 275, 7, 4, 2, 2, 275, 277, 5, 14, 8,
	2, 276, 274, 3, 2, 2, 2, 277, 280, 3, 2, 2, 2, 278, 276, 3, 2, 2, 2, 278,
	279, 3, 2, 2, 2, 279, 281, 3, 2, 2, 2, 280, 278, 3, 2, 2, 2, 281, 282,
	7, 5, 2, 2, 282, 283, 5, 52, 27, 2, 283, 285, 3, 2, 2, 2, 284, 188, 3,
	2, 2, 2, 284, 208, 3, 2, 2, 2, 284, 236, 3, 2, 2, 2, 284, 256, 3, 2, 2,
	2, 285, 11, 3, 2, 2, 2, 286, 287, 5, 20, 11, 2, 287, 13, 3, 2, 2, 2, 288,
	289, 5, 20, 11, 2, 289, 15, 3, 2, 2, 2, 290, 291, 5, 22, 12, 2, 291, 17,
	3, 2, 2, 2, 292, 293, 5, 22, 12, 2, 293, 19, 3, 2, 2, 2, 294, 295, 5, 4,
	3, 2, 295, 296, 5, 22, 12, 2, 296, 21, 3, 2, 2, 2, 297, 300, 5, 4, 3, 2,
	298, 300, 5, 66, 34, 2, 299, 297, 3, 2, 2, 2, 299, 298, 3, 2, 2, 2, 300,
	316, 3, 2, 2, 2, 301, 316, 5, 24, 13, 2, 302, 303, 7, 20, 2, 2, 303, 304,
	7, 6, 2, 2, 304, 305, 5, 66, 34, 2, 305, 306, 7, 7, 2, 2, 306, 307, 5,
	22, 12, 2, 307, 316, 3, 2, 2, 2, 308, 309, 7, 8, 2, 2, 309, 316, 5, 22,
	12, 2, 310, 311, 7, 33, 2, 2, 311, 312, 7, 6, 2, 2, 312, 313, 5, 22, 12,
	2, 313, 314, 7, 7, 2, 2, 314, 316, 3, 2, 2, 2, 315, 299, 3, 2, 2, 2, 315,
	301, 3, 2, 2, 2, 315, 302, 3, 2, 2, 2, 315, 308, 3, 2, 2, 2, 315, 310,
	3, 2, 2, 2, 316, 23, 3, 2, 2, 2, 317, 318, 7, 46, 2, 2, 318, 330, 7, 3,
	2, 2, 319, 324, 5, 16, 9, 2, 320, 321, 7, 4, 2, 2, 321, 323, 5, 16, 9,
	2, 322, 320, 3, 2, 2, 2, 323, 326, 3, 2, 2, 2, 324, 322, 3, 2, 2, 2, 324,
	325, 3, 2, 2, 2, 325, 328, 3, 2, 2, 2, 326, 324, 3, 2, 2, 2, 327, 329,
	7, 80, 2, 2, 328, 327, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 331, 3, 2,
	2, 2, 330, 319, 3, 2, 2, 2, 330, 331, 3, 2, 2, 2, 331, 332, 3, 2, 2, 2,
	332, 334, 7, 5, 2, 2, 333, 335, 5, 18, 10, 2, 334, 333, 3, 2, 2, 2, 334,
	335, 3, 2, 2, 2, 335, 364, 3, 2, 2, 2, 336, 337, 7, 46, 2, 2, 337, 349,
	7, 3, 2, 2, 338, 343, 5, 16, 9, 2, 339, 340, 7, 4, 2, 2, 340, 342, 5, 16,
	9, 2, 341, 339, 3, 2, 2, 2, 342, 345, 3, 2, 2, 2, 343, 341, 3, 2, 2, 2,
	343, 344, 3, 2, 2, 2, 344, 347, 3, 2, 2, 2, 345, 343, 3, 2, 2, 2, 346,
	348, 7, 80, 2, 2, 347, 346, 3, 2, 2, 2, 347, 348, 3, 2, 2, 2, 348, 350,
	3, 2, 2, 2, 349, 338, 3, 2, 2, 2, 349, 350, 3, 2, 2, 2, 350, 351, 3, 2,
	2, 2, 351, 352, 7, 5, 2, 2, 352, 353, 7, 3, 2, 2, 353, 358, 5, 18, 10,
	2, 354, 355, 7, 4, 2, 2, 355, 357, 5, 18, 10, 2, 356, 354, 3, 2, 2, 2,
	357, 360, 3, 2, 2, 2, 358, 356, 3, 2, 2, 2, 358, 359, 3, 2, 2, 2, 359,
	361, 3, 2, 2, 2, 360, 358, 3, 2, 2, 2, 361, 362, 7, 5, 2, 2, 362, 364,
	3, 2, 2, 2, 363, 317, 3, 2, 2, 2, 363, 336, 3, 2, 2, 2, 364, 25, 3, 2,
	2, 2, 365, 366, 7, 17, 2, 2, 366, 367, 5, 4, 3, 2, 367, 368, 5, 32, 17,
	2, 368, 400, 3, 2, 2, 2, 369, 370, 7, 17, 2, 2, 370, 371, 5, 4, 3, 2, 371,
	372, 7, 18, 2, 2, 372, 380, 7, 9, 2, 2, 373, 377, 5, 28, 15, 2, 374, 376,
	5, 28, 15, 2, 375, 374, 3, 2, 2, 2, 376, 379, 3, 2, 2, 2, 377, 375, 3,
	2, 2, 2, 377, 378, 3, 2, 2, 2, 378, 381, 3, 2, 2, 2, 379, 377, 3, 2, 2,
	2, 380, 373, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2, 381, 382, 3, 2, 2, 2, 382,
	383, 7, 10, 2, 2, 383, 400, 3, 2, 2, 2, 384, 385, 7, 17, 2, 2, 385, 386,
	5, 4, 3, 2, 386, 387, 7, 19, 2, 2, 387, 394, 7, 9, 2, 2, 388, 389, 5, 4,
	3, 2, 389, 390, 7, 11, 2, 2, 390, 391, 7, 75, 2, 2, 391, 393, 3, 2, 2,
	2, 392, 388, 3, 2, 2, 2, 393, 396, 3, 2, 2, 2, 394, 392, 3, 2, 2, 2, 394,
	395, 3, 2, 2, 2, 395, 397, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 397, 398,
	7, 10, 2, 2, 398, 400, 3, 2, 2, 2, 399, 365, 3, 2, 2, 2, 399, 369, 3, 2,
	2, 2, 399, 384, 3, 2, 2, 2, 400, 27, 3, 2, 2, 2, 401, 402, 5, 6, 4, 2,
	402, 403, 5, 32, 17, 2, 403, 417, 3, 2, 2, 2, 404, 405, 7, 21, 2, 2, 405,
	406, 5, 6, 4, 2, 406, 407, 7, 9, 2, 2, 407, 411, 5, 30, 16, 2, 408, 410,
	5, 30, 16, 2, 409, 408, 3, 2, 2, 2, 410, 413, 3, 2, 2, 2, 411, 409, 3,
	2, 2, 2, 411, 412, 3, 2, 2, 2, 412, 414, 3, 2, 2, 2, 413, 411, 3, 2, 2,
	2, 414, 415, 7, 10, 2, 2, 415, 417, 3, 2, 2, 2, 416, 401, 3, 2, 2, 2, 416,
	404, 3, 2, 2, 2, 417, 29, 3, 2, 2, 2, 418, 419, 5, 6, 4, 2, 419, 420, 5,
	32, 17, 2, 420, 31, 3, 2, 2, 2, 421, 427, 5, 34, 18, 2, 422, 427, 5, 36,
	19, 2, 423, 427, 5, 38, 20, 2, 424, 427, 5, 40, 21, 2, 425, 427, 5, 42,
	22, 2, 426, 421, 3, 2, 2, 2, 426, 422, 3, 2, 2, 2, 426, 423, 3, 2, 2, 2,
	426, 424, 3, 2, 2, 2, 426, 425, 3, 2, 2, 2, 427, 33, 3, 2, 2, 2, 428, 431,
	5, 4, 3, 2, 429, 431, 5, 66, 34, 2, 430, 428, 3, 2, 2, 2, 430, 429, 3,
	2, 2, 2, 431, 35, 3, 2, 2, 2, 432, 433, 7, 33, 2, 2, 433, 434, 7, 6, 2,
	2, 434, 435, 5, 32, 17, 2, 435, 436, 7, 7, 2, 2, 436, 37, 3, 2, 2, 2, 437,
	438, 7, 8, 2, 2, 438, 439, 5, 32, 17, 2, 439, 39, 3, 2, 2, 2, 440, 441,
	7, 20, 2, 2, 441, 442, 7, 6, 2, 2, 442, 443, 5, 66, 34, 2, 443, 444, 7,
	7, 2, 2, 444, 445, 5, 32, 17, 2, 445, 41, 3, 2, 2, 2, 446, 447, 7, 46,
	2, 2, 447, 459, 7, 3, 2, 2, 448, 453, 5, 44, 23, 2, 449, 450, 7, 4, 2,
	2, 450, 452, 5, 44, 23, 2, 451, 449, 3, 2, 2, 2, 452, 455, 3, 2, 2, 2,
	453, 451, 3, 2, 2, 2, 453, 454, 3, 2, 2, 2, 454, 457, 3, 2, 2, 2, 455,
	453, 3, 2, 2, 2, 456, 458, 7, 80, 2, 2, 457, 456, 3, 2, 2, 2, 457, 458,
	3, 2, 2, 2, 458, 460, 3, 2, 2, 2, 459, 448, 3, 2, 2, 2, 459, 460, 3, 2,
	2, 2, 460, 461, 3, 2, 2, 2, 461, 463, 7, 5, 2, 2, 462, 464, 5, 46, 24,
	2, 463, 462, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 493, 3, 2, 2, 2, 465,
	466, 7, 46, 2, 2, 466, 478, 7, 3, 2, 2, 467, 472, 5, 44, 23, 2, 468, 469,
	7, 4, 2, 2, 469, 471, 5, 44, 23, 2, 470, 468, 3, 2, 2, 2, 471, 474, 3,
	2, 2, 2, 472, 470, 3, 2, 2, 2, 472, 473, 3, 2, 2, 2, 473, 476, 3, 2, 2,
	2, 474, 472, 3, 2, 2, 2, 475, 477, 7, 80, 2, 2, 476, 475, 3, 2, 2, 2, 476,
	477, 3, 2, 2, 2, 477, 479, 3, 2, 2, 2, 478, 467, 3, 2, 2, 2, 478, 479,
	3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 481, 7, 5, 2, 2, 481, 482, 7, 3,
	2, 2, 482, 487, 5, 46, 24, 2, 483, 484, 7, 4, 2, 2, 484, 486, 5, 46, 24,
	2, 485, 483, 3, 2, 2, 2, 486, 489, 3, 2, 2, 2, 487, 485, 3, 2, 2, 2, 487,
	488, 3, 2, 2, 2, 488, 490, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 490, 491,
	7, 5, 2, 2, 491, 493, 3, 2, 2, 2, 492, 446, 3, 2, 2, 2, 492, 465, 3, 2,
	2, 2, 493, 43, 3, 2, 2, 2, 494, 495, 5, 32, 17, 2, 495, 45, 3, 2, 2, 2,
	496, 497, 5, 32, 17, 2, 497, 47, 3, 2, 2, 2, 498, 504, 5, 50, 26, 2, 499,
	500, 5, 54, 28, 2, 500, 501, 7, 12, 2, 2, 501, 504, 3, 2, 2, 2, 502, 504,
	5, 8, 5, 2, 503, 498, 3, 2, 2, 2, 503, 499, 3, 2, 2, 2, 503, 502, 3, 2,
	2, 2, 504, 49, 3, 2, 2, 2, 505, 506, 7, 38, 2, 2, 506, 507, 7, 3, 2, 2,
	507, 508, 5, 64, 33, 2, 508, 509, 7, 5, 2, 2, 509, 515, 5, 52, 27, 2, 510,
	513, 7, 39, 2, 2, 511, 514, 5, 52, 27, 2, 512, 514, 5, 50, 26, 2, 513,
	511, 3, 2, 2, 2, 513, 512, 3, 2, 2, 2, 514, 516, 3, 2, 2, 2, 515, 510,
	3, 2, 2, 2, 515, 516, 3, 2, 2, 2, 516, 579, 3, 2, 2, 2, 517, 518, 7, 40,
	2, 2, 518, 519, 7, 3, 2, 2, 519, 520, 5, 64, 33, 2, 520, 521, 7, 5, 2,
	2, 521, 527, 7, 9, 2, 2, 522, 523, 7, 41, 2, 2, 523, 524, 5, 68, 35, 2,
	524, 525, 7, 11, 2, 2, 525, 526, 5, 52, 27, 2, 526, 528, 3, 2, 2, 2, 527,
	522, 3, 2, 2, 2, 528, 529, 3, 2, 2, 2, 529, 527, 3, 2, 2, 2, 529, 530,
	3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 532, 7, 10, 2, 2, 532, 579, 3, 2,
	2, 2, 533, 534, 7, 35, 2, 2, 534, 535, 7, 3, 2, 2, 535, 536, 5, 4, 3, 2,
	536, 537, 7, 13, 2, 2, 537, 538, 5, 64, 33, 2, 538, 539, 7, 5, 2, 2, 539,
	540, 5, 52, 27, 2, 540, 579, 3, 2, 2, 2, 541, 542, 7, 35, 2, 2, 542, 543,
	7, 3, 2, 2, 543, 544, 5, 4, 3, 2, 544, 545, 7, 4, 2, 2, 545, 546, 5, 4,
	3, 2, 546, 547, 7, 13, 2, 2, 547, 548, 5, 64, 33, 2, 548, 549, 7, 5, 2,
	2, 549, 550, 5, 52, 27, 2, 550, 579, 3, 2, 2, 2, 551, 552, 7, 35, 2, 2,
	552, 553, 7, 3, 2, 2, 553, 554, 5, 54, 28, 2, 554, 555, 7, 12, 2, 2, 555,
	556, 5, 64, 33, 2, 556, 557, 7, 12, 2, 2, 557, 558, 5, 56, 29, 2, 558,
	559, 7, 5, 2, 2, 559, 560, 5, 52, 27, 2, 560, 579, 3, 2, 2, 2, 561, 562,
	7, 36, 2, 2, 562, 579, 7, 12, 2, 2, 563, 564, 7, 37, 2, 2, 564, 579, 7,
	12, 2, 2, 565, 566, 7, 42, 2, 2, 566, 579, 7, 12, 2, 2, 567, 568, 7, 42,
	2, 2, 568, 573, 5, 64, 33, 2, 569, 570, 7, 4, 2, 2, 570, 572, 5, 64, 33,
	2, 571, 569, 3, 2, 2, 2, 572, 575, 3, 2, 2, 2, 573, 571, 3, 2, 2, 2, 573,
	574, 3, 2, 2, 2, 574, 576, 3, 2, 2, 2, 575, 573, 3, 2, 2, 2, 576, 577,
	7, 12, 2, 2, 577, 579, 3, 2, 2, 2, 578, 505, 3, 2, 2, 2, 578, 517, 3, 2,
	2, 2, 578, 533, 3, 2, 2, 2, 578, 541, 3, 2, 2, 2, 578, 551, 3, 2, 2, 2,
	578, 561, 3, 2, 2, 2, 578, 563, 3, 2, 2, 2, 578, 565, 3, 2, 2, 2, 578,
	567, 3, 2, 2, 2, 579, 51, 3, 2, 2, 2, 580, 584, 7, 9, 2, 2, 581, 583, 5,
	48, 25, 2, 582, 581, 3, 2, 2, 2, 583, 586, 3, 2, 2, 2, 584, 582, 3, 2,
	2, 2, 584, 585, 3, 2, 2, 2, 585, 587, 3, 2, 2, 2, 586, 584, 3, 2, 2, 2,
	587, 588, 7, 10, 2, 2, 588, 53, 3, 2, 2, 2, 589, 592, 5, 56, 29, 2, 590,
	592, 5, 72, 37, 2, 591, 589, 3, 2, 2, 2, 591, 590, 3, 2, 2, 2, 592, 55,
	3, 2, 2, 2, 593, 594, 5, 58, 30, 2, 594, 57, 3, 2, 2, 2, 595, 611, 5, 64,
	33, 2, 596, 599, 5, 64, 33, 2, 597, 598, 7, 4, 2, 2, 598, 600, 5, 64, 33,
	2, 599, 597, 3, 2, 2, 2, 600, 601, 3, 2, 2, 2, 601, 599, 3, 2, 2, 2, 601,
	602, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 604, 7, 70, 2, 2, 604, 605,
	5, 64, 33, 2, 605, 611, 3, 2, 2, 2, 606, 607, 5, 64, 33, 2, 607, 608, 9,
	4, 2, 2, 608, 609, 5, 64, 33, 2, 609, 611, 3, 2, 2, 2, 610, 595, 3, 2,
	2, 2, 610, 596, 3, 2, 2, 2, 610, 606, 3, 2, 2, 2, 611, 59, 3, 2, 2, 2,
	612, 615, 5, 4, 3, 2, 613, 615, 7, 14, 2, 2, 614, 612, 3, 2, 2, 2, 614,
	613, 3, 2, 2, 2, 615, 61, 3, 2, 2, 2, 616, 617, 5, 64, 33, 2, 617, 618,
	7, 11, 2, 2, 618, 619, 5, 64, 33, 2, 619, 620, 7, 11, 2, 2, 620, 621, 5,
	64, 33, 2, 621, 633, 3, 2, 2, 2, 622, 623, 5, 64, 33, 2, 623, 624, 7, 11,
	2, 2, 624, 625, 5, 64, 33, 2, 625, 633, 3, 2, 2, 2, 626, 627, 5, 64, 33,
	2, 627, 628, 7, 11, 2, 2, 628, 633, 3, 2, 2, 2, 629, 633, 5, 64, 33, 2,
	630, 631, 7, 11, 2, 2, 631, 633, 5, 64, 33, 2, 632, 616, 3, 2, 2, 2, 632,
	622, 3, 2, 2, 2, 632, 626, 3, 2, 2, 2, 632, 629, 3, 2, 2, 2, 632, 630,
	3, 2, 2, 2, 633, 63, 3, 2, 2, 2, 634, 635, 8, 33, 1, 2, 635, 636, 7, 3,
	2, 2, 636, 637, 5, 64, 33, 2, 637, 638, 7, 5, 2, 2, 638, 688, 3, 2, 2,
	2, 639, 688, 5, 68, 35, 2, 640, 688, 5, 60, 31, 2, 641, 688, 5, 10, 6,
	2, 642, 688, 5, 70, 36, 2, 643, 645, 5, 22, 12, 2, 644, 643, 3, 2, 2, 2,
	644, 645, 3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 655, 7, 9, 2, 2, 647,
	652, 5, 64, 33, 2, 648, 649, 7, 4, 2, 2, 649, 651, 5, 64, 33, 2, 650, 648,
	3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3, 2, 2, 2, 652, 653, 3, 2,
	2, 2, 653, 656, 3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 655, 647, 3, 2, 2, 2,
	655, 656, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 688, 7, 10, 2, 2, 658,
	660, 5, 22, 12, 2, 659, 658, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2, 660, 661,
	3, 2, 2, 2, 661, 675, 7, 9, 2, 2, 662, 663, 5, 64, 33, 2, 663, 664, 7,
	11, 2, 2, 664, 672, 5, 64, 33, 2, 665, 666, 7, 4, 2, 2, 666, 667, 5, 64,
	33, 2, 667, 668, 7, 11, 2, 2, 668, 669, 5, 64, 33, 2, 669, 671, 3, 2, 2,
	2, 670, 665, 3, 2, 2, 2, 671, 674, 3, 2, 2, 2, 672, 670, 3, 2, 2, 2, 672,
	673, 3, 2, 2, 2, 673, 676, 3, 2, 2, 2, 674, 672, 3, 2, 2, 2, 675, 662,
	3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 677, 3, 2, 2, 2, 677, 688, 7, 10,
	2, 2, 678, 679, 5, 22, 12, 2, 679, 680, 7, 3, 2, 2, 680, 681, 5, 64, 33,
	2, 681, 682, 7, 5, 2, 2, 682, 688, 3, 2, 2, 2, 683, 684, 9, 5, 2, 2, 684,
	688, 5, 64, 33, 12, 685, 686, 9, 6, 2, 2, 686, 688, 5, 64, 33, 3, 687,
	634, 3, 2, 2, 2, 687, 639, 3, 2, 2, 2, 687, 640, 3, 2, 2, 2, 687, 641,
	3, 2, 2, 2, 687, 642, 3, 2, 2, 2, 687, 644, 3, 2, 2, 2, 687, 659, 3, 2,
	2, 2, 687, 678, 3, 2, 2, 2, 687, 683, 3, 2, 2, 2, 687, 685, 3, 2, 2, 2,
	688, 773, 3, 2, 2, 2, 689, 690, 12, 10, 2, 2, 690, 691, 7, 49, 2, 2, 691,
	772, 5, 64, 33, 10, 692, 693, 12, 9, 2, 2, 693, 694, 9, 7, 2, 2, 694, 772,
	5, 64, 33, 10, 695, 696, 12, 8, 2, 2, 696, 697, 9, 8, 2, 2, 697, 772, 5,
	64, 33, 9, 698, 699, 12, 7, 2, 2, 699, 700, 9, 9, 2, 2, 700, 772, 5, 64,
	33, 8, 701, 702, 12, 6, 2, 2, 702, 703, 7, 65, 2, 2, 703, 772, 5, 64, 33,
	7, 704, 705, 12, 5, 2, 2, 705, 706, 7, 66, 2, 2, 706, 772, 5, 64, 33, 6,
	707, 708, 12, 4, 2, 2, 708, 709, 9, 6, 2, 2, 709, 772, 5, 64, 33, 5, 710,
	711, 12, 20, 2, 2, 711, 712, 7, 79, 2, 2, 712, 772, 5, 6, 4, 2, 713, 714,
	12, 19, 2, 2, 714, 715, 7, 79, 2, 2, 715, 716, 7, 3, 2, 2, 716, 717, 5,
	22, 12, 2, 717, 718, 7, 5, 2, 2, 718, 772, 3, 2, 2, 2, 719, 720, 12, 18,
	2, 2, 720, 721, 7, 15, 2, 2, 721, 722, 5, 64, 33, 2, 722, 723, 7, 16, 2,
	2, 723, 772, 3, 2, 2, 2, 724, 725, 12, 17, 2, 2, 725, 726, 7, 6, 2, 2,
	726, 727, 5, 64, 33, 2, 727, 728, 7, 7, 2, 2, 728, 772, 3, 2, 2, 2, 729,
	730, 12, 16, 2, 2, 730, 731, 7, 6, 2, 2, 731, 736, 5, 62, 32, 2, 732, 733,
	7, 4, 2, 2, 733, 735, 5, 62, 32, 2, 734, 732, 3, 2, 2, 2, 735, 738, 3,
	2, 2, 2, 736, 734, 3, 2, 2, 2, 736, 737, 3, 2, 2, 2, 737, 739, 3, 2, 2,
	2, 738, 736, 3, 2, 2, 2, 739, 740, 7, 7, 2, 2, 740, 772, 3, 2, 2, 2, 741,
	742, 12, 15, 2, 2, 742, 743, 7, 6, 2, 2, 743, 752, 7, 6, 2, 2, 744, 749,
	5, 64, 33, 2, 745, 746, 7, 4, 2, 2, 746, 748, 5, 64, 33, 2, 747, 745, 3,
	2, 2, 2, 748, 751, 3, 2, 2, 2, 749, 747, 3, 2, 2, 2, 749, 750, 3, 2, 2,
	2, 750, 753, 3, 2, 2, 2, 751, 749, 3, 2, 2, 2, 752, 744, 3, 2, 2, 2, 752,
	753, 3, 2, 2, 2, 753, 754, 3, 2, 2, 2, 754, 755, 7, 7, 2, 2, 755, 772,
	7, 7, 2, 2, 756, 757, 12, 14, 2, 2, 757, 766, 7, 3, 2, 2, 758, 763, 5,
	64, 33, 2, 759, 760, 7, 4, 2, 2, 760, 762, 5, 64, 33, 2, 761, 759, 3, 2,
	2, 2, 762, 765, 3, 2, 2, 2, 763, 761, 3, 2, 2, 2, 763, 764, 3, 2, 2, 2,
	764, 767, 3, 2, 2, 2, 765, 763, 3, 2, 2, 2, 766, 758, 3, 2, 2, 2, 766,
	767, 3, 2, 2, 2, 767, 768, 3, 2, 2, 2, 768, 772, 7, 5, 2, 2, 769, 770,
	12, 11, 2, 2, 770, 772, 9, 10, 2, 2, 771, 689, 3, 2, 2, 2, 771, 692, 3,
	2, 2, 2, 771, 695, 3, 2, 2, 2, 771, 698, 3, 2, 2, 2, 771, 701, 3, 2, 2,
	2, 771, 704, 3, 2, 2, 2, 771, 707, 3, 2, 2, 2, 771, 710, 3, 2, 2, 2, 771,
	713, 3, 2, 2, 2, 771, 719, 3, 2, 2, 2, 771, 724, 3, 2, 2, 2, 771, 729,
	3, 2, 2, 2, 771, 741, 3, 2, 2, 2, 771, 756, 3, 2, 2, 2, 771, 769, 3, 2,
	2, 2, 772, 775, 3, 2, 2, 2, 773, 771, 3, 2, 2, 2, 773, 774, 3, 2, 2, 2,
	774, 65, 3, 2, 2, 2, 775, 773, 3, 2, 2, 2, 776, 777, 9, 11, 2, 2, 777,
	67, 3, 2, 2, 2, 778, 784, 7, 75, 2, 2, 779, 784, 7, 76, 2, 2, 780, 784,
	7, 47, 2, 2, 781, 784, 7, 48, 2, 2, 782, 784, 7, 77, 2, 2, 783, 778, 3,
	2, 2, 2, 783, 779, 3, 2, 2, 2, 783, 780, 3, 2, 2, 2, 783, 781, 3, 2, 2,
	2, 783, 782, 3, 2, 2, 2, 784, 69, 3, 2, 2, 2, 785, 786, 7, 22, 2, 2, 786,
	787, 5, 22, 12, 2, 787, 796, 7, 3, 2, 2, 788, 793, 5, 64, 33, 2, 789, 790,
	7, 4, 2, 2, 790, 792, 5, 64, 33, 2, 791, 789, 3, 2, 2, 2, 792, 795, 3,
	2, 2, 2, 793, 791, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794, 797, 3, 2, 2,
	2, 795, 793, 3, 2, 2, 2, 796, 788, 3, 2, 2, 2, 796, 797, 3, 2, 2, 2, 797,
	798, 3, 2, 2, 2, 798, 799, 7, 5, 2, 2, 799, 71, 3, 2, 2, 2, 800, 801, 7,
	43, 2, 2, 801, 802, 5, 4, 3, 2, 802, 803, 5, 22, 12, 2, 803, 846, 3, 2,
	2, 2, 804, 805, 7, 43, 2, 2, 805, 806, 5, 4, 3, 2, 806, 807, 5, 22, 12,
	2, 807, 808, 7, 70, 2, 2, 808, 809, 5, 64, 33, 2, 809, 846, 3, 2, 2, 2,
	810, 811, 7, 43, 2, 2, 811, 812, 5, 4, 3, 2, 812, 813, 7, 70, 2, 2, 813,
	814, 5, 64, 33, 2, 814, 846, 3, 2, 2, 2, 815, 816, 7, 44, 2, 2, 816, 817,
	5, 4, 3, 2, 817, 818, 5, 22, 12, 2, 818, 846, 3, 2, 2, 2, 819, 820, 7,
	44, 2, 2, 820, 821, 5, 4, 3, 2, 821, 822, 5, 22, 12, 2, 822, 823, 7, 70,
	2, 2, 823, 824, 5, 64, 33, 2, 824, 846, 3, 2, 2, 2, 825, 826, 7, 44, 2,
	2, 826, 827, 5, 4, 3, 2, 827, 828, 7, 70, 2, 2, 828, 829, 5, 64, 33, 2,
	829, 846, 3, 2, 2, 2, 830, 831, 5, 4, 3, 2, 831, 832, 7, 64, 2, 2, 832,
	833, 5, 64, 33, 2, 833, 846, 3, 2, 2, 2, 834, 835, 7, 45, 2, 2, 835, 836,
	5, 4, 3, 2, 836, 837, 5, 22, 12, 2, 837, 838, 7, 70, 2, 2, 838, 839, 5,
	64, 33, 2, 839, 846, 3, 2, 2, 2, 840, 841, 7, 45, 2, 2, 841, 842, 5, 4,
	3, 2, 842, 843, 7, 70, 2, 2, 843, 844, 5, 64, 33, 2, 844, 846, 3, 2, 2,
	2, 845, 800, 3, 2, 2, 2, 845, 804, 3, 2, 2, 2, 845, 810, 3, 2, 2, 2, 845,
	815, 3, 2, 2, 2, 845, 819, 3, 2, 2, 2, 845, 825, 3, 2, 2, 2, 845, 830,
	3, 2, 2, 2, 845, 834, 3, 2, 2, 2, 845, 840, 3, 2, 2, 2, 846, 73, 3, 2,
	2, 2, 96, 76, 78, 92, 96, 98, 102, 114, 118, 120, 129, 143, 147, 149, 153,
	165, 169, 171, 180, 186, 195, 199, 201, 205, 215, 219, 221, 230, 243, 247,
	249, 253, 263, 267, 269, 278, 284, 299, 315, 324, 328, 330, 334, 343, 347,
	349, 358, 363, 377, 380, 394, 399, 411, 416, 426, 430, 453, 457, 459, 463,
	472, 476, 478, 487, 492, 503, 513, 515, 529, 573, 578, 584, 591, 601, 610,
	614, 632, 644, 652, 655, 659, 672, 675, 687, 736, 749, 752, 763, 766, 771,
	773, 783, 793, 796, 845,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'('", "','", "')'", "'['", "']'", "'[]'", "'{'", "'}'", "':'", "';'",
	"'in'", "'@'", "'[?('", "')]'", "'type'", "'message'", "'enum'", "'map'",
	"'oneof'", "'new'", "'uint32'", "'uint64'", "'int32'", "'int64'", "'float32'",
	"'float64'", "'string'", "'bytes'", "'bool'", "'uint8'", "'chan'", "'any'",
	"'for'", "'break'", "'continue'", "'if'", "'else'", "'switch'", "'case'",
	"'return'", "'var'", "'local'", "'const'", "'func'", "", "'nil'", "'**'",
	"'*'", "'/'", "'%'", "'+'", "'-'", "'++'", "'--'", "'=='", "'!='", "'>'",
	"'>='", "'<='", "'<'", "'=~'", "':='", "'&&'", "'||'", "'!'", "'<-'", "'<<-'",
	"'='", "'+='", "'-='", "'*='", "'/='", "", "", "", "", "'.'", "'...'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "TYPEDEF",
	"MESSAGE", "ENUM", "MAP", "ONEOF", "NEW", "UINT32", "UINT64", "INT32",
	"INT64", "FLOAT32", "FLOAT64", "STRING", "BYTES", "BOOL", "UINT8", "CHAN",
	"ANY", "FOR", "BREAK", "CONTINUE", "IF", "ELSE", "SWITCH", "CASE", "RETURN",
	"VAR", "LOCAL", "CONST", "FUNCTION", "BOOLLITERAL", "NULL", "POW", "MUL",
	"DIV", "MOD", "ADD", "SUB", "UNARYADD", "UNARYSUB", "EQ", "INEQ", "GT",
	"GE", "LE", "LT", "REGEX", "LOCALASSIGN", "AND", "OR", "NOT", "CHANOP",
	"CHANOPNONBLOCK", "ASSIGN", "ADDEQUAL", "SUBEQUAL", "MULEQUAL", "DIVEQUAL",
	"INT", "FLOAT", "STRINGLITERAL", "NAME", "DOT", "TAILARRAY", "WHITESPACE",
	"COMMENT",
}

var ruleNames = []string{
	"program", "name", "fieldname", "functiondef", "lambda", "inparam", "outparam",
	"intypename", "returntypename", "param", "typename", "functionTypeName",
	"typedef", "messagefield", "oneoffield", "typenameindef", "simpleTypeNameindef",
	"chanTypeNameindef", "sliceTypeNameindef", "mapTypeNameindef", "functionTypeNameindef",
	"intypenameindef", "returntypenameindef", "execution", "control", "block",
	"line", "restoreStack", "keepStack", "symbol", "indexs", "expr", "basicTypeName",
	"constant", "constructor", "symbolDef",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type goscriptParser struct {
	*antlr.BaseParser
}

func NewgoscriptParser(input antlr.TokenStream) *goscriptParser {
	this := new(goscriptParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "goscript.g4"

	return this
}

// goscriptParser tokens.
const (
	goscriptParserEOF            = antlr.TokenEOF
	goscriptParserT__0           = 1
	goscriptParserT__1           = 2
	goscriptParserT__2           = 3
	goscriptParserT__3           = 4
	goscriptParserT__4           = 5
	goscriptParserT__5           = 6
	goscriptParserT__6           = 7
	goscriptParserT__7           = 8
	goscriptParserT__8           = 9
	goscriptParserT__9           = 10
	goscriptParserT__10          = 11
	goscriptParserT__11          = 12
	goscriptParserT__12          = 13
	goscriptParserT__13          = 14
	goscriptParserTYPEDEF        = 15
	goscriptParserMESSAGE        = 16
	goscriptParserENUM           = 17
	goscriptParserMAP            = 18
	goscriptParserONEOF          = 19
	goscriptParserNEW            = 20
	goscriptParserUINT32         = 21
	goscriptParserUINT64         = 22
	goscriptParserINT32          = 23
	goscriptParserINT64          = 24
	goscriptParserFLOAT32        = 25
	goscriptParserFLOAT64        = 26
	goscriptParserSTRING         = 27
	goscriptParserBYTES          = 28
	goscriptParserBOOL           = 29
	goscriptParserUINT8          = 30
	goscriptParserCHAN           = 31
	goscriptParserANY            = 32
	goscriptParserFOR            = 33
	goscriptParserBREAK          = 34
	goscriptParserCONTINUE       = 35
	goscriptParserIF             = 36
	goscriptParserELSE           = 37
	goscriptParserSWITCH         = 38
	goscriptParserCASE           = 39
	goscriptParserRETURN         = 40
	goscriptParserVAR            = 41
	goscriptParserLOCAL          = 42
	goscriptParserCONST          = 43
	goscriptParserFUNCTION       = 44
	goscriptParserBOOLLITERAL    = 45
	goscriptParserNULL           = 46
	goscriptParserPOW            = 47
	goscriptParserMUL            = 48
	goscriptParserDIV            = 49
	goscriptParserMOD            = 50
	goscriptParserADD            = 51
	goscriptParserSUB            = 52
	goscriptParserUNARYADD       = 53
	goscriptParserUNARYSUB       = 54
	goscriptParserEQ             = 55
	goscriptParserINEQ           = 56
	goscriptParserGT             = 57
	goscriptParserGE             = 58
	goscriptParserLE             = 59
	goscriptParserLT             = 60
	goscriptParserREGEX          = 61
	goscriptParserLOCALASSIGN    = 62
	goscriptParserAND            = 63
	goscriptParserOR             = 64
	goscriptParserNOT            = 65
	goscriptParserCHANOP         = 66
	goscriptParserCHANOPNONBLOCK = 67
	goscriptParserASSIGN         = 68
	goscriptParserADDEQUAL       = 69
	goscriptParserSUBEQUAL       = 70
	goscriptParserMULEQUAL       = 71
	goscriptParserDIVEQUAL       = 72
	goscriptParserINT            = 73
	goscriptParserFLOAT          = 74
	goscriptParserSTRINGLITERAL  = 75
	goscriptParserNAME           = 76
	goscriptParserDOT            = 77
	goscriptParserTAILARRAY      = 78
	goscriptParserWHITESPACE     = 79
	goscriptParserCOMMENT        = 80
)

// goscriptParser rules.
const (
	goscriptParserRULE_program               = 0
	goscriptParserRULE_name                  = 1
	goscriptParserRULE_fieldname             = 2
	goscriptParserRULE_functiondef           = 3
	goscriptParserRULE_lambda                = 4
	goscriptParserRULE_inparam               = 5
	goscriptParserRULE_outparam              = 6
	goscriptParserRULE_intypename            = 7
	goscriptParserRULE_returntypename        = 8
	goscriptParserRULE_param                 = 9
	goscriptParserRULE_typename              = 10
	goscriptParserRULE_functionTypeName      = 11
	goscriptParserRULE_typedef               = 12
	goscriptParserRULE_messagefield          = 13
	goscriptParserRULE_oneoffield            = 14
	goscriptParserRULE_typenameindef         = 15
	goscriptParserRULE_simpleTypeNameindef   = 16
	goscriptParserRULE_chanTypeNameindef     = 17
	goscriptParserRULE_sliceTypeNameindef    = 18
	goscriptParserRULE_mapTypeNameindef      = 19
	goscriptParserRULE_functionTypeNameindef = 20
	goscriptParserRULE_intypenameindef       = 21
	goscriptParserRULE_returntypenameindef   = 22
	goscriptParserRULE_execution             = 23
	goscriptParserRULE_control               = 24
	goscriptParserRULE_block                 = 25
	goscriptParserRULE_line                  = 26
	goscriptParserRULE_restoreStack          = 27
	goscriptParserRULE_keepStack             = 28
	goscriptParserRULE_symbol                = 29
	goscriptParserRULE_indexs                = 30
	goscriptParserRULE_expr                  = 31
	goscriptParserRULE_basicTypeName         = 32
	goscriptParserRULE_constant              = 33
	goscriptParserRULE_constructor           = 34
	goscriptParserRULE_symbolDef             = 35
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllTypedef() []ITypedefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypedefContext)(nil)).Elem())
	var tst = make([]ITypedefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypedefContext)
		}
	}

	return tst
}

func (s *ProgramContext) Typedef(i int) ITypedefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypedefContext)
}

func (s *ProgramContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *ProgramContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (p *goscriptParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, goscriptParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(74)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
		p.SetState(74)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(72)
				p.Typedef()
			}

		case 2:
			{
				p.SetState(73)
				p.Execution()
			}

		}

		p.SetState(76)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *NameContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *NameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *NameContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *NameContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *NameContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *NameContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *NameContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *NameContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *NameContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *NameContext) CASE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, 0)
}

func (s *NameContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *NameContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *NameContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *NameContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *NameContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(goscriptParserMESSAGE, 0)
}

func (s *NameContext) ENUM() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUM, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *goscriptParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, goscriptParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(78)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFieldnameContext is an interface to support dynamic dispatch.
type IFieldnameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldnameContext differentiates from other interfaces.
	IsFieldnameContext()
}

type FieldnameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldnameContext() *FieldnameContext {
	var p = new(FieldnameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_fieldname
	return p
}

func (*FieldnameContext) IsFieldnameContext() {}

func NewFieldnameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldnameContext {
	var p = new(FieldnameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_fieldname

	return p
}

func (s *FieldnameContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldnameContext) NAME() antlr.TerminalNode {
	return s.GetToken(goscriptParserNAME, 0)
}

func (s *FieldnameContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *FieldnameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *FieldnameContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *FieldnameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *FieldnameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *FieldnameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *FieldnameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *FieldnameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *FieldnameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *FieldnameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *FieldnameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *FieldnameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *FieldnameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *FieldnameContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *FieldnameContext) ANY() antlr.TerminalNode {
	return s.GetToken(goscriptParserANY, 0)
}

func (s *FieldnameContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *FieldnameContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *FieldnameContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *FieldnameContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *FieldnameContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *FieldnameContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *FieldnameContext) CASE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, 0)
}

func (s *FieldnameContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *FieldnameContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *FieldnameContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *FieldnameContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *FieldnameContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(goscriptParserMESSAGE, 0)
}

func (s *FieldnameContext) ENUM() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUM, 0)
}

func (s *FieldnameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldnameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldnameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFieldname(s)
	}
}

func (s *FieldnameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFieldname(s)
	}
}

func (p *goscriptParser) Fieldname() (localctx IFieldnameContext) {
	localctx = NewFieldnameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, goscriptParserRULE_fieldname)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(80)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserUINT32-15))|(1<<(goscriptParserUINT64-15))|(1<<(goscriptParserINT32-15))|(1<<(goscriptParserINT64-15))|(1<<(goscriptParserFLOAT32-15))|(1<<(goscriptParserFLOAT64-15))|(1<<(goscriptParserSTRING-15))|(1<<(goscriptParserBYTES-15))|(1<<(goscriptParserBOOL-15))|(1<<(goscriptParserUINT8-15))|(1<<(goscriptParserCHAN-15))|(1<<(goscriptParserANY-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFunctiondefContext is an interface to support dynamic dispatch.
type IFunctiondefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctiondefContext differentiates from other interfaces.
	IsFunctiondefContext()
}

type FunctiondefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctiondefContext() *FunctiondefContext {
	var p = new(FunctiondefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functiondef
	return p
}

func (*FunctiondefContext) IsFunctiondefContext() {}

func NewFunctiondefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctiondefContext {
	var p = new(FunctiondefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functiondef

	return p
}

func (s *FunctiondefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctiondefContext) CopyFrom(ctx *FunctiondefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctiondefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctiondefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionDefContext struct {
	*FunctiondefContext
}

func NewFunctionDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionDefContext {
	var p = new(FunctionDefContext)

	p.FunctiondefContext = NewEmptyFunctiondefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctiondefContext))

	return p
}

func (s *FunctionDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionDefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FunctionDefContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *FunctionDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *FunctionDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *FunctionDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionDef(s)
	}
}

func (s *FunctionDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionDef(s)
	}
}

func (p *goscriptParser) Functiondef() (localctx IFunctiondefContext) {
	localctx = NewFunctiondefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, goscriptParserRULE_functiondef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(184)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(82)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(83)
			p.Name()
		}
		{
			p.SetState(84)
			p.Match(goscriptParserT__0)
		}
		p.SetState(96)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(85)
				p.Inparam()
			}
			p.SetState(90)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(86)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(87)
					p.Inparam()
				}

				p.SetState(92)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(94)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(93)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(98)
			p.Match(goscriptParserT__2)
		}
		p.SetState(100)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(99)
				p.Returntypename()
			}

		}
		{
			p.SetState(102)
			p.Block()
		}

	case 2:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(104)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(105)
			p.Name()
		}
		{
			p.SetState(106)
			p.Match(goscriptParserT__0)
		}
		p.SetState(118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(107)
				p.Inparam()
			}
			p.SetState(112)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(108)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(109)
					p.Inparam()
				}

				p.SetState(114)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(116)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(115)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(120)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(121)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(122)
			p.Returntypename()
		}
		p.SetState(127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(123)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(124)
				p.Returntypename()
			}

			p.SetState(129)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(130)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(131)
			p.Block()
		}

	case 3:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(133)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(134)
			p.Name()
		}
		{
			p.SetState(135)
			p.Match(goscriptParserT__0)
		}
		p.SetState(147)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(136)
				p.Inparam()
			}
			p.SetState(141)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(137)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(138)
					p.Inparam()
				}

				p.SetState(143)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(145)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(144)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(149)
			p.Match(goscriptParserT__2)
		}
		p.SetState(151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(150)
				p.Outparam()
			}

		}
		{
			p.SetState(153)
			p.Block()
		}

	case 4:
		localctx = NewFunctionDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(155)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(156)
			p.Name()
		}
		{
			p.SetState(157)
			p.Match(goscriptParserT__0)
		}
		p.SetState(169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(158)
				p.Inparam()
			}
			p.SetState(163)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(159)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(160)
					p.Inparam()
				}

				p.SetState(165)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(166)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(171)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(172)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(173)
			p.Outparam()
		}
		p.SetState(178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(174)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(175)
				p.Outparam()
			}

			p.SetState(180)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(181)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(182)
			p.Block()
		}

	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) CopyFrom(ctx *LambdaContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LambdaDefContext struct {
	*LambdaContext
}

func NewLambdaDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaDefContext {
	var p = new(LambdaDefContext)

	p.LambdaContext = NewEmptyLambdaContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LambdaContext))

	return p
}

func (s *LambdaDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *LambdaDefContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *LambdaDefContext) AllInparam() []IInparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInparamContext)(nil)).Elem())
	var tst = make([]IInparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Inparam(i int) IInparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInparamContext)
}

func (s *LambdaDefContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *LambdaDefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *LambdaDefContext) AllOutparam() []IOutparamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutparamContext)(nil)).Elem())
	var tst = make([]IOutparamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutparamContext)
		}
	}

	return tst
}

func (s *LambdaDefContext) Outparam(i int) IOutparamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutparamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutparamContext)
}

func (s *LambdaDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLambdaDef(s)
	}
}

func (s *LambdaDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLambdaDef(s)
	}
}

func (p *goscriptParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, goscriptParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(186)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(187)
			p.Match(goscriptParserT__0)
		}
		p.SetState(199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(188)
				p.Inparam()
			}
			p.SetState(193)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(189)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(190)
					p.Inparam()
				}

				p.SetState(195)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(197)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(196)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(201)
			p.Match(goscriptParserT__2)
		}
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(202)
				p.Returntypename()
			}

		}
		{
			p.SetState(205)
			p.Block()
		}

	case 2:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(206)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(207)
			p.Match(goscriptParserT__0)
		}
		p.SetState(219)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(208)
				p.Inparam()
			}
			p.SetState(213)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(209)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(210)
					p.Inparam()
				}

				p.SetState(215)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(217)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(216)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(221)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(222)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(223)
			p.Returntypename()
		}
		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(224)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(225)
				p.Returntypename()
			}

			p.SetState(230)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(231)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(232)
			p.Block()
		}

	case 3:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(234)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(235)
			p.Match(goscriptParserT__0)
		}
		p.SetState(247)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(236)
				p.Inparam()
			}
			p.SetState(241)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(237)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(238)
					p.Inparam()
				}

				p.SetState(243)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(245)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(244)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(249)
			p.Match(goscriptParserT__2)
		}
		p.SetState(251)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(250)
				p.Outparam()
			}

		}
		{
			p.SetState(253)
			p.Block()
		}

	case 4:
		localctx = NewLambdaDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(254)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(255)
			p.Match(goscriptParserT__0)
		}
		p.SetState(267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(256)
				p.Inparam()
			}
			p.SetState(261)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(257)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(258)
					p.Inparam()
				}

				p.SetState(263)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(265)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(264)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(269)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(270)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(271)
			p.Outparam()
		}
		p.SetState(276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(272)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(273)
				p.Outparam()
			}

			p.SetState(278)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(279)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(280)
			p.Block()
		}

	}

	return localctx
}

// IInparamContext is an interface to support dynamic dispatch.
type IInparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInparamContext differentiates from other interfaces.
	IsInparamContext()
}

type InparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInparamContext() *InparamContext {
	var p = new(InparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_inparam
	return p
}

func (*InparamContext) IsInparamContext() {}

func NewInparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InparamContext {
	var p = new(InparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_inparam

	return p
}

func (s *InparamContext) GetParser() antlr.Parser { return s.parser }

func (s *InparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *InparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInparam(s)
	}
}

func (s *InparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInparam(s)
	}
}

func (p *goscriptParser) Inparam() (localctx IInparamContext) {
	localctx = NewInparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, goscriptParserRULE_inparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(284)
		p.Param()
	}

	return localctx
}

// IOutparamContext is an interface to support dynamic dispatch.
type IOutparamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutparamContext differentiates from other interfaces.
	IsOutparamContext()
}

type OutparamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutparamContext() *OutparamContext {
	var p = new(OutparamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_outparam
	return p
}

func (*OutparamContext) IsOutparamContext() {}

func NewOutparamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OutparamContext {
	var p = new(OutparamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_outparam

	return p
}

func (s *OutparamContext) GetParser() antlr.Parser { return s.parser }

func (s *OutparamContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *OutparamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutparamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OutparamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOutparam(s)
	}
}

func (s *OutparamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOutparam(s)
	}
}

func (p *goscriptParser) Outparam() (localctx IOutparamContext) {
	localctx = NewOutparamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, goscriptParserRULE_outparam)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(286)
		p.Param()
	}

	return localctx
}

// IIntypenameContext is an interface to support dynamic dispatch.
type IIntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameContext differentiates from other interfaces.
	IsIntypenameContext()
}

type IntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameContext() *IntypenameContext {
	var p = new(IntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypename
	return p
}

func (*IntypenameContext) IsIntypenameContext() {}

func NewIntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameContext {
	var p = new(IntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypename

	return p
}

func (s *IntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *IntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypename(s)
	}
}

func (s *IntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypename(s)
	}
}

func (p *goscriptParser) Intypename() (localctx IIntypenameContext) {
	localctx = NewIntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, goscriptParserRULE_intypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(288)
		p.Typename()
	}

	return localctx
}

// IReturntypenameContext is an interface to support dynamic dispatch.
type IReturntypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameContext differentiates from other interfaces.
	IsReturntypenameContext()
}

type ReturntypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameContext() *ReturntypenameContext {
	var p = new(ReturntypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypename
	return p
}

func (*ReturntypenameContext) IsReturntypenameContext() {}

func NewReturntypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameContext {
	var p = new(ReturntypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypename

	return p
}

func (s *ReturntypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ReturntypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypename(s)
	}
}

func (s *ReturntypenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypename(s)
	}
}

func (p *goscriptParser) Returntypename() (localctx IReturntypenameContext) {
	localctx = NewReturntypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, goscriptParserRULE_returntypename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(290)
		p.Typename()
	}

	return localctx
}

// IParamContext is an interface to support dynamic dispatch.
type IParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParamContext differentiates from other interfaces.
	IsParamContext()
}

type ParamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamContext() *ParamContext {
	var p = new(ParamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_param
	return p
}

func (*ParamContext) IsParamContext() {}

func NewParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamContext {
	var p = new(ParamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_param

	return p
}

func (s *ParamContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ParamContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterParam(s)
	}
}

func (s *ParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitParam(s)
	}
}

func (p *goscriptParser) Param() (localctx IParamContext) {
	localctx = NewParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, goscriptParserRULE_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(292)
		p.Name()
	}
	{
		p.SetState(293)
		p.Typename()
	}

	return localctx
}

// ITypenameContext is an interface to support dynamic dispatch.
type ITypenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameContext differentiates from other interfaces.
	IsTypenameContext()
}

type TypenameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameContext() *TypenameContext {
	var p = new(TypenameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typename
	return p
}

func (*TypenameContext) IsTypenameContext() {}

func NewTypenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameContext {
	var p = new(TypenameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typename

	return p
}

func (s *TypenameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameContext) CopyFrom(ctx *TypenameContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MapTypeNameContext struct {
	*TypenameContext
}

func NewMapTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapTypeNameContext {
	var p = new(MapTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *MapTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *MapTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeName(s)
	}
}

func (s *MapTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeName(s)
	}
}

type FunctionTypeContext struct {
	*TypenameContext
}

func NewFunctionTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

type SimpleTypeNameContext struct {
	*TypenameContext
}

func NewSimpleTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleTypeNameContext {
	var p = new(SimpleTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SimpleTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SimpleTypeNameContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeName(s)
	}
}

func (s *SimpleTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeName(s)
	}
}

type ChanTypeNameContext struct {
	*TypenameContext
}

func NewChanTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChanTypeNameContext {
	var p = new(ChanTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *ChanTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ChanTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeName(s)
	}
}

func (s *ChanTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeName(s)
	}
}

type SliceTypeNameContext struct {
	*TypenameContext
}

func NewSliceTypeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceTypeNameContext {
	var p = new(SliceTypeNameContext)

	p.TypenameContext = NewEmptyTypenameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypenameContext))

	return p
}

func (s *SliceTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *SliceTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeName(s)
	}
}

func (s *SliceTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeName(s)
	}
}

func (p *goscriptParser) Typename() (localctx ITypenameContext) {
	localctx = NewTypenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, goscriptParserRULE_typename)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(297)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case goscriptParserTYPEDEF, goscriptParserMESSAGE, goscriptParserENUM, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
			{
				p.SetState(295)
				p.Name()
			}

		case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserANY:
			{
				p.SetState(296)
				p.BasicTypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewFunctionTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(299)
			p.FunctionTypeName()
		}

	case 3:
		localctx = NewMapTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(300)
			p.Match(goscriptParserMAP)
		}
		{
			p.SetState(301)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(302)
			p.BasicTypeName()
		}
		{
			p.SetState(303)
			p.Match(goscriptParserT__4)
		}
		{
			p.SetState(304)
			p.Typename()
		}

	case 4:
		localctx = NewSliceTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(306)
			p.Match(goscriptParserT__5)
		}
		{
			p.SetState(307)
			p.Typename()
		}

	case 5:
		localctx = NewChanTypeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(308)
			p.Match(goscriptParserCHAN)
		}
		{
			p.SetState(309)
			p.Match(goscriptParserT__3)
		}
		{
			p.SetState(310)
			p.Typename()
		}
		{
			p.SetState(311)
			p.Match(goscriptParserT__4)
		}

	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameContext) AllIntypename() []IIntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameContext)(nil)).Elem())
	var tst = make([]IIntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Intypename(i int) IIntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameContext)
}

func (s *FunctionTypeNameContext) AllReturntypename() []IReturntypenameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem())
	var tst = make([]IReturntypenameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Returntypename(i int) IReturntypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameContext)
}

func (s *FunctionTypeNameContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *goscriptParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, goscriptParserRULE_functionTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(315)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(316)
			p.Match(goscriptParserT__0)
		}
		p.SetState(328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(317)
				p.Intypename()
			}
			p.SetState(322)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(318)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(319)
					p.Intypename()
				}

				p.SetState(324)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(326)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(325)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(330)
			p.Match(goscriptParserT__2)
		}
		p.SetState(332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(331)
				p.Returntypename()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(334)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(335)
			p.Match(goscriptParserT__0)
		}
		p.SetState(347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(336)
				p.Intypename()
			}
			p.SetState(341)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(337)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(338)
					p.Intypename()
				}

				p.SetState(343)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(345)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(344)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(349)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(350)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(351)
			p.Returntypename()
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(352)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(353)
				p.Returntypename()
			}

			p.SetState(358)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(359)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// ITypedefContext is an interface to support dynamic dispatch.
type ITypedefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefContext differentiates from other interfaces.
	IsTypedefContext()
}

type TypedefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefContext() *TypedefContext {
	var p = new(TypedefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typedef
	return p
}

func (*TypedefContext) IsTypedefContext() {}

func NewTypedefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefContext {
	var p = new(TypedefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typedef

	return p
}

func (s *TypedefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefContext) CopyFrom(ctx *TypedefContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TypedefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeDefMessageContext struct {
	*TypedefContext
}

func NewTypeDefMessageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefMessageContext {
	var p = new(TypeDefMessageContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefMessageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefMessageContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefMessageContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefMessageContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(goscriptParserMESSAGE, 0)
}

func (s *TypeDefMessageContext) AllMessagefield() []IMessagefieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem())
	var tst = make([]IMessagefieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMessagefieldContext)
		}
	}

	return tst
}

func (s *TypeDefMessageContext) Messagefield(i int) IMessagefieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMessagefieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMessagefieldContext)
}

func (s *TypeDefMessageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefMessage(s)
	}
}

func (s *TypeDefMessageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefMessage(s)
	}
}

type TypeDefAliasContext struct {
	*TypedefContext
}

func NewTypeDefAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefAliasContext {
	var p = new(TypeDefAliasContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefAliasContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefAliasContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefAliasContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *TypeDefAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefAlias(s)
	}
}

func (s *TypeDefAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefAlias(s)
	}
}

type TypeDefEnumContext struct {
	*TypedefContext
}

func NewTypeDefEnumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeDefEnumContext {
	var p = new(TypeDefEnumContext)

	p.TypedefContext = NewEmptyTypedefContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TypedefContext))

	return p
}

func (s *TypeDefEnumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefEnumContext) TYPEDEF() antlr.TerminalNode {
	return s.GetToken(goscriptParserTYPEDEF, 0)
}

func (s *TypeDefEnumContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *TypeDefEnumContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeDefEnumContext) ENUM() antlr.TerminalNode {
	return s.GetToken(goscriptParserENUM, 0)
}

func (s *TypeDefEnumContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserINT)
}

func (s *TypeDefEnumContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, i)
}

func (s *TypeDefEnumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeDefEnum(s)
	}
}

func (s *TypeDefEnumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeDefEnum(s)
	}
}

func (p *goscriptParser) Typedef() (localctx ITypedefContext) {
	localctx = NewTypedefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, goscriptParserRULE_typedef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(397)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTypeDefAliasContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(363)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(364)
			p.Name()
		}
		{
			p.SetState(365)
			p.Typenameindef()
		}

	case 2:
		localctx = NewTypeDefMessageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(367)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(368)
			p.Name()
		}
		{
			p.SetState(369)
			p.Match(goscriptParserMESSAGE)
		}
		{
			p.SetState(370)
			p.Match(goscriptParserT__6)
		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserUINT32-15))|(1<<(goscriptParserUINT64-15))|(1<<(goscriptParserINT32-15))|(1<<(goscriptParserINT64-15))|(1<<(goscriptParserFLOAT32-15))|(1<<(goscriptParserFLOAT64-15))|(1<<(goscriptParserSTRING-15))|(1<<(goscriptParserBYTES-15))|(1<<(goscriptParserBOOL-15))|(1<<(goscriptParserUINT8-15))|(1<<(goscriptParserCHAN-15))|(1<<(goscriptParserANY-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(371)
				p.Messagefield()
			}
			p.SetState(375)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserUINT32-15))|(1<<(goscriptParserUINT64-15))|(1<<(goscriptParserINT32-15))|(1<<(goscriptParserINT64-15))|(1<<(goscriptParserFLOAT32-15))|(1<<(goscriptParserFLOAT64-15))|(1<<(goscriptParserSTRING-15))|(1<<(goscriptParserBYTES-15))|(1<<(goscriptParserBOOL-15))|(1<<(goscriptParserUINT8-15))|(1<<(goscriptParserCHAN-15))|(1<<(goscriptParserANY-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
				{
					p.SetState(372)
					p.Messagefield()
				}

				p.SetState(377)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(380)
			p.Match(goscriptParserT__7)
		}

	case 3:
		localctx = NewTypeDefEnumContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(382)
			p.Match(goscriptParserTYPEDEF)
		}
		{
			p.SetState(383)
			p.Name()
		}
		{
			p.SetState(384)
			p.Match(goscriptParserENUM)
		}
		{
			p.SetState(385)
			p.Match(goscriptParserT__6)
		}
		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(386)
				p.Name()
			}
			{
				p.SetState(387)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(388)
				p.Match(goscriptParserINT)
			}

			p.SetState(394)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(395)
			p.Match(goscriptParserT__7)
		}

	}

	return localctx
}

// IMessagefieldContext is an interface to support dynamic dispatch.
type IMessagefieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMessagefieldContext differentiates from other interfaces.
	IsMessagefieldContext()
}

type MessagefieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMessagefieldContext() *MessagefieldContext {
	var p = new(MessagefieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_messagefield
	return p
}

func (*MessagefieldContext) IsMessagefieldContext() {}

func NewMessagefieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MessagefieldContext {
	var p = new(MessagefieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_messagefield

	return p
}

func (s *MessagefieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MessagefieldContext) CopyFrom(ctx *MessagefieldContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *MessagefieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MessagefieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FieldDefContext struct {
	*MessagefieldContext
}

func NewFieldDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FieldDefContext {
	var p = new(FieldDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *FieldDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *FieldDefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *FieldDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFieldDef(s)
	}
}

func (s *FieldDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFieldDef(s)
	}
}

type OneofDefContext struct {
	*MessagefieldContext
}

func NewOneofDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OneofDefContext {
	var p = new(OneofDefContext)

	p.MessagefieldContext = NewEmptyMessagefieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MessagefieldContext))

	return p
}

func (s *OneofDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneofDefContext) ONEOF() antlr.TerminalNode {
	return s.GetToken(goscriptParserONEOF, 0)
}

func (s *OneofDefContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *OneofDefContext) AllOneoffield() []IOneoffieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem())
	var tst = make([]IOneoffieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOneoffieldContext)
		}
	}

	return tst
}

func (s *OneofDefContext) Oneoffield(i int) IOneoffieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOneoffieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOneoffieldContext)
}

func (s *OneofDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneofDef(s)
	}
}

func (s *OneofDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneofDef(s)
	}
}

func (p *goscriptParser) Messagefield() (localctx IMessagefieldContext) {
	localctx = NewMessagefieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, goscriptParserRULE_messagefield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFieldDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(399)
			p.Fieldname()
		}
		{
			p.SetState(400)
			p.Typenameindef()
		}

	case 2:
		localctx = NewOneofDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(402)
			p.Match(goscriptParserONEOF)
		}
		{
			p.SetState(403)
			p.Fieldname()
		}
		{
			p.SetState(404)
			p.Match(goscriptParserT__6)
		}
		{
			p.SetState(405)
			p.Oneoffield()
		}
		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(goscriptParserTYPEDEF-15))|(1<<(goscriptParserMESSAGE-15))|(1<<(goscriptParserENUM-15))|(1<<(goscriptParserMAP-15))|(1<<(goscriptParserONEOF-15))|(1<<(goscriptParserUINT32-15))|(1<<(goscriptParserUINT64-15))|(1<<(goscriptParserINT32-15))|(1<<(goscriptParserINT64-15))|(1<<(goscriptParserFLOAT32-15))|(1<<(goscriptParserFLOAT64-15))|(1<<(goscriptParserSTRING-15))|(1<<(goscriptParserBYTES-15))|(1<<(goscriptParserBOOL-15))|(1<<(goscriptParserUINT8-15))|(1<<(goscriptParserCHAN-15))|(1<<(goscriptParserANY-15))|(1<<(goscriptParserFOR-15))|(1<<(goscriptParserBREAK-15))|(1<<(goscriptParserCONTINUE-15))|(1<<(goscriptParserIF-15))|(1<<(goscriptParserELSE-15))|(1<<(goscriptParserSWITCH-15))|(1<<(goscriptParserCASE-15))|(1<<(goscriptParserRETURN-15))|(1<<(goscriptParserVAR-15))|(1<<(goscriptParserLOCAL-15))|(1<<(goscriptParserCONST-15)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(406)
				p.Oneoffield()
			}

			p.SetState(411)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(412)
			p.Match(goscriptParserT__7)
		}

	}

	return localctx
}

// IOneoffieldContext is an interface to support dynamic dispatch.
type IOneoffieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOneoffieldContext differentiates from other interfaces.
	IsOneoffieldContext()
}

type OneoffieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOneoffieldContext() *OneoffieldContext {
	var p = new(OneoffieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_oneoffield
	return p
}

func (*OneoffieldContext) IsOneoffieldContext() {}

func NewOneoffieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OneoffieldContext {
	var p = new(OneoffieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_oneoffield

	return p
}

func (s *OneoffieldContext) GetParser() antlr.Parser { return s.parser }

func (s *OneoffieldContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *OneoffieldContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *OneoffieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OneoffieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OneoffieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterOneoffield(s)
	}
}

func (s *OneoffieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitOneoffield(s)
	}
}

func (p *goscriptParser) Oneoffield() (localctx IOneoffieldContext) {
	localctx = NewOneoffieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, goscriptParserRULE_oneoffield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(416)
		p.Fieldname()
	}
	{
		p.SetState(417)
		p.Typenameindef()
	}

	return localctx
}

// ITypenameindefContext is an interface to support dynamic dispatch.
type ITypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypenameindefContext differentiates from other interfaces.
	IsTypenameindefContext()
}

type TypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypenameindefContext() *TypenameindefContext {
	var p = new(TypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_typenameindef
	return p
}

func (*TypenameindefContext) IsTypenameindefContext() {}

func NewTypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypenameindefContext {
	var p = new(TypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_typenameindef

	return p
}

func (s *TypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypenameindefContext) SimpleTypeNameindef() ISimpleTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeNameindefContext)
}

func (s *TypenameindefContext) ChanTypeNameindef() IChanTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChanTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChanTypeNameindefContext)
}

func (s *TypenameindefContext) SliceTypeNameindef() ISliceTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceTypeNameindefContext)
}

func (s *TypenameindefContext) MapTypeNameindef() IMapTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapTypeNameindefContext)
}

func (s *TypenameindefContext) FunctionTypeNameindef() IFunctionTypeNameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameindefContext)
}

func (s *TypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypenameindef(s)
	}
}

func (s *TypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypenameindef(s)
	}
}

func (p *goscriptParser) Typenameindef() (localctx ITypenameindefContext) {
	localctx = NewTypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, goscriptParserRULE_typenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(419)
			p.SimpleTypeNameindef()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(420)
			p.ChanTypeNameindef()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(421)
			p.SliceTypeNameindef()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(422)
			p.MapTypeNameindef()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(423)
			p.FunctionTypeNameindef()
		}

	}

	return localctx
}

// ISimpleTypeNameindefContext is an interface to support dynamic dispatch.
type ISimpleTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleTypeNameindefContext differentiates from other interfaces.
	IsSimpleTypeNameindefContext()
}

type SimpleTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeNameindefContext() *SimpleTypeNameindefContext {
	var p = new(SimpleTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_simpleTypeNameindef
	return p
}

func (*SimpleTypeNameindefContext) IsSimpleTypeNameindefContext() {}

func NewSimpleTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeNameindefContext {
	var p = new(SimpleTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_simpleTypeNameindef

	return p
}

func (s *SimpleTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeNameindefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SimpleTypeNameindefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *SimpleTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSimpleTypeNameindef(s)
	}
}

func (s *SimpleTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSimpleTypeNameindef(s)
	}
}

func (p *goscriptParser) SimpleTypeNameindef() (localctx ISimpleTypeNameindefContext) {
	localctx = NewSimpleTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, goscriptParserRULE_simpleTypeNameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(428)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserTYPEDEF, goscriptParserMESSAGE, goscriptParserENUM, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
		{
			p.SetState(426)
			p.Name()
		}

	case goscriptParserUINT32, goscriptParserUINT64, goscriptParserINT32, goscriptParserINT64, goscriptParserFLOAT32, goscriptParserFLOAT64, goscriptParserSTRING, goscriptParserBYTES, goscriptParserBOOL, goscriptParserUINT8, goscriptParserANY:
		{
			p.SetState(427)
			p.BasicTypeName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChanTypeNameindefContext is an interface to support dynamic dispatch.
type IChanTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChanTypeNameindefContext differentiates from other interfaces.
	IsChanTypeNameindefContext()
}

type ChanTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChanTypeNameindefContext() *ChanTypeNameindefContext {
	var p = new(ChanTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_chanTypeNameindef
	return p
}

func (*ChanTypeNameindefContext) IsChanTypeNameindefContext() {}

func NewChanTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChanTypeNameindefContext {
	var p = new(ChanTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_chanTypeNameindef

	return p
}

func (s *ChanTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *ChanTypeNameindefContext) CHAN() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHAN, 0)
}

func (s *ChanTypeNameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ChanTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChanTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChanTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterChanTypeNameindef(s)
	}
}

func (s *ChanTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitChanTypeNameindef(s)
	}
}

func (p *goscriptParser) ChanTypeNameindef() (localctx IChanTypeNameindefContext) {
	localctx = NewChanTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, goscriptParserRULE_chanTypeNameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.Match(goscriptParserCHAN)
	}
	{
		p.SetState(431)
		p.Match(goscriptParserT__3)
	}
	{
		p.SetState(432)
		p.Typenameindef()
	}
	{
		p.SetState(433)
		p.Match(goscriptParserT__4)
	}

	return localctx
}

// ISliceTypeNameindefContext is an interface to support dynamic dispatch.
type ISliceTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypeNameindefContext differentiates from other interfaces.
	IsSliceTypeNameindefContext()
}

type SliceTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypeNameindefContext() *SliceTypeNameindefContext {
	var p = new(SliceTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_sliceTypeNameindef
	return p
}

func (*SliceTypeNameindefContext) IsSliceTypeNameindefContext() {}

func NewSliceTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypeNameindefContext {
	var p = new(SliceTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_sliceTypeNameindef

	return p
}

func (s *SliceTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypeNameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *SliceTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceTypeNameindef(s)
	}
}

func (s *SliceTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceTypeNameindef(s)
	}
}

func (p *goscriptParser) SliceTypeNameindef() (localctx ISliceTypeNameindefContext) {
	localctx = NewSliceTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, goscriptParserRULE_sliceTypeNameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(435)
		p.Match(goscriptParserT__5)
	}
	{
		p.SetState(436)
		p.Typenameindef()
	}

	return localctx
}

// IMapTypeNameindefContext is an interface to support dynamic dispatch.
type IMapTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeNameindefContext differentiates from other interfaces.
	IsMapTypeNameindefContext()
}

type MapTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeNameindefContext() *MapTypeNameindefContext {
	var p = new(MapTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_mapTypeNameindef
	return p
}

func (*MapTypeNameindefContext) IsMapTypeNameindefContext() {}

func NewMapTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeNameindefContext {
	var p = new(MapTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_mapTypeNameindef

	return p
}

func (s *MapTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeNameindefContext) MAP() antlr.TerminalNode {
	return s.GetToken(goscriptParserMAP, 0)
}

func (s *MapTypeNameindefContext) BasicTypeName() IBasicTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeNameContext)
}

func (s *MapTypeNameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *MapTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapTypeNameindef(s)
	}
}

func (s *MapTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapTypeNameindef(s)
	}
}

func (p *goscriptParser) MapTypeNameindef() (localctx IMapTypeNameindefContext) {
	localctx = NewMapTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, goscriptParserRULE_mapTypeNameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Match(goscriptParserMAP)
	}
	{
		p.SetState(439)
		p.Match(goscriptParserT__3)
	}
	{
		p.SetState(440)
		p.BasicTypeName()
	}
	{
		p.SetState(441)
		p.Match(goscriptParserT__4)
	}
	{
		p.SetState(442)
		p.Typenameindef()
	}

	return localctx
}

// IFunctionTypeNameindefContext is an interface to support dynamic dispatch.
type IFunctionTypeNameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameindefContext differentiates from other interfaces.
	IsFunctionTypeNameindefContext()
}

type FunctionTypeNameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameindefContext() *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef
	return p
}

func (*FunctionTypeNameindefContext) IsFunctionTypeNameindefContext() {}

func NewFunctionTypeNameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameindefContext {
	var p = new(FunctionTypeNameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_functionTypeNameindef

	return p
}

func (s *FunctionTypeNameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameindefContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(goscriptParserFUNCTION, 0)
}

func (s *FunctionTypeNameindefContext) AllIntypenameindef() []IIntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem())
	var tst = make([]IIntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Intypenameindef(i int) IIntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) AllReturntypenameindef() []IReturntypenameindefContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem())
	var tst = make([]IReturntypenameindefContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReturntypenameindefContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameindefContext) Returntypenameindef(i int) IReturntypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturntypenameindefContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReturntypenameindefContext)
}

func (s *FunctionTypeNameindefContext) TAILARRAY() antlr.TerminalNode {
	return s.GetToken(goscriptParserTAILARRAY, 0)
}

func (s *FunctionTypeNameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionTypeNameindef(s)
	}
}

func (s *FunctionTypeNameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionTypeNameindef(s)
	}
}

func (p *goscriptParser) FunctionTypeNameindef() (localctx IFunctionTypeNameindefContext) {
	localctx = NewFunctionTypeNameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, goscriptParserRULE_functionTypeNameindef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(444)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(445)
			p.Match(goscriptParserT__0)
		}
		p.SetState(457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(446)
				p.Intypenameindef()
			}
			p.SetState(451)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(447)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(448)
					p.Intypenameindef()
				}

				p.SetState(453)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(455)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(454)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(459)
			p.Match(goscriptParserT__2)
		}
		p.SetState(461)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(460)
				p.Returntypenameindef()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(463)
			p.Match(goscriptParserFUNCTION)
		}
		{
			p.SetState(464)
			p.Match(goscriptParserT__0)
		}
		p.SetState(476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(465)
				p.Intypenameindef()
			}
			p.SetState(470)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(466)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(467)
					p.Intypenameindef()
				}

				p.SetState(472)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(474)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == goscriptParserTAILARRAY {
				{
					p.SetState(473)
					p.Match(goscriptParserTAILARRAY)
				}

			}

		}
		{
			p.SetState(478)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(479)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(480)
			p.Returntypenameindef()
		}
		p.SetState(485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(481)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(482)
				p.Returntypenameindef()
			}

			p.SetState(487)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(488)
			p.Match(goscriptParserT__2)
		}

	}

	return localctx
}

// IIntypenameindefContext is an interface to support dynamic dispatch.
type IIntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntypenameindefContext differentiates from other interfaces.
	IsIntypenameindefContext()
}

type IntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntypenameindefContext() *IntypenameindefContext {
	var p = new(IntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_intypenameindef
	return p
}

func (*IntypenameindefContext) IsIntypenameindefContext() {}

func NewIntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntypenameindefContext {
	var p = new(IntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_intypenameindef

	return p
}

func (s *IntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *IntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *IntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIntypenameindef(s)
	}
}

func (s *IntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIntypenameindef(s)
	}
}

func (p *goscriptParser) Intypenameindef() (localctx IIntypenameindefContext) {
	localctx = NewIntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, goscriptParserRULE_intypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(492)
		p.Typenameindef()
	}

	return localctx
}

// IReturntypenameindefContext is an interface to support dynamic dispatch.
type IReturntypenameindefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturntypenameindefContext differentiates from other interfaces.
	IsReturntypenameindefContext()
}

type ReturntypenameindefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturntypenameindefContext() *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_returntypenameindef
	return p
}

func (*ReturntypenameindefContext) IsReturntypenameindefContext() {}

func NewReturntypenameindefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturntypenameindefContext {
	var p = new(ReturntypenameindefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_returntypenameindef

	return p
}

func (s *ReturntypenameindefContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturntypenameindefContext) Typenameindef() ITypenameindefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameindefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameindefContext)
}

func (s *ReturntypenameindefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturntypenameindefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturntypenameindefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturntypenameindef(s)
	}
}

func (s *ReturntypenameindefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturntypenameindef(s)
	}
}

func (p *goscriptParser) Returntypenameindef() (localctx IReturntypenameindefContext) {
	localctx = NewReturntypenameindefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, goscriptParserRULE_returntypenameindef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(494)
		p.Typenameindef()
	}

	return localctx
}

// IExecutionContext is an interface to support dynamic dispatch.
type IExecutionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecutionContext differentiates from other interfaces.
	IsExecutionContext()
}

type ExecutionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecutionContext() *ExecutionContext {
	var p = new(ExecutionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_execution
	return p
}

func (*ExecutionContext) IsExecutionContext() {}

func NewExecutionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecutionContext {
	var p = new(ExecutionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_execution

	return p
}

func (s *ExecutionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecutionContext) CopyFrom(ctx *ExecutionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExecutionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecutionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LineProgramContext struct {
	*ExecutionContext
}

func NewLineProgramContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LineProgramContext {
	var p = new(LineProgramContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *LineProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineProgramContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *LineProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLineProgram(s)
	}
}

func (s *LineProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLineProgram(s)
	}
}

type CtrlContext struct {
	*ExecutionContext
}

func NewCtrlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CtrlContext {
	var p = new(CtrlContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *CtrlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtrlContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *CtrlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCtrl(s)
	}
}

func (s *CtrlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCtrl(s)
	}
}

type FunctionDefineContext struct {
	*ExecutionContext
}

func NewFunctionDefineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionDefineContext {
	var p = new(FunctionDefineContext)

	p.ExecutionContext = NewEmptyExecutionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExecutionContext))

	return p
}

func (s *FunctionDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefineContext) Functiondef() IFunctiondefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctiondefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctiondefContext)
}

func (s *FunctionDefineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionDefine(s)
	}
}

func (s *FunctionDefineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionDefine(s)
	}
}

func (p *goscriptParser) Execution() (localctx IExecutionContext) {
	localctx = NewExecutionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, goscriptParserRULE_execution)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(501)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCtrlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(496)
			p.Control()
		}

	case 2:
		localctx = NewLineProgramContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(497)
			p.Line()
		}
		{
			p.SetState(498)
			p.Match(goscriptParserT__9)
		}

	case 3:
		localctx = NewFunctionDefineContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(500)
			p.Functiondef()
		}

	}

	return localctx
}

// IControlContext is an interface to support dynamic dispatch.
type IControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlContext differentiates from other interfaces.
	IsControlContext()
}

type ControlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlContext() *ControlContext {
	var p = new(ControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_control
	return p
}

func (*ControlContext) IsControlContext() {}

func NewControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlContext {
	var p = new(ControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_control

	return p
}

func (s *ControlContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlContext) CopyFrom(ctx *ControlContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReturnVoidContext struct {
	*ControlContext
}

func NewReturnVoidContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnVoidContext {
	var p = new(ReturnVoidContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnVoidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnVoidContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnVoidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVoid(s)
	}
}

func (s *ReturnVoidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVoid(s)
	}
}

type ForInSliceContext struct {
	*ControlContext
}

func NewForInSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInSliceContext {
	var p = new(ForInSliceContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInSliceContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInSliceContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ForInSliceContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForInSliceContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInSlice(s)
	}
}

func (s *ForInSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInSlice(s)
	}
}

type SwitchContext struct {
	*ControlContext
}

func NewSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SwitchContext {
	var p = new(SwitchContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *SwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(goscriptParserSWITCH, 0)
}

func (s *SwitchContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SwitchContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(goscriptParserCASE)
}

func (s *SwitchContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(goscriptParserCASE, i)
}

func (s *SwitchContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *SwitchContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *SwitchContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *SwitchContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSwitch(s)
	}
}

func (s *SwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSwitch(s)
	}
}

type ReturnValContext struct {
	*ControlContext
}

func NewReturnValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReturnValContext {
	var p = new(ReturnValContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ReturnValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnValContext) RETURN() antlr.TerminalNode {
	return s.GetToken(goscriptParserRETURN, 0)
}

func (s *ReturnValContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ReturnValContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterReturnVal(s)
	}
}

func (s *ReturnValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitReturnVal(s)
	}
}

type ForInMapContext struct {
	*ControlContext
}

func NewForInMapContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInMapContext {
	var p = new(ForInMapContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForInMapContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInMapContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForInMapContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *ForInMapContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ForInMapContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForInMapContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForInMapContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterForInMap(s)
	}
}

func (s *ForInMapContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitForInMap(s)
	}
}

type ForContext struct {
	*ControlContext
}

func NewForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForContext {
	var p = new(ForContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForContext) FOR() antlr.TerminalNode {
	return s.GetToken(goscriptParserFOR, 0)
}

func (s *ForContext) Line() ILineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineContext)
}

func (s *ForContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *ForContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFor(s)
	}
}

func (s *ForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFor(s)
	}
}

type BreakContext struct {
	*ControlContext
}

func NewBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BreakContext {
	var p = new(BreakContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *BreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(goscriptParserBREAK, 0)
}

func (s *BreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBreak(s)
	}
}

func (s *BreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBreak(s)
	}
}

type ContinueContext struct {
	*ControlContext
}

func NewContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ContinueContext {
	var p = new(ContinueContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *ContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONTINUE, 0)
}

func (s *ContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterContinue(s)
	}
}

func (s *ContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitContinue(s)
	}
}

type IfContext struct {
	*ControlContext
}

func NewIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfContext {
	var p = new(IfContext)

	p.ControlContext = NewEmptyControlContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ControlContext))

	return p
}

func (s *IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfContext) IF() antlr.TerminalNode {
	return s.GetToken(goscriptParserIF, 0)
}

func (s *IfContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *IfContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfContext) ELSE() antlr.TerminalNode {
	return s.GetToken(goscriptParserELSE, 0)
}

func (s *IfContext) Control() IControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlContext)
}

func (s *IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIf(s)
	}
}

func (s *IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIf(s)
	}
}

func (p *goscriptParser) Control() (localctx IControlContext) {
	localctx = NewControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, goscriptParserRULE_control)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(503)
			p.Match(goscriptParserIF)
		}
		{
			p.SetState(504)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(505)
			p.expr(0)
		}
		{
			p.SetState(506)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(507)
			p.Block()
		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(508)
				p.Match(goscriptParserELSE)
			}
			p.SetState(511)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case goscriptParserT__6:
				{
					p.SetState(509)
					p.Block()
				}

			case goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserSWITCH, goscriptParserRETURN:
				{
					p.SetState(510)
					p.Control()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	case 2:
		localctx = NewSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(515)
			p.Match(goscriptParserSWITCH)
		}
		{
			p.SetState(516)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(517)
			p.expr(0)
		}
		{
			p.SetState(518)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(519)
			p.Match(goscriptParserT__6)
		}
		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserCASE {
			{
				p.SetState(520)
				p.Match(goscriptParserCASE)
			}
			{
				p.SetState(521)
				p.Constant()
			}
			{
				p.SetState(522)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(523)
				p.Block()
			}

			p.SetState(527)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(529)
			p.Match(goscriptParserT__7)
		}

	case 3:
		localctx = NewForInSliceContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(531)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(532)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(533)
			p.Name()
		}
		{
			p.SetState(534)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(535)
			p.expr(0)
		}
		{
			p.SetState(536)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(537)
			p.Block()
		}

	case 4:
		localctx = NewForInMapContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(539)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(540)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(541)
			p.Name()
		}
		{
			p.SetState(542)
			p.Match(goscriptParserT__1)
		}
		{
			p.SetState(543)
			p.Name()
		}
		{
			p.SetState(544)
			p.Match(goscriptParserT__10)
		}
		{
			p.SetState(545)
			p.expr(0)
		}
		{
			p.SetState(546)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(547)
			p.Block()
		}

	case 5:
		localctx = NewForContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(549)
			p.Match(goscriptParserFOR)
		}
		{
			p.SetState(550)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(551)
			p.Line()
		}
		{
			p.SetState(552)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(553)
			p.expr(0)
		}
		{
			p.SetState(554)
			p.Match(goscriptParserT__9)
		}
		{
			p.SetState(555)
			p.RestoreStack()
		}
		{
			p.SetState(556)
			p.Match(goscriptParserT__2)
		}
		{
			p.SetState(557)
			p.Block()
		}

	case 6:
		localctx = NewBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(559)
			p.Match(goscriptParserBREAK)
		}
		{
			p.SetState(560)
			p.Match(goscriptParserT__9)
		}

	case 7:
		localctx = NewContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(561)
			p.Match(goscriptParserCONTINUE)
		}
		{
			p.SetState(562)
			p.Match(goscriptParserT__9)
		}

	case 8:
		localctx = NewReturnVoidContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(563)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(564)
			p.Match(goscriptParserT__9)
		}

	case 9:
		localctx = NewReturnValContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(565)
			p.Match(goscriptParserRETURN)
		}
		{
			p.SetState(566)
			p.expr(0)
		}
		p.SetState(571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(567)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(568)
				p.expr(0)
			}

			p.SetState(573)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(574)
			p.Match(goscriptParserT__9)
		}

	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllExecution() []IExecutionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecutionContext)(nil)).Elem())
	var tst = make([]IExecutionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecutionContext)
		}
	}

	return tst
}

func (s *BlockContext) Execution(i int) IExecutionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecutionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecutionContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *goscriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, goscriptParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(578)
		p.Match(goscriptParserT__6)
	}
	p.SetState(582)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
		{
			p.SetState(579)
			p.Execution()
		}

		p.SetState(584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(585)
		p.Match(goscriptParserT__7)
	}

	return localctx
}

// ILineContext is an interface to support dynamic dispatch.
type ILineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineContext differentiates from other interfaces.
	IsLineContext()
}

type LineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineContext() *LineContext {
	var p = new(LineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_line
	return p
}

func (*LineContext) IsLineContext() {}

func NewLineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineContext {
	var p = new(LineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_line

	return p
}

func (s *LineContext) GetParser() antlr.Parser { return s.parser }

func (s *LineContext) CopyFrom(ctx *LineContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SymbolDefineContext struct {
	*LineContext
}

func NewSymbolDefineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SymbolDefineContext {
	var p = new(SymbolDefineContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *SymbolDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolDefineContext) SymbolDef() ISymbolDefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISymbolDefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISymbolDefContext)
}

func (s *SymbolDefineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSymbolDefine(s)
	}
}

func (s *SymbolDefineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSymbolDefine(s)
	}
}

type RestoreStackSpContext struct {
	*LineContext
}

func NewRestoreStackSpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RestoreStackSpContext {
	var p = new(RestoreStackSpContext)

	p.LineContext = NewEmptyLineContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LineContext))

	return p
}

func (s *RestoreStackSpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackSpContext) RestoreStack() IRestoreStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestoreStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestoreStackContext)
}

func (s *RestoreStackSpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStackSp(s)
	}
}

func (s *RestoreStackSpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStackSp(s)
	}
}

func (p *goscriptParser) Line() (localctx ILineContext) {
	localctx = NewLineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, goscriptParserRULE_line)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRestoreStackSpContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(587)
			p.RestoreStack()
		}

	case 2:
		localctx = NewSymbolDefineContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(588)
			p.SymbolDef()
		}

	}

	return localctx
}

// IRestoreStackContext is an interface to support dynamic dispatch.
type IRestoreStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestoreStackContext differentiates from other interfaces.
	IsRestoreStackContext()
}

type RestoreStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestoreStackContext() *RestoreStackContext {
	var p = new(RestoreStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_restoreStack
	return p
}

func (*RestoreStackContext) IsRestoreStackContext() {}

func NewRestoreStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestoreStackContext {
	var p = new(RestoreStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_restoreStack

	return p
}

func (s *RestoreStackContext) GetParser() antlr.Parser { return s.parser }

func (s *RestoreStackContext) KeepStack() IKeepStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeepStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeepStackContext)
}

func (s *RestoreStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestoreStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestoreStackContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRestoreStack(s)
	}
}

func (s *RestoreStackContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRestoreStack(s)
	}
}

func (p *goscriptParser) RestoreStack() (localctx IRestoreStackContext) {
	localctx = NewRestoreStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, goscriptParserRULE_restoreStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(591)
		p.KeepStack()
	}

	return localctx
}

// IKeepStackContext is an interface to support dynamic dispatch.
type IKeepStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeepStackContext differentiates from other interfaces.
	IsKeepStackContext()
}

type KeepStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeepStackContext() *KeepStackContext {
	var p = new(KeepStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_keepStack
	return p
}

func (*KeepStackContext) IsKeepStackContext() {}

func NewKeepStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeepStackContext {
	var p = new(KeepStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_keepStack

	return p
}

func (s *KeepStackContext) GetParser() antlr.Parser { return s.parser }

func (s *KeepStackContext) CopyFrom(ctx *KeepStackContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *KeepStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeepStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignContext {
	var p = new(AssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *AssignContext) GetOp() antlr.Token { return s.op }

func (s *AssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *AssignContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *AssignContext) ADDEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserADDEQUAL, 0)
}

func (s *AssignContext) SUBEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUBEQUAL, 0)
}

func (s *AssignContext) MULEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMULEQUAL, 0)
}

func (s *AssignContext) DIVEQUAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIVEQUAL, 0)
}

func (s *AssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterAssign(s)
	}
}

func (s *AssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitAssign(s)
	}
}

type ExprEntryContext struct {
	*KeepStackContext
}

func NewExprEntryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprEntryContext {
	var p = new(ExprEntryContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *ExprEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprEntryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterExprEntry(s)
	}
}

func (s *ExprEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitExprEntry(s)
	}
}

type FunctionAssignContext struct {
	*KeepStackContext
	op antlr.Token
}

func NewFunctionAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionAssignContext {
	var p = new(FunctionAssignContext)

	p.KeepStackContext = NewEmptyKeepStackContext()
	p.parser = parser
	p.CopyFrom(ctx.(*KeepStackContext))

	return p
}

func (s *FunctionAssignContext) GetOp() antlr.Token { return s.op }

func (s *FunctionAssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *FunctionAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionAssignContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *FunctionAssignContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FunctionAssignContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *FunctionAssignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterFunctionAssign(s)
	}
}

func (s *FunctionAssignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitFunctionAssign(s)
	}
}

func (p *goscriptParser) KeepStack() (localctx IKeepStackContext) {
	localctx = NewKeepStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, goscriptParserRULE_keepStack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(608)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprEntryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(593)
			p.expr(0)
		}

	case 2:
		localctx = NewFunctionAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(594)
			p.expr(0)
		}
		p.SetState(597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == goscriptParserT__1 {
			{
				p.SetState(595)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(596)
				p.expr(0)
			}

			p.SetState(599)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(601)

			var _m = p.Match(goscriptParserASSIGN)

			localctx.(*FunctionAssignContext).op = _m
		}
		{
			p.SetState(602)
			p.expr(0)
		}

	case 3:
		localctx = NewAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(604)
			p.expr(0)
		}
		{
			p.SetState(605)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AssignContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(goscriptParserASSIGN-68))|(1<<(goscriptParserADDEQUAL-68))|(1<<(goscriptParserSUBEQUAL-68))|(1<<(goscriptParserMULEQUAL-68))|(1<<(goscriptParserDIVEQUAL-68)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AssignContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(606)
			p.expr(0)
		}

	}

	return localctx
}

// ISymbolContext is an interface to support dynamic dispatch.
type ISymbolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSymbolContext differentiates from other interfaces.
	IsSymbolContext()
}

type SymbolContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySymbolContext() *SymbolContext {
	var p = new(SymbolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_symbol
	return p
}

func (*SymbolContext) IsSymbolContext() {}

func NewSymbolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolContext {
	var p = new(SymbolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_symbol

	return p
}

func (s *SymbolContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSymbol(s)
	}
}

func (s *SymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSymbol(s)
	}
}

func (p *goscriptParser) Symbol() (localctx ISymbolContext) {
	localctx = NewSymbolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, goscriptParserRULE_symbol)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(612)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserTYPEDEF, goscriptParserMESSAGE, goscriptParserENUM, goscriptParserMAP, goscriptParserONEOF, goscriptParserFOR, goscriptParserBREAK, goscriptParserCONTINUE, goscriptParserIF, goscriptParserELSE, goscriptParserSWITCH, goscriptParserCASE, goscriptParserRETURN, goscriptParserVAR, goscriptParserLOCAL, goscriptParserCONST, goscriptParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(610)
			p.Name()
		}

	case goscriptParserT__11:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(611)
			p.Match(goscriptParserT__11)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexsContext is an interface to support dynamic dispatch.
type IIndexsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexsContext differentiates from other interfaces.
	IsIndexsContext()
}

type IndexsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexsContext() *IndexsContext {
	var p = new(IndexsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_indexs
	return p
}

func (*IndexsContext) IsIndexsContext() {}

func NewIndexsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexsContext {
	var p = new(IndexsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_indexs

	return p
}

func (s *IndexsContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexsContext) CopyFrom(ctx *IndexsContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IndexType1Context struct {
	*IndexsContext
}

func NewIndexType1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType1Context {
	var p = new(IndexType1Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType1Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType1Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType1(s)
	}
}

func (s *IndexType1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType1(s)
	}
}

type IndexType3Context struct {
	*IndexsContext
}

func NewIndexType3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType3Context {
	var p = new(IndexType3Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType3Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType3(s)
	}
}

func (s *IndexType3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType3(s)
	}
}

type IndexType2Context struct {
	*IndexsContext
}

func NewIndexType2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType2Context {
	var p = new(IndexType2Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType2Context) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexType2Context) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType2(s)
	}
}

func (s *IndexType2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType2(s)
	}
}

type IndexType5Context struct {
	*IndexsContext
}

func NewIndexType5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType5Context {
	var p = new(IndexType5Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType5Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType5(s)
	}
}

func (s *IndexType5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType5(s)
	}
}

type IndexType4Context struct {
	*IndexsContext
}

func NewIndexType4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexType4Context {
	var p = new(IndexType4Context)

	p.IndexsContext = NewEmptyIndexsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexsContext))

	return p
}

func (s *IndexType4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexType4Context) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexType4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndexType4(s)
	}
}

func (s *IndexType4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndexType4(s)
	}
}

func (p *goscriptParser) Indexs() (localctx IIndexsContext) {
	localctx = NewIndexsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, goscriptParserRULE_indexs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIndexType1Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(614)
			p.expr(0)
		}
		{
			p.SetState(615)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(616)
			p.expr(0)
		}
		{
			p.SetState(617)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(618)
			p.expr(0)
		}

	case 2:
		localctx = NewIndexType2Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(620)
			p.expr(0)
		}
		{
			p.SetState(621)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(622)
			p.expr(0)
		}

	case 3:
		localctx = NewIndexType3Context(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(624)
			p.expr(0)
		}
		{
			p.SetState(625)
			p.Match(goscriptParserT__8)
		}

	case 4:
		localctx = NewIndexType4Context(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(627)
			p.expr(0)
		}

	case 5:
		localctx = NewIndexType5Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(628)
			p.Match(goscriptParserT__8)
		}
		{
			p.SetState(629)
			p.expr(0)
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyFrom(ctx *ExprContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeConvertContext struct {
	*ExprContext
}

func NewTypeConvertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeConvertContext {
	var p = new(TypeConvertContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *TypeConvertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConvertContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *TypeConvertContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TypeConvertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeConvert(s)
	}
}

func (s *TypeConvertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeConvert(s)
	}
}

type RecvContext struct {
	*ExprContext
}

func NewRecvContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RecvContext {
	var p = new(RecvContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RecvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecvContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *RecvContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *RecvContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *RecvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRecv(s)
	}
}

func (s *RecvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRecv(s)
	}
}

type SliceFilterContext struct {
	*ExprContext
}

func NewSliceFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceFilterContext {
	var p = new(SliceFilterContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SliceFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFilterContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *SliceFilterContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SliceFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceFilter(s)
	}
}

func (s *SliceFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceFilter(s)
	}
}

type CallContext struct {
	*ExprContext
}

func NewCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CallContext {
	var p = new(CallContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *CallContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterCall(s)
	}
}

func (s *CallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitCall(s)
	}
}

type InitKVContext struct {
	*ExprContext
}

func NewInitKVContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitKVContext {
	var p = new(InitKVContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *InitKVContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitKVContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *InitKVContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *InitKVContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InitKVContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitKV(s)
	}
}

func (s *InitKVContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitKV(s)
	}
}

type IndexContext struct {
	*ExprContext
}

func NewIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexContext {
	var p = new(IndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitIndex(s)
	}
}

type InitSliceContext struct {
	*ExprContext
}

func NewInitSliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InitSliceContext {
	var p = new(InitSliceContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *InitSliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitSliceContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *InitSliceContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *InitSliceContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InitSliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterInitSlice(s)
	}
}

func (s *InitSliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitInitSlice(s)
	}
}

type MapMultiIndexContext struct {
	*ExprContext
}

func NewMapMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MapMultiIndexContext {
	var p = new(MapMultiIndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *MapMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapMultiIndexContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *MapMultiIndexContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *MapMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterMapMultiIndex(s)
	}
}

func (s *MapMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitMapMultiIndex(s)
	}
}

type SendContext struct {
	*ExprContext
}

func NewSendContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SendContext {
	var p = new(SendContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SendContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *SendContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SendContext) CHANOP() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOP, 0)
}

func (s *SendContext) CHANOPNONBLOCK() antlr.TerminalNode {
	return s.GetToken(goscriptParserCHANOPNONBLOCK, 0)
}

func (s *SendContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSend(s)
	}
}

func (s *SendContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSend(s)
	}
}

type PassContext struct {
	*ExprContext
}

func NewPassContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PassContext {
	var p = new(PassContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *PassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PassContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PassContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PassContext) Symbol() ISymbolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISymbolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISymbolContext)
}

func (s *PassContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *PassContext) Constructor() IConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorContext)
}

func (s *PassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterPass(s)
	}
}

func (s *PassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitPass(s)
	}
}

type SelectContext struct {
	*ExprContext
}

func NewSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectContext {
	var p = new(SelectContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SelectContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *SelectContext) Fieldname() IFieldnameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldnameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldnameContext)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSelect(s)
	}
}

type BinaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryContext {
	var p = new(BinaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *BinaryContext) GetOp() antlr.Token { return s.op }

func (s *BinaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *BinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *BinaryContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BinaryContext) POW() antlr.TerminalNode {
	return s.GetToken(goscriptParserPOW, 0)
}

func (s *BinaryContext) MUL() antlr.TerminalNode {
	return s.GetToken(goscriptParserMUL, 0)
}

func (s *BinaryContext) DIV() antlr.TerminalNode {
	return s.GetToken(goscriptParserDIV, 0)
}

func (s *BinaryContext) MOD() antlr.TerminalNode {
	return s.GetToken(goscriptParserMOD, 0)
}

func (s *BinaryContext) ADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserADD, 0)
}

func (s *BinaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *BinaryContext) EQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserEQ, 0)
}

func (s *BinaryContext) INEQ() antlr.TerminalNode {
	return s.GetToken(goscriptParserINEQ, 0)
}

func (s *BinaryContext) GT() antlr.TerminalNode {
	return s.GetToken(goscriptParserGT, 0)
}

func (s *BinaryContext) GE() antlr.TerminalNode {
	return s.GetToken(goscriptParserGE, 0)
}

func (s *BinaryContext) LT() antlr.TerminalNode {
	return s.GetToken(goscriptParserLT, 0)
}

func (s *BinaryContext) LE() antlr.TerminalNode {
	return s.GetToken(goscriptParserLE, 0)
}

func (s *BinaryContext) REGEX() antlr.TerminalNode {
	return s.GetToken(goscriptParserREGEX, 0)
}

func (s *BinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(goscriptParserAND, 0)
}

func (s *BinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(goscriptParserOR, 0)
}

func (s *BinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBinary(s)
	}
}

func (s *BinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBinary(s)
	}
}

type LeftUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewLeftUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LeftUnaryContext {
	var p = new(LeftUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *LeftUnaryContext) GetOp() antlr.Token { return s.op }

func (s *LeftUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *LeftUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LeftUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *LeftUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *LeftUnaryContext) NOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserNOT, 0)
}

func (s *LeftUnaryContext) SUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserSUB, 0)
}

func (s *LeftUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterLeftUnary(s)
	}
}

func (s *LeftUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitLeftUnary(s)
	}
}

type TypeAssertContext struct {
	*ExprContext
}

func NewTypeAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeAssertContext {
	var p = new(TypeAssertContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *TypeAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAssertContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TypeAssertContext) DOT() antlr.TerminalNode {
	return s.GetToken(goscriptParserDOT, 0)
}

func (s *TypeAssertContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *TypeAssertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterTypeAssert(s)
	}
}

func (s *TypeAssertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitTypeAssert(s)
	}
}

type SliceMultiIndexContext struct {
	*ExprContext
}

func NewSliceMultiIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SliceMultiIndexContext {
	var p = new(SliceMultiIndexContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *SliceMultiIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceMultiIndexContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SliceMultiIndexContext) AllIndexs() []IIndexsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexsContext)(nil)).Elem())
	var tst = make([]IIndexsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexsContext)
		}
	}

	return tst
}

func (s *SliceMultiIndexContext) Indexs(i int) IIndexsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexsContext)
}

func (s *SliceMultiIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSliceMultiIndex(s)
	}
}

func (s *SliceMultiIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSliceMultiIndex(s)
	}
}

type RightUnaryContext struct {
	*ExprContext
	op antlr.Token
}

func NewRightUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RightUnaryContext {
	var p = new(RightUnaryContext)

	p.ExprContext = NewEmptyExprContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExprContext))

	return p
}

func (s *RightUnaryContext) GetOp() antlr.Token { return s.op }

func (s *RightUnaryContext) SetOp(v antlr.Token) { s.op = v }

func (s *RightUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RightUnaryContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *RightUnaryContext) UNARYADD() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYADD, 0)
}

func (s *RightUnaryContext) UNARYSUB() antlr.TerminalNode {
	return s.GetToken(goscriptParserUNARYSUB, 0)
}

func (s *RightUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterRightUnary(s)
	}
}

func (s *RightUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitRightUnary(s)
	}
}

func (p *goscriptParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *goscriptParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, goscriptParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(633)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(634)
			p.expr(0)
		}
		{
			p.SetState(635)
			p.Match(goscriptParserT__2)
		}

	case 2:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(637)
			p.Constant()
		}

	case 3:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(638)
			p.Symbol()
		}

	case 4:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(639)
			p.Lambda()
		}

	case 5:
		localctx = NewPassContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(640)
			p.Constructor()
		}

	case 6:
		localctx = NewInitSliceContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(641)
				p.Typename()
			}

		}
		{
			p.SetState(644)
			p.Match(goscriptParserT__6)
		}
		p.SetState(653)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
			{
				p.SetState(645)
				p.expr(0)
			}
			p.SetState(650)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(646)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(647)
					p.expr(0)
				}

				p.SetState(652)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(655)
			p.Match(goscriptParserT__7)
		}

	case 7:
		localctx = NewInitKVContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__5)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32)))) != 0) || _la == goscriptParserNAME {
			{
				p.SetState(656)
				p.Typename()
			}

		}
		{
			p.SetState(659)
			p.Match(goscriptParserT__6)
		}
		p.SetState(673)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
			{
				p.SetState(660)
				p.expr(0)
			}
			{
				p.SetState(661)
				p.Match(goscriptParserT__8)
			}
			{
				p.SetState(662)
				p.expr(0)
			}
			p.SetState(670)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == goscriptParserT__1 {
				{
					p.SetState(663)
					p.Match(goscriptParserT__1)
				}
				{
					p.SetState(664)
					p.expr(0)
				}
				{
					p.SetState(665)
					p.Match(goscriptParserT__8)
				}
				{
					p.SetState(666)
					p.expr(0)
				}

				p.SetState(672)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(675)
			p.Match(goscriptParserT__7)
		}

	case 8:
		localctx = NewTypeConvertContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(676)
			p.Typename()
		}
		{
			p.SetState(677)
			p.Match(goscriptParserT__0)
		}
		{
			p.SetState(678)
			p.expr(0)
		}
		{
			p.SetState(679)
			p.Match(goscriptParserT__2)
		}

	case 9:
		localctx = NewLeftUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(681)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LeftUnaryContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(goscriptParserSUB-52))|(1<<(goscriptParserUNARYADD-52))|(1<<(goscriptParserUNARYSUB-52))|(1<<(goscriptParserNOT-52)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LeftUnaryContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(682)
			p.expr(10)
		}

	case 10:
		localctx = NewRecvContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(683)
			_la = p.GetTokenStream().LA(1)

			if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(684)
			p.expr(1)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(769)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(687)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(688)

					var _m = p.Match(goscriptParserPOW)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(689)
					p.expr(8)
				}

			case 2:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(690)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(691)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(goscriptParserMUL-48))|(1<<(goscriptParserDIV-48))|(1<<(goscriptParserMOD-48)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(692)
					p.expr(8)
				}

			case 3:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(693)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(694)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserADD || _la == goscriptParserSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(695)
					p.expr(7)
				}

			case 4:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(696)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(697)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*BinaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(goscriptParserEQ-55))|(1<<(goscriptParserINEQ-55))|(1<<(goscriptParserGT-55))|(1<<(goscriptParserGE-55))|(1<<(goscriptParserLE-55))|(1<<(goscriptParserLT-55))|(1<<(goscriptParserREGEX-55)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*BinaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(698)
					p.expr(6)
				}

			case 5:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(699)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(700)

					var _m = p.Match(goscriptParserAND)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(701)
					p.expr(5)
				}

			case 6:
				localctx = NewBinaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(702)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(703)

					var _m = p.Match(goscriptParserOR)

					localctx.(*BinaryContext).op = _m
				}
				{
					p.SetState(704)
					p.expr(4)
				}

			case 7:
				localctx = NewSendContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(705)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(706)
					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserCHANOP || _la == goscriptParserCHANOPNONBLOCK) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(707)
					p.expr(3)
				}

			case 8:
				localctx = NewSelectContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(708)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(709)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(710)
					p.Fieldname()
				}

			case 9:
				localctx = NewTypeAssertContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(711)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(712)
					p.Match(goscriptParserDOT)
				}
				{
					p.SetState(713)
					p.Match(goscriptParserT__0)
				}
				{
					p.SetState(714)
					p.Typename()
				}
				{
					p.SetState(715)
					p.Match(goscriptParserT__2)
				}

			case 10:
				localctx = NewSliceFilterContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(717)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(718)
					p.Match(goscriptParserT__12)
				}
				{
					p.SetState(719)
					p.expr(0)
				}
				{
					p.SetState(720)
					p.Match(goscriptParserT__13)
				}

			case 11:
				localctx = NewIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(722)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(723)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(724)
					p.expr(0)
				}
				{
					p.SetState(725)
					p.Match(goscriptParserT__4)
				}

			case 12:
				localctx = NewSliceMultiIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(727)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(728)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(729)
					p.Indexs()
				}
				p.SetState(734)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == goscriptParserT__1 {
					{
						p.SetState(730)
						p.Match(goscriptParserT__1)
					}
					{
						p.SetState(731)
						p.Indexs()
					}

					p.SetState(736)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(737)
					p.Match(goscriptParserT__4)
				}

			case 13:
				localctx = NewMapMultiIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(739)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(740)
					p.Match(goscriptParserT__3)
				}
				{
					p.SetState(741)
					p.Match(goscriptParserT__3)
				}
				p.SetState(750)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
					{
						p.SetState(742)
						p.expr(0)
					}
					p.SetState(747)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == goscriptParserT__1 {
						{
							p.SetState(743)
							p.Match(goscriptParserT__1)
						}
						{
							p.SetState(744)
							p.expr(0)
						}

						p.SetState(749)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(752)
					p.Match(goscriptParserT__4)
				}
				{
					p.SetState(753)
					p.Match(goscriptParserT__4)
				}

			case 14:
				localctx = NewCallContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(754)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(755)
					p.Match(goscriptParserT__0)
				}
				p.SetState(764)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
					{
						p.SetState(756)
						p.expr(0)
					}
					p.SetState(761)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == goscriptParserT__1 {
						{
							p.SetState(757)
							p.Match(goscriptParserT__1)
						}
						{
							p.SetState(758)
							p.expr(0)
						}

						p.SetState(763)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(766)
					p.Match(goscriptParserT__2)
				}

			case 15:
				localctx = NewRightUnaryContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, goscriptParserRULE_expr)
				p.SetState(767)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(768)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*RightUnaryContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == goscriptParserUNARYADD || _la == goscriptParserUNARYSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*RightUnaryContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		}
		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeNameContext is an interface to support dynamic dispatch.
type IBasicTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeNameContext differentiates from other interfaces.
	IsBasicTypeNameContext()
}

type BasicTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeNameContext() *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_basicTypeName
	return p
}

func (*BasicTypeNameContext) IsBasicTypeNameContext() {}

func NewBasicTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeNameContext {
	var p = new(BasicTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_basicTypeName

	return p
}

func (s *BasicTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeNameContext) UINT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT32, 0)
}

func (s *BasicTypeNameContext) UINT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT64, 0)
}

func (s *BasicTypeNameContext) INT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT32, 0)
}

func (s *BasicTypeNameContext) INT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT64, 0)
}

func (s *BasicTypeNameContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT32, 0)
}

func (s *BasicTypeNameContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT64, 0)
}

func (s *BasicTypeNameContext) STRING() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRING, 0)
}

func (s *BasicTypeNameContext) BYTES() antlr.TerminalNode {
	return s.GetToken(goscriptParserBYTES, 0)
}

func (s *BasicTypeNameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOL, 0)
}

func (s *BasicTypeNameContext) UINT8() antlr.TerminalNode {
	return s.GetToken(goscriptParserUINT8, 0)
}

func (s *BasicTypeNameContext) ANY() antlr.TerminalNode {
	return s.GetToken(goscriptParserANY, 0)
}

func (s *BasicTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterBasicTypeName(s)
	}
}

func (s *BasicTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitBasicTypeName(s)
	}
}

func (p *goscriptParser) BasicTypeName() (localctx IBasicTypeNameContext) {
	localctx = NewBasicTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, goscriptParserRULE_basicTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(774)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-21)&-(0x1f+1)) == 0 && ((1<<uint((_la-21)))&((1<<(goscriptParserUINT32-21))|(1<<(goscriptParserUINT64-21))|(1<<(goscriptParserINT32-21))|(1<<(goscriptParserINT64-21))|(1<<(goscriptParserFLOAT32-21))|(1<<(goscriptParserFLOAT64-21))|(1<<(goscriptParserSTRING-21))|(1<<(goscriptParserBYTES-21))|(1<<(goscriptParserBOOL-21))|(1<<(goscriptParserUINT8-21))|(1<<(goscriptParserANY-21)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) CopyFrom(ctx *ConstantContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConstantNilContext struct {
	*ConstantContext
}

func NewConstantNilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantNilContext {
	var p = new(ConstantNilContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantNilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantNilContext) NULL() antlr.TerminalNode {
	return s.GetToken(goscriptParserNULL, 0)
}

func (s *ConstantNilContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantNil(s)
	}
}

func (s *ConstantNilContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantNil(s)
	}
}

type ConstantIntContext struct {
	*ConstantContext
}

func NewConstantIntContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantIntContext {
	var p = new(ConstantIntContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantIntContext) INT() antlr.TerminalNode {
	return s.GetToken(goscriptParserINT, 0)
}

func (s *ConstantIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantInt(s)
	}
}

func (s *ConstantIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantInt(s)
	}
}

type ConstantStringContext struct {
	*ConstantContext
}

func NewConstantStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantStringContext {
	var p = new(ConstantStringContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantStringContext) STRINGLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserSTRINGLITERAL, 0)
}

func (s *ConstantStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantString(s)
	}
}

func (s *ConstantStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantString(s)
	}
}

type ConstantFloatContext struct {
	*ConstantContext
}

func NewConstantFloatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantFloatContext {
	var p = new(ConstantFloatContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantFloatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantFloatContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(goscriptParserFLOAT, 0)
}

func (s *ConstantFloatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantFloat(s)
	}
}

func (s *ConstantFloatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantFloat(s)
	}
}

type ConstantBoolContext struct {
	*ConstantContext
}

func NewConstantBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantBoolContext {
	var p = new(ConstantBoolContext)

	p.ConstantContext = NewEmptyConstantContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConstantContext))

	return p
}

func (s *ConstantBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantBoolContext) BOOLLITERAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserBOOLLITERAL, 0)
}

func (s *ConstantBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstantBool(s)
	}
}

func (s *ConstantBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstantBool(s)
	}
}

func (p *goscriptParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, goscriptParserRULE_constant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(781)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case goscriptParserINT:
		localctx = NewConstantIntContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(776)
			p.Match(goscriptParserINT)
		}

	case goscriptParserFLOAT:
		localctx = NewConstantFloatContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(777)
			p.Match(goscriptParserFLOAT)
		}

	case goscriptParserBOOLLITERAL:
		localctx = NewConstantBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(778)
			p.Match(goscriptParserBOOLLITERAL)
		}

	case goscriptParserNULL:
		localctx = NewConstantNilContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(779)
			p.Match(goscriptParserNULL)
		}

	case goscriptParserSTRINGLITERAL:
		localctx = NewConstantStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(780)
			p.Match(goscriptParserSTRINGLITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstructorContext is an interface to support dynamic dispatch.
type IConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorContext differentiates from other interfaces.
	IsConstructorContext()
}

type ConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorContext() *ConstructorContext {
	var p = new(ConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_constructor
	return p
}

func (*ConstructorContext) IsConstructorContext() {}

func NewConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorContext {
	var p = new(ConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_constructor

	return p
}

func (s *ConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorContext) NEW() antlr.TerminalNode {
	return s.GetToken(goscriptParserNEW, 0)
}

func (s *ConstructorContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *ConstructorContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ConstructorContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterConstructor(s)
	}
}

func (s *ConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitConstructor(s)
	}
}

func (p *goscriptParser) Constructor() (localctx IConstructorContext) {
	localctx = NewConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, goscriptParserRULE_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(783)
		p.Match(goscriptParserNEW)
	}
	{
		p.SetState(784)
		p.Typename()
	}
	{
		p.SetState(785)
		p.Match(goscriptParserT__0)
	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<goscriptParserT__0)|(1<<goscriptParserT__5)|(1<<goscriptParserT__6)|(1<<goscriptParserT__11)|(1<<goscriptParserTYPEDEF)|(1<<goscriptParserMESSAGE)|(1<<goscriptParserENUM)|(1<<goscriptParserMAP)|(1<<goscriptParserONEOF)|(1<<goscriptParserNEW)|(1<<goscriptParserUINT32)|(1<<goscriptParserUINT64)|(1<<goscriptParserINT32)|(1<<goscriptParserINT64)|(1<<goscriptParserFLOAT32)|(1<<goscriptParserFLOAT64)|(1<<goscriptParserSTRING)|(1<<goscriptParserBYTES)|(1<<goscriptParserBOOL)|(1<<goscriptParserUINT8)|(1<<goscriptParserCHAN))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(goscriptParserANY-32))|(1<<(goscriptParserFOR-32))|(1<<(goscriptParserBREAK-32))|(1<<(goscriptParserCONTINUE-32))|(1<<(goscriptParserIF-32))|(1<<(goscriptParserELSE-32))|(1<<(goscriptParserSWITCH-32))|(1<<(goscriptParserCASE-32))|(1<<(goscriptParserRETURN-32))|(1<<(goscriptParserVAR-32))|(1<<(goscriptParserLOCAL-32))|(1<<(goscriptParserCONST-32))|(1<<(goscriptParserFUNCTION-32))|(1<<(goscriptParserBOOLLITERAL-32))|(1<<(goscriptParserNULL-32))|(1<<(goscriptParserSUB-32))|(1<<(goscriptParserUNARYADD-32))|(1<<(goscriptParserUNARYSUB-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(goscriptParserNOT-65))|(1<<(goscriptParserCHANOP-65))|(1<<(goscriptParserCHANOPNONBLOCK-65))|(1<<(goscriptParserINT-65))|(1<<(goscriptParserFLOAT-65))|(1<<(goscriptParserSTRINGLITERAL-65))|(1<<(goscriptParserNAME-65)))) != 0) {
		{
			p.SetState(786)
			p.expr(0)
		}
		p.SetState(791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == goscriptParserT__1 {
			{
				p.SetState(787)
				p.Match(goscriptParserT__1)
			}
			{
				p.SetState(788)
				p.expr(0)
			}

			p.SetState(793)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(796)
		p.Match(goscriptParserT__2)
	}

	return localctx
}

// ISymbolDefContext is an interface to support dynamic dispatch.
type ISymbolDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSymbolDefContext differentiates from other interfaces.
	IsSymbolDefContext()
}

type SymbolDefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySymbolDefContext() *SymbolDefContext {
	var p = new(SymbolDefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = goscriptParserRULE_symbolDef
	return p
}

func (*SymbolDefContext) IsSymbolDefContext() {}

func NewSymbolDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolDefContext {
	var p = new(SymbolDefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = goscriptParserRULE_symbolDef

	return p
}

func (s *SymbolDefContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolDefContext) VAR() antlr.TerminalNode {
	return s.GetToken(goscriptParserVAR, 0)
}

func (s *SymbolDefContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *SymbolDefContext) Typename() ITypenameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypenameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypenameContext)
}

func (s *SymbolDefContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserASSIGN, 0)
}

func (s *SymbolDefContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SymbolDefContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCAL, 0)
}

func (s *SymbolDefContext) LOCALASSIGN() antlr.TerminalNode {
	return s.GetToken(goscriptParserLOCALASSIGN, 0)
}

func (s *SymbolDefContext) CONST() antlr.TerminalNode {
	return s.GetToken(goscriptParserCONST, 0)
}

func (s *SymbolDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.EnterSymbolDef(s)
	}
}

func (s *SymbolDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(goscriptListener); ok {
		listenerT.ExitSymbolDef(s)
	}
}

func (p *goscriptParser) SymbolDef() (localctx ISymbolDefContext) {
	localctx = NewSymbolDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, goscriptParserRULE_symbolDef)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(798)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(799)
			p.Name()
		}
		{
			p.SetState(800)
			p.Typename()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(802)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(803)
			p.Name()
		}
		{
			p.SetState(804)
			p.Typename()
		}
		{
			p.SetState(805)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(806)
			p.expr(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(808)
			p.Match(goscriptParserVAR)
		}
		{
			p.SetState(809)
			p.Name()
		}
		{
			p.SetState(810)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(811)
			p.expr(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(813)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(814)
			p.Name()
		}
		{
			p.SetState(815)
			p.Typename()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(817)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(818)
			p.Name()
		}
		{
			p.SetState(819)
			p.Typename()
		}
		{
			p.SetState(820)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(821)
			p.expr(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(823)
			p.Match(goscriptParserLOCAL)
		}
		{
			p.SetState(824)
			p.Name()
		}
		{
			p.SetState(825)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(826)
			p.expr(0)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(828)
			p.Name()
		}
		{
			p.SetState(829)
			p.Match(goscriptParserLOCALASSIGN)
		}
		{
			p.SetState(830)
			p.expr(0)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(832)
			p.Match(goscriptParserCONST)
		}
		{
			p.SetState(833)
			p.Name()
		}
		{
			p.SetState(834)
			p.Typename()
		}
		{
			p.SetState(835)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(836)
			p.expr(0)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(838)
			p.Match(goscriptParserCONST)
		}
		{
			p.SetState(839)
			p.Name()
		}
		{
			p.SetState(840)
			p.Match(goscriptParserASSIGN)
		}
		{
			p.SetState(841)
			p.expr(0)
		}

	}

	return localctx
}

func (p *goscriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 31:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *goscriptParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 9)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
